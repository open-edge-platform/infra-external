// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/open-edge-platform/infra-external/loca-onboarding/v2/pkg/api/loca/v3.3/client/authentication_and_authorization"
	"github.com/open-edge-platform/infra-external/loca-onboarding/v2/pkg/api/loca/v3.3/client/certificate"
	"github.com/open-edge-platform/infra-external/loca-onboarding/v2/pkg/api/loca/v3.3/client/deployment"
	"github.com/open-edge-platform/infra-external/loca-onboarding/v2/pkg/api/loca/v3.3/client/deployments"
	"github.com/open-edge-platform/infra-external/loca-onboarding/v2/pkg/api/loca/v3.3/client/inventory"
	"github.com/open-edge-platform/infra-external/loca-onboarding/v2/pkg/api/loca/v3.3/client/licenses"
	"github.com/open-edge-platform/infra-external/loca-onboarding/v2/pkg/api/loca/v3.3/client/maintenance"
	"github.com/open-edge-platform/infra-external/loca-onboarding/v2/pkg/api/loca/v3.3/client/plugins"
	"github.com/open-edge-platform/infra-external/loca-onboarding/v2/pkg/api/loca/v3.3/client/r_e_g_i_s_t_e_r"
	"github.com/open-edge-platform/infra-external/loca-onboarding/v2/pkg/api/loca/v3.3/client/release"
	"github.com/open-edge-platform/infra-external/loca-onboarding/v2/pkg/api/loca/v3.3/client/secrets"
	"github.com/open-edge-platform/infra-external/loca-onboarding/v2/pkg/api/loca/v3.3/client/sock"
	"github.com/open-edge-platform/infra-external/loca-onboarding/v2/pkg/api/loca/v3.3/client/task_management"
	"github.com/open-edge-platform/infra-external/loca-onboarding/v2/pkg/api/loca/v3.3/client/utilities"
)

// Default loca API HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new loca API HTTP client.
func NewHTTPClient(formats strfmt.Registry) *LocaAPI {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new loca API HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *LocaAPI {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new loca API client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *LocaAPI {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(LocaAPI)
	cli.Transport = transport
	cli.AuthenticationAndAuthorization = authentication_and_authorization.New(transport, formats)
	cli.Certificate = certificate.New(transport, formats)
	cli.Deployment = deployment.New(transport, formats)
	cli.Deployments = deployments.New(transport, formats)
	cli.Inventory = inventory.New(transport, formats)
	cli.Licenses = licenses.New(transport, formats)
	cli.Maintenance = maintenance.New(transport, formats)
	cli.Plugins = plugins.New(transport, formats)
	cli.Register = r_e_g_i_s_t_e_r.New(transport, formats)
	cli.Release = release.New(transport, formats)
	cli.Secrets = secrets.New(transport, formats)
	cli.Sock = sock.New(transport, formats)
	cli.TaskManagement = task_management.New(transport, formats)
	cli.Utilities = utilities.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// LocaAPI is a client for loca API
type LocaAPI struct {
	AuthenticationAndAuthorization authentication_and_authorization.ClientService

	Certificate certificate.ClientService

	Deployment deployment.ClientService

	Deployments deployments.ClientService

	Inventory inventory.ClientService

	Licenses licenses.ClientService

	Maintenance maintenance.ClientService

	Plugins plugins.ClientService

	Register r_e_g_i_s_t_e_r.ClientService

	Release release.ClientService

	Secrets secrets.ClientService

	Sock sock.ClientService

	TaskManagement task_management.ClientService

	Utilities utilities.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *LocaAPI) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.AuthenticationAndAuthorization.SetTransport(transport)
	c.Certificate.SetTransport(transport)
	c.Deployment.SetTransport(transport)
	c.Deployments.SetTransport(transport)
	c.Inventory.SetTransport(transport)
	c.Licenses.SetTransport(transport)
	c.Maintenance.SetTransport(transport)
	c.Plugins.SetTransport(transport)
	c.Register.SetTransport(transport)
	c.Release.SetTransport(transport)
	c.Secrets.SetTransport(transport)
	c.Sock.SetTransport(transport)
	c.TaskManagement.SetTransport(transport)
	c.Utilities.SetTransport(transport)
}
