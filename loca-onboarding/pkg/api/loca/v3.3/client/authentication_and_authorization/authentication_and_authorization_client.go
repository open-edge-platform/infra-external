// Code generated by go-swagger; DO NOT EDIT.

package authentication_and_authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new authentication and authorization API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new authentication and authorization API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new authentication and authorization API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for authentication and authorization API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIV1AuthUsersID(params *DeleteAPIV1AuthUsersIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAPIV1AuthUsersIDOK, error)

	GetAPIV1AuthLdapConfigs(params *GetAPIV1AuthLdapConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1AuthLdapConfigsOK, error)

	GetAPIV1AuthSettings(params *GetAPIV1AuthSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1AuthSettingsOK, error)

	GetAPIV1AuthUsers(params *GetAPIV1AuthUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1AuthUsersOK, error)

	GetAPIV1AuthUsersID(params *GetAPIV1AuthUsersIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1AuthUsersIDOK, error)

	PostAPIV1AuthLdapConfigs(params *PostAPIV1AuthLdapConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1AuthLdapConfigsOK, error)

	PostAPIV1AuthLdapValidate(params *PostAPIV1AuthLdapValidateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1AuthLdapValidateOK, error)

	PostAPIV1AuthLogin(params *PostAPIV1AuthLoginParams, opts ...ClientOption) (*PostAPIV1AuthLoginOK, error)

	PostAPIV1AuthLogout(params *PostAPIV1AuthLogoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1AuthLogoutOK, error)

	PostAPIV1AuthRefreshToken(params *PostAPIV1AuthRefreshTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1AuthRefreshTokenCreated, error)

	PostAPIV1AuthSettings(params *PostAPIV1AuthSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1AuthSettingsOK, error)

	PostAPIV1AuthUsers(params *PostAPIV1AuthUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1AuthUsersOK, error)

	PostAPIV1AuthUsersChangePassword(params *PostAPIV1AuthUsersChangePasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1AuthUsersChangePasswordOK, error)

	PutAPIV1AuthUsersID(params *PutAPIV1AuthUsersIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAPIV1AuthUsersIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAPIV1AuthUsersID removes a user by id
*/
func (a *Client) DeleteAPIV1AuthUsersID(params *DeleteAPIV1AuthUsersIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAPIV1AuthUsersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV1AuthUsersIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPIV1AuthUsersID",
		Method:             "DELETE",
		PathPattern:        "/api/v1/auth/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV1AuthUsersIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV1AuthUsersIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV1AuthUsersID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1AuthLdapConfigs gets ldap configs
*/
func (a *Client) GetAPIV1AuthLdapConfigs(params *GetAPIV1AuthLdapConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1AuthLdapConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1AuthLdapConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1AuthLdapConfigs",
		Method:             "GET",
		PathPattern:        "/api/v1/auth/ldap-configs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1AuthLdapConfigsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1AuthLdapConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1AuthLdapConfigs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1AuthSettings gets ldap user
*/
func (a *Client) GetAPIV1AuthSettings(params *GetAPIV1AuthSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1AuthSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1AuthSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1AuthSettings",
		Method:             "GET",
		PathPattern:        "/api/v1/auth/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1AuthSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1AuthSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1AuthSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1AuthUsers gets all users
*/
func (a *Client) GetAPIV1AuthUsers(params *GetAPIV1AuthUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1AuthUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1AuthUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1AuthUsers",
		Method:             "GET",
		PathPattern:        "/api/v1/auth/users/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1AuthUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1AuthUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1AuthUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1AuthUsersID gets user by id
*/
func (a *Client) GetAPIV1AuthUsersID(params *GetAPIV1AuthUsersIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1AuthUsersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1AuthUsersIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1AuthUsersID",
		Method:             "GET",
		PathPattern:        "/api/v1/auth/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1AuthUsersIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1AuthUsersIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1AuthUsersID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1AuthLdapConfigs creates ldap config
*/
func (a *Client) PostAPIV1AuthLdapConfigs(params *PostAPIV1AuthLdapConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1AuthLdapConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1AuthLdapConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1AuthLdapConfigs",
		Method:             "POST",
		PathPattern:        "/api/v1/auth/ldap-configs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1AuthLdapConfigsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1AuthLdapConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1AuthLdapConfigs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1AuthLdapValidate validates ldap
*/
func (a *Client) PostAPIV1AuthLdapValidate(params *PostAPIV1AuthLdapValidateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1AuthLdapValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1AuthLdapValidateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1AuthLdapValidate",
		Method:             "POST",
		PathPattern:        "/api/v1/auth/ldap/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1AuthLdapValidateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1AuthLdapValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1AuthLdapValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1AuthLogin users login with name and password
*/
func (a *Client) PostAPIV1AuthLogin(params *PostAPIV1AuthLoginParams, opts ...ClientOption) (*PostAPIV1AuthLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1AuthLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1AuthLogin",
		Method:             "POST",
		PathPattern:        "/api/v1/auth/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1AuthLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1AuthLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1AuthLogin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1AuthLogout users logout
*/
func (a *Client) PostAPIV1AuthLogout(params *PostAPIV1AuthLogoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1AuthLogoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1AuthLogoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1AuthLogout",
		Method:             "POST",
		PathPattern:        "/api/v1/auth/logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1AuthLogoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1AuthLogoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1AuthLogout: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1AuthRefreshToken refreshes j w t token
*/
func (a *Client) PostAPIV1AuthRefreshToken(params *PostAPIV1AuthRefreshTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1AuthRefreshTokenCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1AuthRefreshTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1AuthRefreshToken",
		Method:             "POST",
		PathPattern:        "/api/v1/auth/refresh-token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1AuthRefreshTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1AuthRefreshTokenCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1AuthRefreshToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1AuthSettings creates ldap user
*/
func (a *Client) PostAPIV1AuthSettings(params *PostAPIV1AuthSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1AuthSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1AuthSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1AuthSettings",
		Method:             "POST",
		PathPattern:        "/api/v1/auth/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1AuthSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1AuthSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1AuthSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1AuthUsers creates a user
*/
func (a *Client) PostAPIV1AuthUsers(params *PostAPIV1AuthUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1AuthUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1AuthUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1AuthUsers",
		Method:             "POST",
		PathPattern:        "/api/v1/auth/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1AuthUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1AuthUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1AuthUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1AuthUsersChangePassword changes a user password
*/
func (a *Client) PostAPIV1AuthUsersChangePassword(params *PostAPIV1AuthUsersChangePasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1AuthUsersChangePasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1AuthUsersChangePasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1AuthUsersChangePassword",
		Method:             "POST",
		PathPattern:        "/api/v1/auth/users/changePassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1AuthUsersChangePasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1AuthUsersChangePasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1AuthUsersChangePassword: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutAPIV1AuthUsersID modifies a user
*/
func (a *Client) PutAPIV1AuthUsersID(params *PutAPIV1AuthUsersIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAPIV1AuthUsersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV1AuthUsersIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAPIV1AuthUsersID",
		Method:             "PUT",
		PathPattern:        "/api/v1/auth/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV1AuthUsersIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV1AuthUsersIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV1AuthUsersID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
