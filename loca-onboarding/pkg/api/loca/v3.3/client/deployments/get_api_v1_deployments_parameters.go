// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIV1DeploymentsParams creates a new GetAPIV1DeploymentsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIV1DeploymentsParams() *GetAPIV1DeploymentsParams {
	return &GetAPIV1DeploymentsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIV1DeploymentsParamsWithTimeout creates a new GetAPIV1DeploymentsParams object
// with the ability to set a timeout on a request.
func NewGetAPIV1DeploymentsParamsWithTimeout(timeout time.Duration) *GetAPIV1DeploymentsParams {
	return &GetAPIV1DeploymentsParams{
		timeout: timeout,
	}
}

// NewGetAPIV1DeploymentsParamsWithContext creates a new GetAPIV1DeploymentsParams object
// with the ability to set a context for a request.
func NewGetAPIV1DeploymentsParamsWithContext(ctx context.Context) *GetAPIV1DeploymentsParams {
	return &GetAPIV1DeploymentsParams{
		Context: ctx,
	}
}

// NewGetAPIV1DeploymentsParamsWithHTTPClient creates a new GetAPIV1DeploymentsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIV1DeploymentsParamsWithHTTPClient(client *http.Client) *GetAPIV1DeploymentsParams {
	return &GetAPIV1DeploymentsParams{
		HTTPClient: client,
	}
}

/*
GetAPIV1DeploymentsParams contains all the parameters to send to the API endpoint

	for the get API v1 deployments operation.

	Typically these are written to a http.Request.
*/
type GetAPIV1DeploymentsParams struct {

	/* Authorization.

	   Bearer $token
	*/
	Authorization string

	/* FilterContains.

	   Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. The following example will return data which kind contains Deploy or Expand, or operation contains Deploy or Expand., example: [{"attributes":"kind,operation","values":"Deploy,Expand"}]
	*/
	FilterContains *string

	/* FilterEquals.

	   Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. The following example will return data which kind exactly matches Deploy or Expand, or operation exactly matches Deploy or Expand, example: [{"attributes":"kind,operation","values":"Deploy,Expand"}]
	*/
	FilterEquals *string

	/* Limit.

	   Maximum number of returns, example: 10

	   Default: 10
	*/
	Limit *int64

	/* Name.

	   by name
	*/
	Name *string

	/* Offset.

	   Offset, example: 0
	*/
	Offset *int64

	/* Sort.

	   Returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: ["created_time,desc","id,asc"]
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API v1 deployments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV1DeploymentsParams) WithDefaults() *GetAPIV1DeploymentsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API v1 deployments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV1DeploymentsParams) SetDefaults() {
	var (
		limitDefault = int64(10)

		offsetDefault = int64(0)
	)

	val := GetAPIV1DeploymentsParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) WithTimeout(timeout time.Duration) *GetAPIV1DeploymentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) WithContext(ctx context.Context) *GetAPIV1DeploymentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) WithHTTPClient(client *http.Client) *GetAPIV1DeploymentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) WithAuthorization(authorization string) *GetAPIV1DeploymentsParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithFilterContains adds the filterContains to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) WithFilterContains(filterContains *string) *GetAPIV1DeploymentsParams {
	o.SetFilterContains(filterContains)
	return o
}

// SetFilterContains adds the filterContains to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) SetFilterContains(filterContains *string) {
	o.FilterContains = filterContains
}

// WithFilterEquals adds the filterEquals to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) WithFilterEquals(filterEquals *string) *GetAPIV1DeploymentsParams {
	o.SetFilterEquals(filterEquals)
	return o
}

// SetFilterEquals adds the filterEquals to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) SetFilterEquals(filterEquals *string) {
	o.FilterEquals = filterEquals
}

// WithLimit adds the limit to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) WithLimit(limit *int64) *GetAPIV1DeploymentsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) WithName(name *string) *GetAPIV1DeploymentsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) WithOffset(offset *int64) *GetAPIV1DeploymentsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSort adds the sort to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) WithSort(sort *string) *GetAPIV1DeploymentsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get API v1 deployments params
func (o *GetAPIV1DeploymentsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIV1DeploymentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.FilterContains != nil {

		// query param filterContains
		var qrFilterContains string

		if o.FilterContains != nil {
			qrFilterContains = *o.FilterContains
		}
		qFilterContains := qrFilterContains
		if qFilterContains != "" {

			if err := r.SetQueryParam("filterContains", qFilterContains); err != nil {
				return err
			}
		}
	}

	if o.FilterEquals != nil {

		// query param filterEquals
		var qrFilterEquals string

		if o.FilterEquals != nil {
			qrFilterEquals = *o.FilterEquals
		}
		qFilterEquals := qrFilterEquals
		if qFilterEquals != "" {

			if err := r.SetQueryParam("filterEquals", qFilterEquals); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
