// Code generated by go-swagger; DO NOT EDIT.

package task_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIV1TaskManagementTasksParams creates a new GetAPIV1TaskManagementTasksParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIV1TaskManagementTasksParams() *GetAPIV1TaskManagementTasksParams {
	return &GetAPIV1TaskManagementTasksParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIV1TaskManagementTasksParamsWithTimeout creates a new GetAPIV1TaskManagementTasksParams object
// with the ability to set a timeout on a request.
func NewGetAPIV1TaskManagementTasksParamsWithTimeout(timeout time.Duration) *GetAPIV1TaskManagementTasksParams {
	return &GetAPIV1TaskManagementTasksParams{
		timeout: timeout,
	}
}

// NewGetAPIV1TaskManagementTasksParamsWithContext creates a new GetAPIV1TaskManagementTasksParams object
// with the ability to set a context for a request.
func NewGetAPIV1TaskManagementTasksParamsWithContext(ctx context.Context) *GetAPIV1TaskManagementTasksParams {
	return &GetAPIV1TaskManagementTasksParams{
		Context: ctx,
	}
}

// NewGetAPIV1TaskManagementTasksParamsWithHTTPClient creates a new GetAPIV1TaskManagementTasksParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIV1TaskManagementTasksParamsWithHTTPClient(client *http.Client) *GetAPIV1TaskManagementTasksParams {
	return &GetAPIV1TaskManagementTasksParams{
		HTTPClient: client,
	}
}

/*
GetAPIV1TaskManagementTasksParams contains all the parameters to send to the API endpoint

	for the get API v1 task management tasks operation.

	Typically these are written to a http.Request.
*/
type GetAPIV1TaskManagementTasksParams struct {

	/* Authorization.

	   Bearer $token
	*/
	Authorization string

	/* Action.

	   by action of task
	*/
	Action *int64

	/* FilterContains.

	   Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. The following example will return data which kind contains Deploy or Expand, or operation contains Deploy or Expand., example: [{"attributes":"kind,operation","values":"Deploy,Expand"}]
	*/
	FilterContains *string

	/* FilterEquals.

	   Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. The following example will return data which kind exactly matches Deploy or Expand, or operation exactly matches Deploy or Expand, example: [{"attributes":"kind,operation","values":"Deploy,Expand"}]
	*/
	FilterEquals *string

	/* JobID.

	   by status of task
	*/
	JobID *float64

	/* Limit.

	   Maximum number of returns, example: 10

	   Default: 10
	*/
	Limit *int64

	/* Name.

	   by name of task
	*/
	Name *string

	/* Offset.

	   Offset, example: 0
	*/
	Offset *int64

	/* Sort.

	   Returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: ["created_time,desc","id,asc"]
	*/
	Sort *string

	/* Status.

	   by status of task
	*/
	Status *string

	/* Type.

	   by type of task
	*/
	Type *int64

	/* UUID.

	   by uuid of task
	*/
	UUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API v1 task management tasks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV1TaskManagementTasksParams) WithDefaults() *GetAPIV1TaskManagementTasksParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API v1 task management tasks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV1TaskManagementTasksParams) SetDefaults() {
	var (
		limitDefault = int64(10)

		offsetDefault = int64(0)
	)

	val := GetAPIV1TaskManagementTasksParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) WithTimeout(timeout time.Duration) *GetAPIV1TaskManagementTasksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) WithContext(ctx context.Context) *GetAPIV1TaskManagementTasksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) WithHTTPClient(client *http.Client) *GetAPIV1TaskManagementTasksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) WithAuthorization(authorization string) *GetAPIV1TaskManagementTasksParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithAction adds the action to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) WithAction(action *int64) *GetAPIV1TaskManagementTasksParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) SetAction(action *int64) {
	o.Action = action
}

// WithFilterContains adds the filterContains to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) WithFilterContains(filterContains *string) *GetAPIV1TaskManagementTasksParams {
	o.SetFilterContains(filterContains)
	return o
}

// SetFilterContains adds the filterContains to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) SetFilterContains(filterContains *string) {
	o.FilterContains = filterContains
}

// WithFilterEquals adds the filterEquals to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) WithFilterEquals(filterEquals *string) *GetAPIV1TaskManagementTasksParams {
	o.SetFilterEquals(filterEquals)
	return o
}

// SetFilterEquals adds the filterEquals to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) SetFilterEquals(filterEquals *string) {
	o.FilterEquals = filterEquals
}

// WithJobID adds the jobID to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) WithJobID(jobID *float64) *GetAPIV1TaskManagementTasksParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) SetJobID(jobID *float64) {
	o.JobID = jobID
}

// WithLimit adds the limit to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) WithLimit(limit *int64) *GetAPIV1TaskManagementTasksParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) WithName(name *string) *GetAPIV1TaskManagementTasksParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) WithOffset(offset *int64) *GetAPIV1TaskManagementTasksParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSort adds the sort to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) WithSort(sort *string) *GetAPIV1TaskManagementTasksParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithStatus adds the status to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) WithStatus(status *string) *GetAPIV1TaskManagementTasksParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) SetStatus(status *string) {
	o.Status = status
}

// WithType adds the typeVar to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) WithType(typeVar *int64) *GetAPIV1TaskManagementTasksParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) SetType(typeVar *int64) {
	o.Type = typeVar
}

// WithUUID adds the uuid to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) WithUUID(uuid *string) *GetAPIV1TaskManagementTasksParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the get API v1 task management tasks params
func (o *GetAPIV1TaskManagementTasksParams) SetUUID(uuid *string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIV1TaskManagementTasksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.Action != nil {

		// query param action
		var qrAction int64

		if o.Action != nil {
			qrAction = *o.Action
		}
		qAction := swag.FormatInt64(qrAction)
		if qAction != "" {

			if err := r.SetQueryParam("action", qAction); err != nil {
				return err
			}
		}
	}

	if o.FilterContains != nil {

		// query param filterContains
		var qrFilterContains string

		if o.FilterContains != nil {
			qrFilterContains = *o.FilterContains
		}
		qFilterContains := qrFilterContains
		if qFilterContains != "" {

			if err := r.SetQueryParam("filterContains", qFilterContains); err != nil {
				return err
			}
		}
	}

	if o.FilterEquals != nil {

		// query param filterEquals
		var qrFilterEquals string

		if o.FilterEquals != nil {
			qrFilterEquals = *o.FilterEquals
		}
		qFilterEquals := qrFilterEquals
		if qFilterEquals != "" {

			if err := r.SetQueryParam("filterEquals", qFilterEquals); err != nil {
				return err
			}
		}
	}

	if o.JobID != nil {

		// query param job_id
		var qrJobID float64

		if o.JobID != nil {
			qrJobID = *o.JobID
		}
		qJobID := swag.FormatFloat64(qrJobID)
		if qJobID != "" {

			if err := r.SetQueryParam("job_id", qJobID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType int64

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := swag.FormatInt64(qrType)
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.UUID != nil {

		// query param uuid
		var qrUUID string

		if o.UUID != nil {
			qrUUID = *o.UUID
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
