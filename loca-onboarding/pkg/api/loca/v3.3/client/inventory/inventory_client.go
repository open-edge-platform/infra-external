// Code generated by go-swagger; DO NOT EDIT.

package inventory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new inventory API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new inventory API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new inventory API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for inventory API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAPIV1InventoryCloudServices(params *GetAPIV1InventoryCloudServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryCloudServicesOK, error)

	GetAPIV1InventoryCloudServicesID(params *GetAPIV1InventoryCloudServicesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryCloudServicesIDOK, error)

	GetAPIV1InventoryCloudServicesMetadataRules(params *GetAPIV1InventoryCloudServicesMetadataRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryCloudServicesMetadataRulesOK, error)

	GetAPIV1InventoryDeviceProfiles(params *GetAPIV1InventoryDeviceProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryDeviceProfilesOK, error)

	GetAPIV1InventoryDeviceProfilesFlavorsID(params *GetAPIV1InventoryDeviceProfilesFlavorsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryDeviceProfilesFlavorsIDOK, error)

	GetAPIV1InventoryDeviceProfilesID(params *GetAPIV1InventoryDeviceProfilesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryDeviceProfilesIDOK, error)

	GetAPIV1InventoryDevices(params *GetAPIV1InventoryDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryDevicesOK, error)

	GetAPIV1InventoryDevicesDiscover(params *GetAPIV1InventoryDevicesDiscoverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryDevicesDiscoverCreated, error)

	GetAPIV1InventoryDevicesID(params *GetAPIV1InventoryDevicesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryDevicesIDOK, error)

	GetAPIV1InventoryDevicesIDMetadataRules(params *GetAPIV1InventoryDevicesIDMetadataRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryDevicesIDMetadataRulesOK, error)

	GetAPIV1InventoryDevicesRegistrationFileDownload(params *GetAPIV1InventoryDevicesRegistrationFileDownloadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryDevicesRegistrationFileDownloadOK, error)

	GetAPIV1InventoryDownload(params *GetAPIV1InventoryDownloadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryDownloadOK, error)

	GetAPIV1InventoryIPRanges(params *GetAPIV1InventoryIPRangesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryIPRangesOK, error)

	GetAPIV1InventoryIPRangesID(params *GetAPIV1InventoryIPRangesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryIPRangesIDOK, error)

	GetAPIV1InventoryIPRangesMetadataRules(params *GetAPIV1InventoryIPRangesMetadataRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryIPRangesMetadataRulesOK, error)

	GetAPIV1InventoryNetworkServices(params *GetAPIV1InventoryNetworkServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryNetworkServicesOK, error)

	GetAPIV1InventoryNetworkServicesID(params *GetAPIV1InventoryNetworkServicesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryNetworkServicesIDOK, error)

	GetAPIV1InventoryNetworkServicesMetadataRules(params *GetAPIV1InventoryNetworkServicesMetadataRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryNetworkServicesMetadataRulesOK, error)

	GetAPIV1InventoryRepository(params *GetAPIV1InventoryRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryRepositoryOK, error)

	GetAPIV1InventorySites(params *GetAPIV1InventorySitesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventorySitesOK, error)

	GetAPIV1InventorySitesID(params *GetAPIV1InventorySitesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventorySitesIDOK, error)

	GetAPIV1InventorySitesMetadataRules(params *GetAPIV1InventorySitesMetadataRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventorySitesMetadataRulesOK, error)

	PostAPIV1InventoryCloudServices(params *PostAPIV1InventoryCloudServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryCloudServicesCreated, error)

	PostAPIV1InventoryCloudServicesRemove(params *PostAPIV1InventoryCloudServicesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryCloudServicesRemoveCreated, error)

	PostAPIV1InventoryCloudServicesUpdate(params *PostAPIV1InventoryCloudServicesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryCloudServicesUpdateOK, error)

	PostAPIV1InventoryDeviceProfiles(params *PostAPIV1InventoryDeviceProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryDeviceProfilesCreated, error)

	PostAPIV1InventoryDeviceProfilesRemove(params *PostAPIV1InventoryDeviceProfilesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryDeviceProfilesRemoveCreated, error)

	PostAPIV1InventoryDeviceProfilesUpdate(params *PostAPIV1InventoryDeviceProfilesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryDeviceProfilesUpdateCreated, error)

	PostAPIV1InventoryDevices(params *PostAPIV1InventoryDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryDevicesCreated, error)

	PostAPIV1InventoryDevicesDiscover(params *PostAPIV1InventoryDevicesDiscoverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryDevicesDiscoverCreated, error)

	PostAPIV1InventoryDevicesIDUpdate(params *PostAPIV1InventoryDevicesIDUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryDevicesIDUpdateOK, error)

	PostAPIV1InventoryDevicesRemove(params *PostAPIV1InventoryDevicesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryDevicesRemoveCreated, error)

	PostAPIV1InventoryDevicesUpload(params *PostAPIV1InventoryDevicesUploadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryDevicesUploadCreated, error)

	PostAPIV1InventoryIPRanges(params *PostAPIV1InventoryIPRangesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryIPRangesCreated, error)

	PostAPIV1InventoryIPRangesRemove(params *PostAPIV1InventoryIPRangesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryIPRangesRemoveOK, error)

	PostAPIV1InventoryNetworkServices(params *PostAPIV1InventoryNetworkServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryNetworkServicesCreated, error)

	PostAPIV1InventoryNetworkServicesRemove(params *PostAPIV1InventoryNetworkServicesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryNetworkServicesRemoveOK, error)

	PostAPIV1InventoryRepositoryRemove(params *PostAPIV1InventoryRepositoryRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryRepositoryRemoveOK, error)

	PostAPIV1InventoryRepositoryUpload(params *PostAPIV1InventoryRepositoryUploadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryRepositoryUploadOK, error)

	PostAPIV1InventorySites(params *PostAPIV1InventorySitesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventorySitesCreated, error)

	PostAPIV1InventorySitesRemove(params *PostAPIV1InventorySitesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventorySitesRemoveCreated, error)

	PostAPIV1InventoryUpload(params *PostAPIV1InventoryUploadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryUploadOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAPIV1InventoryCloudServices queries cloud services
*/
func (a *Client) GetAPIV1InventoryCloudServices(params *GetAPIV1InventoryCloudServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryCloudServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventoryCloudServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventoryCloudServices",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/cloud-services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventoryCloudServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventoryCloudServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventoryCloudServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventoryCloudServicesID queries cloud service by id
*/
func (a *Client) GetAPIV1InventoryCloudServicesID(params *GetAPIV1InventoryCloudServicesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryCloudServicesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventoryCloudServicesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventoryCloudServicesID",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/cloud-services/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventoryCloudServicesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventoryCloudServicesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventoryCloudServicesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventoryCloudServicesMetadataRules retrieves cloud service metadata rules

Retrieves all setting rules for cloud services to determine which fields can be modified in the cloud service table.
*/
func (a *Client) GetAPIV1InventoryCloudServicesMetadataRules(params *GetAPIV1InventoryCloudServicesMetadataRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryCloudServicesMetadataRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventoryCloudServicesMetadataRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventoryCloudServicesMetadataRules",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/cloud-services/metadata-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventoryCloudServicesMetadataRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventoryCloudServicesMetadataRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventoryCloudServicesMetadataRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventoryDeviceProfiles queries device profiles
*/
func (a *Client) GetAPIV1InventoryDeviceProfiles(params *GetAPIV1InventoryDeviceProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryDeviceProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventoryDeviceProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventoryDeviceProfiles",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/device-profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventoryDeviceProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventoryDeviceProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventoryDeviceProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventoryDeviceProfilesFlavorsID queries d c i m device profile by ID
*/
func (a *Client) GetAPIV1InventoryDeviceProfilesFlavorsID(params *GetAPIV1InventoryDeviceProfilesFlavorsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryDeviceProfilesFlavorsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventoryDeviceProfilesFlavorsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventoryDeviceProfilesFlavorsID",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/device-profiles/flavors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventoryDeviceProfilesFlavorsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventoryDeviceProfilesFlavorsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventoryDeviceProfilesFlavorsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventoryDeviceProfilesID queries device profile by id
*/
func (a *Client) GetAPIV1InventoryDeviceProfilesID(params *GetAPIV1InventoryDeviceProfilesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryDeviceProfilesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventoryDeviceProfilesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventoryDeviceProfilesID",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/device-profiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventoryDeviceProfilesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventoryDeviceProfilesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventoryDeviceProfilesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventoryDevices queries devices
*/
func (a *Client) GetAPIV1InventoryDevices(params *GetAPIV1InventoryDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventoryDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventoryDevices",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventoryDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventoryDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventoryDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventoryDevicesDiscover gets discovered devices
*/
func (a *Client) GetAPIV1InventoryDevicesDiscover(params *GetAPIV1InventoryDevicesDiscoverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryDevicesDiscoverCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventoryDevicesDiscoverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventoryDevicesDiscover",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/devices/discover",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventoryDevicesDiscoverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventoryDevicesDiscoverCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventoryDevicesDiscover: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventoryDevicesID queries devices by id
*/
func (a *Client) GetAPIV1InventoryDevicesID(params *GetAPIV1InventoryDevicesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryDevicesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventoryDevicesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventoryDevicesID",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/devices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventoryDevicesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventoryDevicesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventoryDevicesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventoryDevicesIDMetadataRules queries device setting rules by the device ID
*/
func (a *Client) GetAPIV1InventoryDevicesIDMetadataRules(params *GetAPIV1InventoryDevicesIDMetadataRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryDevicesIDMetadataRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventoryDevicesIDMetadataRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventoryDevicesIDMetadataRules",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/devices/{id}/metadata-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventoryDevicesIDMetadataRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventoryDevicesIDMetadataRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventoryDevicesIDMetadataRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventoryDevicesRegistrationFileDownload downloads a registration devices template file with excel format
*/
func (a *Client) GetAPIV1InventoryDevicesRegistrationFileDownload(params *GetAPIV1InventoryDevicesRegistrationFileDownloadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryDevicesRegistrationFileDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventoryDevicesRegistrationFileDownloadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventoryDevicesRegistrationFileDownload",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/devices/registration-file-download",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventoryDevicesRegistrationFileDownloadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventoryDevicesRegistrationFileDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventoryDevicesRegistrationFileDownload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventoryDownload downloads a cloud setup file with excel format
*/
func (a *Client) GetAPIV1InventoryDownload(params *GetAPIV1InventoryDownloadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventoryDownloadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventoryDownload",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/download",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventoryDownloadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventoryDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventoryDownload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventoryIPRanges queries ip ranges
*/
func (a *Client) GetAPIV1InventoryIPRanges(params *GetAPIV1InventoryIPRangesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryIPRangesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventoryIPRangesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventoryIPRanges",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/ip-ranges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventoryIPRangesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventoryIPRangesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventoryIPRanges: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventoryIPRangesID queries ip range by id
*/
func (a *Client) GetAPIV1InventoryIPRangesID(params *GetAPIV1InventoryIPRangesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryIPRangesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventoryIPRangesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventoryIPRangesID",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/ip-ranges/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventoryIPRangesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventoryIPRangesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventoryIPRangesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventoryIPRangesMetadataRules retrieves IP range metadata rules

Retrieves all setting rules for IP ranges to determine which fields can be modified in the IP range table.
*/
func (a *Client) GetAPIV1InventoryIPRangesMetadataRules(params *GetAPIV1InventoryIPRangesMetadataRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryIPRangesMetadataRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventoryIPRangesMetadataRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventoryIPRangesMetadataRules",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/ip-ranges/metadata-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventoryIPRangesMetadataRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventoryIPRangesMetadataRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventoryIPRangesMetadataRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventoryNetworkServices queries network services
*/
func (a *Client) GetAPIV1InventoryNetworkServices(params *GetAPIV1InventoryNetworkServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryNetworkServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventoryNetworkServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventoryNetworkServices",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/network-services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventoryNetworkServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventoryNetworkServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventoryNetworkServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventoryNetworkServicesID queries network service by id
*/
func (a *Client) GetAPIV1InventoryNetworkServicesID(params *GetAPIV1InventoryNetworkServicesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryNetworkServicesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventoryNetworkServicesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventoryNetworkServicesID",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/network-services/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventoryNetworkServicesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventoryNetworkServicesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventoryNetworkServicesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventoryNetworkServicesMetadataRules retrieves network service metadata rules

Retrieves all setting rules for network services to determine which fields can be modified in the network service table.
*/
func (a *Client) GetAPIV1InventoryNetworkServicesMetadataRules(params *GetAPIV1InventoryNetworkServicesMetadataRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryNetworkServicesMetadataRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventoryNetworkServicesMetadataRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventoryNetworkServicesMetadataRules",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/network-services/metadata-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventoryNetworkServicesMetadataRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventoryNetworkServicesMetadataRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventoryNetworkServicesMetadataRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventoryRepository refreshes images list to repository
*/
func (a *Client) GetAPIV1InventoryRepository(params *GetAPIV1InventoryRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventoryRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventoryRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventoryRepository",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/repository",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventoryRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventoryRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventoryRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventorySites queries sites
*/
func (a *Client) GetAPIV1InventorySites(params *GetAPIV1InventorySitesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventorySitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventorySitesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventorySites",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/sites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventorySitesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventorySitesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventorySites: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventorySitesID queries site by id
*/
func (a *Client) GetAPIV1InventorySitesID(params *GetAPIV1InventorySitesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventorySitesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventorySitesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventorySitesID",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/sites/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventorySitesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventorySitesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventorySitesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1InventorySitesMetadataRules retrieves site metadata rules

Retrieves all setting rules for sites to determine which fields can be modified in the site table.
*/
func (a *Client) GetAPIV1InventorySitesMetadataRules(params *GetAPIV1InventorySitesMetadataRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1InventorySitesMetadataRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InventorySitesMetadataRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1InventorySitesMetadataRules",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/sites/metadata-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1InventorySitesMetadataRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InventorySitesMetadataRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InventorySitesMetadataRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventoryCloudServices creates cloud services

Create one or multiple cloud services with the provided details.
*/
func (a *Client) PostAPIV1InventoryCloudServices(params *PostAPIV1InventoryCloudServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryCloudServicesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventoryCloudServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventoryCloudServices",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/cloud-services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventoryCloudServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventoryCloudServicesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventoryCloudServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventoryCloudServicesRemove removes cloud services
*/
func (a *Client) PostAPIV1InventoryCloudServicesRemove(params *PostAPIV1InventoryCloudServicesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryCloudServicesRemoveCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventoryCloudServicesRemoveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventoryCloudServicesRemove",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/cloud-services/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventoryCloudServicesRemoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventoryCloudServicesRemoveCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventoryCloudServicesRemove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventoryCloudServicesUpdate updates a cloud service

Update the details of an existing cloud service identified by its ID.
*/
func (a *Client) PostAPIV1InventoryCloudServicesUpdate(params *PostAPIV1InventoryCloudServicesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryCloudServicesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventoryCloudServicesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventoryCloudServicesUpdate",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/cloud-services/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventoryCloudServicesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventoryCloudServicesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventoryCloudServicesUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventoryDeviceProfiles creates d c i m device profile
*/
func (a *Client) PostAPIV1InventoryDeviceProfiles(params *PostAPIV1InventoryDeviceProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryDeviceProfilesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventoryDeviceProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventoryDeviceProfiles",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/device-profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventoryDeviceProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventoryDeviceProfilesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventoryDeviceProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventoryDeviceProfilesRemove deletes d c i m device profile
*/
func (a *Client) PostAPIV1InventoryDeviceProfilesRemove(params *PostAPIV1InventoryDeviceProfilesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryDeviceProfilesRemoveCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventoryDeviceProfilesRemoveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventoryDeviceProfilesRemove",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/device-profiles/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventoryDeviceProfilesRemoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventoryDeviceProfilesRemoveCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventoryDeviceProfilesRemove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventoryDeviceProfilesUpdate updates device profiles
*/
func (a *Client) PostAPIV1InventoryDeviceProfilesUpdate(params *PostAPIV1InventoryDeviceProfilesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryDeviceProfilesUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventoryDeviceProfilesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventoryDeviceProfilesUpdate",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/device-profiles/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventoryDeviceProfilesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventoryDeviceProfilesUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventoryDeviceProfilesUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventoryDevices adds devices by ip address
*/
func (a *Client) PostAPIV1InventoryDevices(params *PostAPIV1InventoryDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryDevicesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventoryDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventoryDevices",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventoryDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventoryDevicesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventoryDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventoryDevicesDiscover adds devices through discovery
*/
func (a *Client) PostAPIV1InventoryDevicesDiscover(params *PostAPIV1InventoryDevicesDiscoverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryDevicesDiscoverCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventoryDevicesDiscoverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventoryDevicesDiscover",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/devices/discover",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventoryDevicesDiscoverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventoryDevicesDiscoverCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventoryDevicesDiscover: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventoryDevicesIDUpdate updates device
*/
func (a *Client) PostAPIV1InventoryDevicesIDUpdate(params *PostAPIV1InventoryDevicesIDUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryDevicesIDUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventoryDevicesIDUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventoryDevicesIDUpdate",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/devices/{id}/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventoryDevicesIDUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventoryDevicesIDUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventoryDevicesIDUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventoryDevicesRemove removes devices from inventory
*/
func (a *Client) PostAPIV1InventoryDevicesRemove(params *PostAPIV1InventoryDevicesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryDevicesRemoveCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventoryDevicesRemoveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventoryDevicesRemove",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/devices/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventoryDevicesRemoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventoryDevicesRemoveCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventoryDevicesRemove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventoryDevicesUpload adds devices through file
*/
func (a *Client) PostAPIV1InventoryDevicesUpload(params *PostAPIV1InventoryDevicesUploadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryDevicesUploadCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventoryDevicesUploadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventoryDevicesUpload",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/devices/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventoryDevicesUploadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventoryDevicesUploadCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventoryDevicesUpload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventoryIPRanges creates IP ranges

Create one or multiple IP ranges with the provided details.
*/
func (a *Client) PostAPIV1InventoryIPRanges(params *PostAPIV1InventoryIPRangesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryIPRangesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventoryIPRangesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventoryIPRanges",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/ip-ranges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventoryIPRangesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventoryIPRangesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventoryIPRanges: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventoryIPRangesRemove removes ip ranges
*/
func (a *Client) PostAPIV1InventoryIPRangesRemove(params *PostAPIV1InventoryIPRangesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryIPRangesRemoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventoryIPRangesRemoveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventoryIPRangesRemove",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/ip-ranges/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventoryIPRangesRemoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventoryIPRangesRemoveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventoryIPRangesRemove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventoryNetworkServices creates network services

Create one or multiple network services with the provided details.
*/
func (a *Client) PostAPIV1InventoryNetworkServices(params *PostAPIV1InventoryNetworkServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryNetworkServicesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventoryNetworkServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventoryNetworkServices",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/network-services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventoryNetworkServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventoryNetworkServicesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventoryNetworkServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventoryNetworkServicesRemove removes network services
*/
func (a *Client) PostAPIV1InventoryNetworkServicesRemove(params *PostAPIV1InventoryNetworkServicesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryNetworkServicesRemoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventoryNetworkServicesRemoveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventoryNetworkServicesRemove",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/network-services/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventoryNetworkServicesRemoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventoryNetworkServicesRemoveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventoryNetworkServicesRemove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventoryRepositoryRemove removes image from repository
*/
func (a *Client) PostAPIV1InventoryRepositoryRemove(params *PostAPIV1InventoryRepositoryRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryRepositoryRemoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventoryRepositoryRemoveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventoryRepositoryRemove",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/repository/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventoryRepositoryRemoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventoryRepositoryRemoveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventoryRepositoryRemove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventoryRepositoryUpload uploads image to repository
*/
func (a *Client) PostAPIV1InventoryRepositoryUpload(params *PostAPIV1InventoryRepositoryUploadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryRepositoryUploadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventoryRepositoryUploadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventoryRepositoryUpload",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/repository/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventoryRepositoryUploadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventoryRepositoryUploadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventoryRepositoryUpload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventorySites creates new sites

Create one or multiple sites with the provided details.
*/
func (a *Client) PostAPIV1InventorySites(params *PostAPIV1InventorySitesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventorySitesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventorySitesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventorySites",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/sites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventorySitesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventorySitesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventorySites: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventorySitesRemove removes sites
*/
func (a *Client) PostAPIV1InventorySitesRemove(params *PostAPIV1InventorySitesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventorySitesRemoveCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventorySitesRemoveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventorySitesRemove",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/sites/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventorySitesRemoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventorySitesRemoveCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventorySitesRemove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1InventoryUpload uploads a cloud setup file with excel format
*/
func (a *Client) PostAPIV1InventoryUpload(params *PostAPIV1InventoryUploadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1InventoryUploadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1InventoryUploadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1InventoryUpload",
		Method:             "POST",
		PathPattern:        "/api/v1/inventory/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1InventoryUploadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1InventoryUploadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1InventoryUpload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
