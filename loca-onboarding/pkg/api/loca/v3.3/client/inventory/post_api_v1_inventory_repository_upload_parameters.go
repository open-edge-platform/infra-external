// Code generated by go-swagger; DO NOT EDIT.

package inventory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostAPIV1InventoryRepositoryUploadParams creates a new PostAPIV1InventoryRepositoryUploadParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostAPIV1InventoryRepositoryUploadParams() *PostAPIV1InventoryRepositoryUploadParams {
	return &PostAPIV1InventoryRepositoryUploadParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostAPIV1InventoryRepositoryUploadParamsWithTimeout creates a new PostAPIV1InventoryRepositoryUploadParams object
// with the ability to set a timeout on a request.
func NewPostAPIV1InventoryRepositoryUploadParamsWithTimeout(timeout time.Duration) *PostAPIV1InventoryRepositoryUploadParams {
	return &PostAPIV1InventoryRepositoryUploadParams{
		timeout: timeout,
	}
}

// NewPostAPIV1InventoryRepositoryUploadParamsWithContext creates a new PostAPIV1InventoryRepositoryUploadParams object
// with the ability to set a context for a request.
func NewPostAPIV1InventoryRepositoryUploadParamsWithContext(ctx context.Context) *PostAPIV1InventoryRepositoryUploadParams {
	return &PostAPIV1InventoryRepositoryUploadParams{
		Context: ctx,
	}
}

// NewPostAPIV1InventoryRepositoryUploadParamsWithHTTPClient creates a new PostAPIV1InventoryRepositoryUploadParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostAPIV1InventoryRepositoryUploadParamsWithHTTPClient(client *http.Client) *PostAPIV1InventoryRepositoryUploadParams {
	return &PostAPIV1InventoryRepositoryUploadParams{
		HTTPClient: client,
	}
}

/*
PostAPIV1InventoryRepositoryUploadParams contains all the parameters to send to the API endpoint

	for the post API v1 inventory repository upload operation.

	Typically these are written to a http.Request.
*/
type PostAPIV1InventoryRepositoryUploadParams struct {

	/* Authorization.

	   Bearer $token
	*/
	Authorization string

	/* Chunkindex.

	   Index of file's chunk
	*/
	Chunkindex string

	/* Chunktotal.

	   Total of file's chunk
	*/
	Chunktotal string

	/* File.

	   File content
	*/
	File runtime.NamedReadCloser

	/* FileType.

	   The file type, options can be iso, firmware
	*/
	FileType string

	/* Filesize.

	   The size of file
	*/
	Filesize string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post API v1 inventory repository upload params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostAPIV1InventoryRepositoryUploadParams) WithDefaults() *PostAPIV1InventoryRepositoryUploadParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post API v1 inventory repository upload params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostAPIV1InventoryRepositoryUploadParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post API v1 inventory repository upload params
func (o *PostAPIV1InventoryRepositoryUploadParams) WithTimeout(timeout time.Duration) *PostAPIV1InventoryRepositoryUploadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post API v1 inventory repository upload params
func (o *PostAPIV1InventoryRepositoryUploadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post API v1 inventory repository upload params
func (o *PostAPIV1InventoryRepositoryUploadParams) WithContext(ctx context.Context) *PostAPIV1InventoryRepositoryUploadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post API v1 inventory repository upload params
func (o *PostAPIV1InventoryRepositoryUploadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post API v1 inventory repository upload params
func (o *PostAPIV1InventoryRepositoryUploadParams) WithHTTPClient(client *http.Client) *PostAPIV1InventoryRepositoryUploadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post API v1 inventory repository upload params
func (o *PostAPIV1InventoryRepositoryUploadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the post API v1 inventory repository upload params
func (o *PostAPIV1InventoryRepositoryUploadParams) WithAuthorization(authorization string) *PostAPIV1InventoryRepositoryUploadParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the post API v1 inventory repository upload params
func (o *PostAPIV1InventoryRepositoryUploadParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithChunkindex adds the chunkindex to the post API v1 inventory repository upload params
func (o *PostAPIV1InventoryRepositoryUploadParams) WithChunkindex(chunkindex string) *PostAPIV1InventoryRepositoryUploadParams {
	o.SetChunkindex(chunkindex)
	return o
}

// SetChunkindex adds the chunkindex to the post API v1 inventory repository upload params
func (o *PostAPIV1InventoryRepositoryUploadParams) SetChunkindex(chunkindex string) {
	o.Chunkindex = chunkindex
}

// WithChunktotal adds the chunktotal to the post API v1 inventory repository upload params
func (o *PostAPIV1InventoryRepositoryUploadParams) WithChunktotal(chunktotal string) *PostAPIV1InventoryRepositoryUploadParams {
	o.SetChunktotal(chunktotal)
	return o
}

// SetChunktotal adds the chunktotal to the post API v1 inventory repository upload params
func (o *PostAPIV1InventoryRepositoryUploadParams) SetChunktotal(chunktotal string) {
	o.Chunktotal = chunktotal
}

// WithFile adds the file to the post API v1 inventory repository upload params
func (o *PostAPIV1InventoryRepositoryUploadParams) WithFile(file runtime.NamedReadCloser) *PostAPIV1InventoryRepositoryUploadParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the post API v1 inventory repository upload params
func (o *PostAPIV1InventoryRepositoryUploadParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithFileType adds the fileType to the post API v1 inventory repository upload params
func (o *PostAPIV1InventoryRepositoryUploadParams) WithFileType(fileType string) *PostAPIV1InventoryRepositoryUploadParams {
	o.SetFileType(fileType)
	return o
}

// SetFileType adds the fileType to the post API v1 inventory repository upload params
func (o *PostAPIV1InventoryRepositoryUploadParams) SetFileType(fileType string) {
	o.FileType = fileType
}

// WithFilesize adds the filesize to the post API v1 inventory repository upload params
func (o *PostAPIV1InventoryRepositoryUploadParams) WithFilesize(filesize string) *PostAPIV1InventoryRepositoryUploadParams {
	o.SetFilesize(filesize)
	return o
}

// SetFilesize adds the filesize to the post API v1 inventory repository upload params
func (o *PostAPIV1InventoryRepositoryUploadParams) SetFilesize(filesize string) {
	o.Filesize = filesize
}

// WriteToRequest writes these params to a swagger request
func (o *PostAPIV1InventoryRepositoryUploadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// form param chunkindex
	frChunkindex := o.Chunkindex
	fChunkindex := frChunkindex
	if fChunkindex != "" {
		if err := r.SetFormParam("chunkindex", fChunkindex); err != nil {
			return err
		}
	}

	// form param chunktotal
	frChunktotal := o.Chunktotal
	fChunktotal := frChunktotal
	if fChunktotal != "" {
		if err := r.SetFormParam("chunktotal", fChunktotal); err != nil {
			return err
		}
	}
	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	// form param fileType
	frFileType := o.FileType
	fFileType := frFileType
	if fFileType != "" {
		if err := r.SetFormParam("fileType", fFileType); err != nil {
			return err
		}
	}

	// form param filesize
	frFilesize := o.Filesize
	fFilesize := frFilesize
	if fFilesize != "" {
		if err := r.SetFormParam("filesize", fFilesize); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
