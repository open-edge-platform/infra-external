// Code generated by go-swagger; DO NOT EDIT.

package inventory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIV1InventoryIPRangesParams creates a new GetAPIV1InventoryIPRangesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIV1InventoryIPRangesParams() *GetAPIV1InventoryIPRangesParams {
	return &GetAPIV1InventoryIPRangesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIV1InventoryIPRangesParamsWithTimeout creates a new GetAPIV1InventoryIPRangesParams object
// with the ability to set a timeout on a request.
func NewGetAPIV1InventoryIPRangesParamsWithTimeout(timeout time.Duration) *GetAPIV1InventoryIPRangesParams {
	return &GetAPIV1InventoryIPRangesParams{
		timeout: timeout,
	}
}

// NewGetAPIV1InventoryIPRangesParamsWithContext creates a new GetAPIV1InventoryIPRangesParams object
// with the ability to set a context for a request.
func NewGetAPIV1InventoryIPRangesParamsWithContext(ctx context.Context) *GetAPIV1InventoryIPRangesParams {
	return &GetAPIV1InventoryIPRangesParams{
		Context: ctx,
	}
}

// NewGetAPIV1InventoryIPRangesParamsWithHTTPClient creates a new GetAPIV1InventoryIPRangesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIV1InventoryIPRangesParamsWithHTTPClient(client *http.Client) *GetAPIV1InventoryIPRangesParams {
	return &GetAPIV1InventoryIPRangesParams{
		HTTPClient: client,
	}
}

/*
GetAPIV1InventoryIPRangesParams contains all the parameters to send to the API endpoint

	for the get API v1 inventory IP ranges operation.

	Typically these are written to a http.Request.
*/
type GetAPIV1InventoryIPRangesParams struct {

	/* Authorization.

	   Bearer $token
	*/
	Authorization string

	/* Description.

	   filter by description
	*/
	Description *string

	/* EndAddress.

	   filter by endAddress
	*/
	EndAddress *string

	/* FilterContains.

	   Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. the following example will return data which city contains shzj001 or shzj002, or county contains shzj001 or shzj002, example: [{"attributes":"city,country","values":"shzj001,shzj002"}]

	   Default: "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]"
	*/
	FilterContains *string

	/* FilterEquals.

	   Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city exactly matches shzj001 or shzj002, or county exactly matches shzj001 or shzj002, example: [{"attributes":"city,country","values":"shzj001,shzj002"}]

	   Default: "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]"
	*/
	FilterEquals *string

	/* Gateway.

	   filter by gateway
	*/
	Gateway *string

	/* Limit.

	    , example: 10

	   Default: 10
	*/
	Limit *int64

	/* Name.

	   filter by name
	*/
	Name *string

	/* Netmask.

	   filter by netmask

	   Format: int32
	*/
	Netmask *int32

	/* Offset.

	   , example: 0
	*/
	Offset *int64

	/* Role.

	   filter by role
	*/
	Role *string

	/* SiteAssociation.

	   filter by siteAssociation
	*/
	SiteAssociation *string

	/* Sort.

	   Returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: ["created_time,desc","id,asc"]

	   Default: "[\"created_time,desc\",\"id,asc\"]"
	*/
	Sort *string

	/* StartAddress.

	   filter by startAddress
	*/
	StartAddress *string

	/* Vlan.

	   filter by vlan
	*/
	Vlan *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API v1 inventory IP ranges params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV1InventoryIPRangesParams) WithDefaults() *GetAPIV1InventoryIPRangesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API v1 inventory IP ranges params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV1InventoryIPRangesParams) SetDefaults() {
	var (
		filterContainsDefault = string("[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]")

		filterEqualsDefault = string("[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]")

		limitDefault = int64(10)

		offsetDefault = int64(0)

		sortDefault = string("[\"created_time,desc\",\"id,asc\"]")
	)

	val := GetAPIV1InventoryIPRangesParams{
		FilterContains: &filterContainsDefault,
		FilterEquals:   &filterEqualsDefault,
		Limit:          &limitDefault,
		Offset:         &offsetDefault,
		Sort:           &sortDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) WithTimeout(timeout time.Duration) *GetAPIV1InventoryIPRangesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) WithContext(ctx context.Context) *GetAPIV1InventoryIPRangesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) WithHTTPClient(client *http.Client) *GetAPIV1InventoryIPRangesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) WithAuthorization(authorization string) *GetAPIV1InventoryIPRangesParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithDescription adds the description to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) WithDescription(description *string) *GetAPIV1InventoryIPRangesParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) SetDescription(description *string) {
	o.Description = description
}

// WithEndAddress adds the endAddress to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) WithEndAddress(endAddress *string) *GetAPIV1InventoryIPRangesParams {
	o.SetEndAddress(endAddress)
	return o
}

// SetEndAddress adds the endAddress to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) SetEndAddress(endAddress *string) {
	o.EndAddress = endAddress
}

// WithFilterContains adds the filterContains to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) WithFilterContains(filterContains *string) *GetAPIV1InventoryIPRangesParams {
	o.SetFilterContains(filterContains)
	return o
}

// SetFilterContains adds the filterContains to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) SetFilterContains(filterContains *string) {
	o.FilterContains = filterContains
}

// WithFilterEquals adds the filterEquals to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) WithFilterEquals(filterEquals *string) *GetAPIV1InventoryIPRangesParams {
	o.SetFilterEquals(filterEquals)
	return o
}

// SetFilterEquals adds the filterEquals to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) SetFilterEquals(filterEquals *string) {
	o.FilterEquals = filterEquals
}

// WithGateway adds the gateway to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) WithGateway(gateway *string) *GetAPIV1InventoryIPRangesParams {
	o.SetGateway(gateway)
	return o
}

// SetGateway adds the gateway to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) SetGateway(gateway *string) {
	o.Gateway = gateway
}

// WithLimit adds the limit to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) WithLimit(limit *int64) *GetAPIV1InventoryIPRangesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) WithName(name *string) *GetAPIV1InventoryIPRangesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) SetName(name *string) {
	o.Name = name
}

// WithNetmask adds the netmask to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) WithNetmask(netmask *int32) *GetAPIV1InventoryIPRangesParams {
	o.SetNetmask(netmask)
	return o
}

// SetNetmask adds the netmask to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) SetNetmask(netmask *int32) {
	o.Netmask = netmask
}

// WithOffset adds the offset to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) WithOffset(offset *int64) *GetAPIV1InventoryIPRangesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithRole adds the role to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) WithRole(role *string) *GetAPIV1InventoryIPRangesParams {
	o.SetRole(role)
	return o
}

// SetRole adds the role to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) SetRole(role *string) {
	o.Role = role
}

// WithSiteAssociation adds the siteAssociation to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) WithSiteAssociation(siteAssociation *string) *GetAPIV1InventoryIPRangesParams {
	o.SetSiteAssociation(siteAssociation)
	return o
}

// SetSiteAssociation adds the siteAssociation to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) SetSiteAssociation(siteAssociation *string) {
	o.SiteAssociation = siteAssociation
}

// WithSort adds the sort to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) WithSort(sort *string) *GetAPIV1InventoryIPRangesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithStartAddress adds the startAddress to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) WithStartAddress(startAddress *string) *GetAPIV1InventoryIPRangesParams {
	o.SetStartAddress(startAddress)
	return o
}

// SetStartAddress adds the startAddress to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) SetStartAddress(startAddress *string) {
	o.StartAddress = startAddress
}

// WithVlan adds the vlan to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) WithVlan(vlan *string) *GetAPIV1InventoryIPRangesParams {
	o.SetVlan(vlan)
	return o
}

// SetVlan adds the vlan to the get API v1 inventory IP ranges params
func (o *GetAPIV1InventoryIPRangesParams) SetVlan(vlan *string) {
	o.Vlan = vlan
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIV1InventoryIPRangesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.Description != nil {

		// query param description
		var qrDescription string

		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {

			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}
	}

	if o.EndAddress != nil {

		// query param endAddress
		var qrEndAddress string

		if o.EndAddress != nil {
			qrEndAddress = *o.EndAddress
		}
		qEndAddress := qrEndAddress
		if qEndAddress != "" {

			if err := r.SetQueryParam("endAddress", qEndAddress); err != nil {
				return err
			}
		}
	}

	if o.FilterContains != nil {

		// query param filterContains
		var qrFilterContains string

		if o.FilterContains != nil {
			qrFilterContains = *o.FilterContains
		}
		qFilterContains := qrFilterContains
		if qFilterContains != "" {

			if err := r.SetQueryParam("filterContains", qFilterContains); err != nil {
				return err
			}
		}
	}

	if o.FilterEquals != nil {

		// query param filterEquals
		var qrFilterEquals string

		if o.FilterEquals != nil {
			qrFilterEquals = *o.FilterEquals
		}
		qFilterEquals := qrFilterEquals
		if qFilterEquals != "" {

			if err := r.SetQueryParam("filterEquals", qFilterEquals); err != nil {
				return err
			}
		}
	}

	if o.Gateway != nil {

		// query param gateway
		var qrGateway string

		if o.Gateway != nil {
			qrGateway = *o.Gateway
		}
		qGateway := qrGateway
		if qGateway != "" {

			if err := r.SetQueryParam("gateway", qGateway); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Netmask != nil {

		// query param netmask
		var qrNetmask int32

		if o.Netmask != nil {
			qrNetmask = *o.Netmask
		}
		qNetmask := swag.FormatInt32(qrNetmask)
		if qNetmask != "" {

			if err := r.SetQueryParam("netmask", qNetmask); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Role != nil {

		// query param role
		var qrRole string

		if o.Role != nil {
			qrRole = *o.Role
		}
		qRole := qrRole
		if qRole != "" {

			if err := r.SetQueryParam("role", qRole); err != nil {
				return err
			}
		}
	}

	if o.SiteAssociation != nil {

		// query param siteAssociation
		var qrSiteAssociation string

		if o.SiteAssociation != nil {
			qrSiteAssociation = *o.SiteAssociation
		}
		qSiteAssociation := qrSiteAssociation
		if qSiteAssociation != "" {

			if err := r.SetQueryParam("siteAssociation", qSiteAssociation); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.StartAddress != nil {

		// query param startAddress
		var qrStartAddress string

		if o.StartAddress != nil {
			qrStartAddress = *o.StartAddress
		}
		qStartAddress := qrStartAddress
		if qStartAddress != "" {

			if err := r.SetQueryParam("startAddress", qStartAddress); err != nil {
				return err
			}
		}
	}

	if o.Vlan != nil {

		// query param vlan
		var qrVlan string

		if o.Vlan != nil {
			qrVlan = *o.Vlan
		}
		qVlan := qrVlan
		if qVlan != "" {

			if err := r.SetQueryParam("vlan", qVlan); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
