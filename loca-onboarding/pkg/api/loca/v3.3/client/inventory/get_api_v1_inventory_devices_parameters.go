// Code generated by go-swagger; DO NOT EDIT.

package inventory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIV1InventoryDevicesParams creates a new GetAPIV1InventoryDevicesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIV1InventoryDevicesParams() *GetAPIV1InventoryDevicesParams {
	return &GetAPIV1InventoryDevicesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIV1InventoryDevicesParamsWithTimeout creates a new GetAPIV1InventoryDevicesParams object
// with the ability to set a timeout on a request.
func NewGetAPIV1InventoryDevicesParamsWithTimeout(timeout time.Duration) *GetAPIV1InventoryDevicesParams {
	return &GetAPIV1InventoryDevicesParams{
		timeout: timeout,
	}
}

// NewGetAPIV1InventoryDevicesParamsWithContext creates a new GetAPIV1InventoryDevicesParams object
// with the ability to set a context for a request.
func NewGetAPIV1InventoryDevicesParamsWithContext(ctx context.Context) *GetAPIV1InventoryDevicesParams {
	return &GetAPIV1InventoryDevicesParams{
		Context: ctx,
	}
}

// NewGetAPIV1InventoryDevicesParamsWithHTTPClient creates a new GetAPIV1InventoryDevicesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIV1InventoryDevicesParamsWithHTTPClient(client *http.Client) *GetAPIV1InventoryDevicesParams {
	return &GetAPIV1InventoryDevicesParams{
		HTTPClient: client,
	}
}

/*
GetAPIV1InventoryDevicesParams contains all the parameters to send to the API endpoint

	for the get API v1 inventory devices operation.

	Typically these are written to a http.Request.
*/
type GetAPIV1InventoryDevicesParams struct {

	/* Authorization.

	   Bearer $token
	*/
	Authorization string

	/* DeviceRole.

	   filter by deviceRole
	*/
	DeviceRole *string

	/* DeviceType.

	   filter by deviceType
	*/
	DeviceType *string

	/* FilterContains.

	   Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. the following example will return data which city contains shzj001 or shzj002, or county contains shzj001 or shzj002, example: [{"attributes":"city,country","values":"shzj001,shzj002"}]

	   Default: "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]"
	*/
	FilterContains *string

	/* FilterEquals.

	   Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city exactly matches shzj001 or shzj002, or county exactly matches shzj001 or shzj002, example: [{"attributes":"city,country","values":"shzj001,shzj002"}]

	   Default: "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]"
	*/
	FilterEquals *string

	/* FilterNotEquals.

	   Returns data that not matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city not match shzj001 or shzj002, or county not match shzj001 or shzj002, example: [{"attributes":"city,country","values":"shzj001,shzj002"}]

	   Default: "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]"
	*/
	FilterNotEquals *string

	/* Hostname.

	   filter by hostname
	*/
	Hostname *string

	/* Instance.

	   filter by instance
	*/
	Instance *string

	/* Limit.

	    , example: 10

	   Default: 10
	*/
	Limit *int64

	/* ManagedBy.

	   filter by managedBy
	*/
	ManagedBy *string

	/* Offset.

	   , example: 0
	*/
	Offset *int64

	/* PrimaryIP.

	   filter by primaryIP
	*/
	PrimaryIP *string

	/* SerialNumber.

	   filter by serialNumber
	*/
	SerialNumber *string

	/* Site.

	   filter by site
	*/
	Site *bool

	/* Source.

	   filter by source
	*/
	Source *string

	/* Status.

	   filter by status
	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API v1 inventory devices params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV1InventoryDevicesParams) WithDefaults() *GetAPIV1InventoryDevicesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API v1 inventory devices params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV1InventoryDevicesParams) SetDefaults() {
	var (
		filterContainsDefault = string("[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]")

		filterEqualsDefault = string("[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]")

		filterNotEqualsDefault = string("[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]")

		limitDefault = int64(10)

		offsetDefault = int64(0)
	)

	val := GetAPIV1InventoryDevicesParams{
		FilterContains:  &filterContainsDefault,
		FilterEquals:    &filterEqualsDefault,
		FilterNotEquals: &filterNotEqualsDefault,
		Limit:           &limitDefault,
		Offset:          &offsetDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) WithTimeout(timeout time.Duration) *GetAPIV1InventoryDevicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) WithContext(ctx context.Context) *GetAPIV1InventoryDevicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) WithHTTPClient(client *http.Client) *GetAPIV1InventoryDevicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) WithAuthorization(authorization string) *GetAPIV1InventoryDevicesParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithDeviceRole adds the deviceRole to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) WithDeviceRole(deviceRole *string) *GetAPIV1InventoryDevicesParams {
	o.SetDeviceRole(deviceRole)
	return o
}

// SetDeviceRole adds the deviceRole to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) SetDeviceRole(deviceRole *string) {
	o.DeviceRole = deviceRole
}

// WithDeviceType adds the deviceType to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) WithDeviceType(deviceType *string) *GetAPIV1InventoryDevicesParams {
	o.SetDeviceType(deviceType)
	return o
}

// SetDeviceType adds the deviceType to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) SetDeviceType(deviceType *string) {
	o.DeviceType = deviceType
}

// WithFilterContains adds the filterContains to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) WithFilterContains(filterContains *string) *GetAPIV1InventoryDevicesParams {
	o.SetFilterContains(filterContains)
	return o
}

// SetFilterContains adds the filterContains to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) SetFilterContains(filterContains *string) {
	o.FilterContains = filterContains
}

// WithFilterEquals adds the filterEquals to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) WithFilterEquals(filterEquals *string) *GetAPIV1InventoryDevicesParams {
	o.SetFilterEquals(filterEquals)
	return o
}

// SetFilterEquals adds the filterEquals to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) SetFilterEquals(filterEquals *string) {
	o.FilterEquals = filterEquals
}

// WithFilterNotEquals adds the filterNotEquals to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) WithFilterNotEquals(filterNotEquals *string) *GetAPIV1InventoryDevicesParams {
	o.SetFilterNotEquals(filterNotEquals)
	return o
}

// SetFilterNotEquals adds the filterNotEquals to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) SetFilterNotEquals(filterNotEquals *string) {
	o.FilterNotEquals = filterNotEquals
}

// WithHostname adds the hostname to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) WithHostname(hostname *string) *GetAPIV1InventoryDevicesParams {
	o.SetHostname(hostname)
	return o
}

// SetHostname adds the hostname to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) SetHostname(hostname *string) {
	o.Hostname = hostname
}

// WithInstance adds the instance to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) WithInstance(instance *string) *GetAPIV1InventoryDevicesParams {
	o.SetInstance(instance)
	return o
}

// SetInstance adds the instance to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) SetInstance(instance *string) {
	o.Instance = instance
}

// WithLimit adds the limit to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) WithLimit(limit *int64) *GetAPIV1InventoryDevicesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithManagedBy adds the managedBy to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) WithManagedBy(managedBy *string) *GetAPIV1InventoryDevicesParams {
	o.SetManagedBy(managedBy)
	return o
}

// SetManagedBy adds the managedBy to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) SetManagedBy(managedBy *string) {
	o.ManagedBy = managedBy
}

// WithOffset adds the offset to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) WithOffset(offset *int64) *GetAPIV1InventoryDevicesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPrimaryIP adds the primaryIP to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) WithPrimaryIP(primaryIP *string) *GetAPIV1InventoryDevicesParams {
	o.SetPrimaryIP(primaryIP)
	return o
}

// SetPrimaryIP adds the primaryIp to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) SetPrimaryIP(primaryIP *string) {
	o.PrimaryIP = primaryIP
}

// WithSerialNumber adds the serialNumber to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) WithSerialNumber(serialNumber *string) *GetAPIV1InventoryDevicesParams {
	o.SetSerialNumber(serialNumber)
	return o
}

// SetSerialNumber adds the serialNumber to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) SetSerialNumber(serialNumber *string) {
	o.SerialNumber = serialNumber
}

// WithSite adds the site to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) WithSite(site *bool) *GetAPIV1InventoryDevicesParams {
	o.SetSite(site)
	return o
}

// SetSite adds the site to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) SetSite(site *bool) {
	o.Site = site
}

// WithSource adds the source to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) WithSource(source *string) *GetAPIV1InventoryDevicesParams {
	o.SetSource(source)
	return o
}

// SetSource adds the source to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) SetSource(source *string) {
	o.Source = source
}

// WithStatus adds the status to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) WithStatus(status *string) *GetAPIV1InventoryDevicesParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get API v1 inventory devices params
func (o *GetAPIV1InventoryDevicesParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIV1InventoryDevicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.DeviceRole != nil {

		// query param deviceRole
		var qrDeviceRole string

		if o.DeviceRole != nil {
			qrDeviceRole = *o.DeviceRole
		}
		qDeviceRole := qrDeviceRole
		if qDeviceRole != "" {

			if err := r.SetQueryParam("deviceRole", qDeviceRole); err != nil {
				return err
			}
		}
	}

	if o.DeviceType != nil {

		// query param deviceType
		var qrDeviceType string

		if o.DeviceType != nil {
			qrDeviceType = *o.DeviceType
		}
		qDeviceType := qrDeviceType
		if qDeviceType != "" {

			if err := r.SetQueryParam("deviceType", qDeviceType); err != nil {
				return err
			}
		}
	}

	if o.FilterContains != nil {

		// query param filterContains
		var qrFilterContains string

		if o.FilterContains != nil {
			qrFilterContains = *o.FilterContains
		}
		qFilterContains := qrFilterContains
		if qFilterContains != "" {

			if err := r.SetQueryParam("filterContains", qFilterContains); err != nil {
				return err
			}
		}
	}

	if o.FilterEquals != nil {

		// query param filterEquals
		var qrFilterEquals string

		if o.FilterEquals != nil {
			qrFilterEquals = *o.FilterEquals
		}
		qFilterEquals := qrFilterEquals
		if qFilterEquals != "" {

			if err := r.SetQueryParam("filterEquals", qFilterEquals); err != nil {
				return err
			}
		}
	}

	if o.FilterNotEquals != nil {

		// query param filterNotEquals
		var qrFilterNotEquals string

		if o.FilterNotEquals != nil {
			qrFilterNotEquals = *o.FilterNotEquals
		}
		qFilterNotEquals := qrFilterNotEquals
		if qFilterNotEquals != "" {

			if err := r.SetQueryParam("filterNotEquals", qFilterNotEquals); err != nil {
				return err
			}
		}
	}

	if o.Hostname != nil {

		// query param hostname
		var qrHostname string

		if o.Hostname != nil {
			qrHostname = *o.Hostname
		}
		qHostname := qrHostname
		if qHostname != "" {

			if err := r.SetQueryParam("hostname", qHostname); err != nil {
				return err
			}
		}
	}

	if o.Instance != nil {

		// query param instance
		var qrInstance string

		if o.Instance != nil {
			qrInstance = *o.Instance
		}
		qInstance := qrInstance
		if qInstance != "" {

			if err := r.SetQueryParam("instance", qInstance); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.ManagedBy != nil {

		// query param managedBy
		var qrManagedBy string

		if o.ManagedBy != nil {
			qrManagedBy = *o.ManagedBy
		}
		qManagedBy := qrManagedBy
		if qManagedBy != "" {

			if err := r.SetQueryParam("managedBy", qManagedBy); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.PrimaryIP != nil {

		// query param primaryIP
		var qrPrimaryIP string

		if o.PrimaryIP != nil {
			qrPrimaryIP = *o.PrimaryIP
		}
		qPrimaryIP := qrPrimaryIP
		if qPrimaryIP != "" {

			if err := r.SetQueryParam("primaryIP", qPrimaryIP); err != nil {
				return err
			}
		}
	}

	if o.SerialNumber != nil {

		// query param serialNumber
		var qrSerialNumber string

		if o.SerialNumber != nil {
			qrSerialNumber = *o.SerialNumber
		}
		qSerialNumber := qrSerialNumber
		if qSerialNumber != "" {

			if err := r.SetQueryParam("serialNumber", qSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.Site != nil {

		// query param site
		var qrSite bool

		if o.Site != nil {
			qrSite = *o.Site
		}
		qSite := swag.FormatBool(qrSite)
		if qSite != "" {

			if err := r.SetQueryParam("site", qSite); err != nil {
				return err
			}
		}
	}

	if o.Source != nil {

		// query param source
		var qrSource string

		if o.Source != nil {
			qrSource = *o.Source
		}
		qSource := qrSource
		if qSource != "" {

			if err := r.SetQueryParam("source", qSource); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
