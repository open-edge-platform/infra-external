// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIV1PluginsParams creates a new GetAPIV1PluginsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIV1PluginsParams() *GetAPIV1PluginsParams {
	return &GetAPIV1PluginsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIV1PluginsParamsWithTimeout creates a new GetAPIV1PluginsParams object
// with the ability to set a timeout on a request.
func NewGetAPIV1PluginsParamsWithTimeout(timeout time.Duration) *GetAPIV1PluginsParams {
	return &GetAPIV1PluginsParams{
		timeout: timeout,
	}
}

// NewGetAPIV1PluginsParamsWithContext creates a new GetAPIV1PluginsParams object
// with the ability to set a context for a request.
func NewGetAPIV1PluginsParamsWithContext(ctx context.Context) *GetAPIV1PluginsParams {
	return &GetAPIV1PluginsParams{
		Context: ctx,
	}
}

// NewGetAPIV1PluginsParamsWithHTTPClient creates a new GetAPIV1PluginsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIV1PluginsParamsWithHTTPClient(client *http.Client) *GetAPIV1PluginsParams {
	return &GetAPIV1PluginsParams{
		HTTPClient: client,
	}
}

/*
GetAPIV1PluginsParams contains all the parameters to send to the API endpoint

	for the get API v1 plugins operation.

	Typically these are written to a http.Request.
*/
type GetAPIV1PluginsParams struct {

	/* Authorization.

	   Bearer $token
	*/
	Authorization string

	/* FilterContains.

	   Returns data that contains a specific pattern.
	*/
	FilterContains *string

	/* FilterEquals.

	   Returns data that exactly matches a specific pattern.
	*/
	FilterEquals *string

	/* FilterNotEquals.

	   Returns data that not matches a specific pattern.
	*/
	FilterNotEquals *string

	/* Flavor.

	   filter by flavor
	*/
	Flavor *string

	/* Kind.

	   filter by kind
	*/
	Kind *string

	/* Limit.

	    , example: 10

	   Default: 10
	*/
	Limit *int64

	/* Name.

	   filter by name
	*/
	Name *string

	/* Offset.

	   , example: 0
	*/
	Offset *int64

	/* Sort.

	   returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: ["created_time,desc","id,asc"]

	   Default: "[\"created_time,desc\",\"id,asc\"]"
	*/
	Sort *string

	/* Vendor.

	   filter by vendor
	*/
	Vendor *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API v1 plugins params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV1PluginsParams) WithDefaults() *GetAPIV1PluginsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API v1 plugins params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV1PluginsParams) SetDefaults() {
	var (
		limitDefault = int64(10)

		offsetDefault = int64(0)

		sortDefault = string("[\"created_time,desc\",\"id,asc\"]")
	)

	val := GetAPIV1PluginsParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,
		Sort:   &sortDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) WithTimeout(timeout time.Duration) *GetAPIV1PluginsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) WithContext(ctx context.Context) *GetAPIV1PluginsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) WithHTTPClient(client *http.Client) *GetAPIV1PluginsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) WithAuthorization(authorization string) *GetAPIV1PluginsParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithFilterContains adds the filterContains to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) WithFilterContains(filterContains *string) *GetAPIV1PluginsParams {
	o.SetFilterContains(filterContains)
	return o
}

// SetFilterContains adds the filterContains to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) SetFilterContains(filterContains *string) {
	o.FilterContains = filterContains
}

// WithFilterEquals adds the filterEquals to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) WithFilterEquals(filterEquals *string) *GetAPIV1PluginsParams {
	o.SetFilterEquals(filterEquals)
	return o
}

// SetFilterEquals adds the filterEquals to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) SetFilterEquals(filterEquals *string) {
	o.FilterEquals = filterEquals
}

// WithFilterNotEquals adds the filterNotEquals to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) WithFilterNotEquals(filterNotEquals *string) *GetAPIV1PluginsParams {
	o.SetFilterNotEquals(filterNotEquals)
	return o
}

// SetFilterNotEquals adds the filterNotEquals to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) SetFilterNotEquals(filterNotEquals *string) {
	o.FilterNotEquals = filterNotEquals
}

// WithFlavor adds the flavor to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) WithFlavor(flavor *string) *GetAPIV1PluginsParams {
	o.SetFlavor(flavor)
	return o
}

// SetFlavor adds the flavor to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) SetFlavor(flavor *string) {
	o.Flavor = flavor
}

// WithKind adds the kind to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) WithKind(kind *string) *GetAPIV1PluginsParams {
	o.SetKind(kind)
	return o
}

// SetKind adds the kind to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) SetKind(kind *string) {
	o.Kind = kind
}

// WithLimit adds the limit to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) WithLimit(limit *int64) *GetAPIV1PluginsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) WithName(name *string) *GetAPIV1PluginsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) WithOffset(offset *int64) *GetAPIV1PluginsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSort adds the sort to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) WithSort(sort *string) *GetAPIV1PluginsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithVendor adds the vendor to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) WithVendor(vendor *string) *GetAPIV1PluginsParams {
	o.SetVendor(vendor)
	return o
}

// SetVendor adds the vendor to the get API v1 plugins params
func (o *GetAPIV1PluginsParams) SetVendor(vendor *string) {
	o.Vendor = vendor
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIV1PluginsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.FilterContains != nil {

		// query param filterContains
		var qrFilterContains string

		if o.FilterContains != nil {
			qrFilterContains = *o.FilterContains
		}
		qFilterContains := qrFilterContains
		if qFilterContains != "" {

			if err := r.SetQueryParam("filterContains", qFilterContains); err != nil {
				return err
			}
		}
	}

	if o.FilterEquals != nil {

		// query param filterEquals
		var qrFilterEquals string

		if o.FilterEquals != nil {
			qrFilterEquals = *o.FilterEquals
		}
		qFilterEquals := qrFilterEquals
		if qFilterEquals != "" {

			if err := r.SetQueryParam("filterEquals", qFilterEquals); err != nil {
				return err
			}
		}
	}

	if o.FilterNotEquals != nil {

		// query param filterNotEquals
		var qrFilterNotEquals string

		if o.FilterNotEquals != nil {
			qrFilterNotEquals = *o.FilterNotEquals
		}
		qFilterNotEquals := qrFilterNotEquals
		if qFilterNotEquals != "" {

			if err := r.SetQueryParam("filterNotEquals", qFilterNotEquals); err != nil {
				return err
			}
		}
	}

	if o.Flavor != nil {

		// query param flavor
		var qrFlavor string

		if o.Flavor != nil {
			qrFlavor = *o.Flavor
		}
		qFlavor := qrFlavor
		if qFlavor != "" {

			if err := r.SetQueryParam("flavor", qFlavor); err != nil {
				return err
			}
		}
	}

	if o.Kind != nil {

		// query param kind
		var qrKind string

		if o.Kind != nil {
			qrKind = *o.Kind
		}
		qKind := qrKind
		if qKind != "" {

			if err := r.SetQueryParam("kind", qKind); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.Vendor != nil {

		// query param vendor
		var qrVendor string

		if o.Vendor != nil {
			qrVendor = *o.Vendor
		}
		qVendor := qrVendor
		if qVendor != "" {

			if err := r.SetQueryParam("vendor", qVendor); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
