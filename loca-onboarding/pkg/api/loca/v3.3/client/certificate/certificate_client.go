// Code generated by go-swagger; DO NOT EDIT.

package certificate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new certificate API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new certificate API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new certificate API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for certificate API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAPIV1CertDownloadCrt(params *GetAPIV1CertDownloadCrtParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1CertDownloadCrtOK, error)

	GetAPIV1CertDownloadCsr(params *GetAPIV1CertDownloadCsrParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1CertDownloadCsrOK, error)

	GetAPIV1CertStatus(params *GetAPIV1CertStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1CertStatusOK, error)

	PostAPIV1CertGenerateCsr(params *PostAPIV1CertGenerateCsrParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1CertGenerateCsrOK, error)

	PostAPIV1CertReset(params *PostAPIV1CertResetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1CertResetOK, error)

	PostAPIV1CertUpload(params *PostAPIV1CertUploadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1CertUploadOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAPIV1CertDownloadCrt downloads the installed signed certificate
*/
func (a *Client) GetAPIV1CertDownloadCrt(params *GetAPIV1CertDownloadCrtParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1CertDownloadCrtOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1CertDownloadCrtParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1CertDownloadCrt",
		Method:             "GET",
		PathPattern:        "/api/v1/cert/download-crt",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1CertDownloadCrtReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1CertDownloadCrtOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1CertDownloadCrt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1CertDownloadCsr downloads the generated c s r
*/
func (a *Client) GetAPIV1CertDownloadCsr(params *GetAPIV1CertDownloadCsrParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1CertDownloadCsrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1CertDownloadCsrParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1CertDownloadCsr",
		Method:             "GET",
		PathPattern:        "/api/v1/cert/download-csr",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1CertDownloadCsrReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1CertDownloadCsrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1CertDownloadCsr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1CertStatus gets certificate status
*/
func (a *Client) GetAPIV1CertStatus(params *GetAPIV1CertStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1CertStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1CertStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1CertStatus",
		Method:             "GET",
		PathPattern:        "/api/v1/cert/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1CertStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1CertStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1CertStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1CertGenerateCsr creates c s r file
*/
func (a *Client) PostAPIV1CertGenerateCsr(params *PostAPIV1CertGenerateCsrParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1CertGenerateCsrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1CertGenerateCsrParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1CertGenerateCsr",
		Method:             "POST",
		PathPattern:        "/api/v1/cert/generate-csr",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1CertGenerateCsrReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1CertGenerateCsrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1CertGenerateCsr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1CertReset resets certificate
*/
func (a *Client) PostAPIV1CertReset(params *PostAPIV1CertResetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1CertResetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1CertResetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1CertReset",
		Method:             "POST",
		PathPattern:        "/api/v1/cert/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1CertResetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1CertResetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1CertReset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1CertUpload imports signed certificate
*/
func (a *Client) PostAPIV1CertUpload(params *PostAPIV1CertUploadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1CertUploadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1CertUploadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1CertUpload",
		Method:             "POST",
		PathPattern:        "/api/v1/cert/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1CertUploadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1CertUploadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1CertUpload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
