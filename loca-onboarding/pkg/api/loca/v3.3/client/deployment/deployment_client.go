// Code generated by go-swagger; DO NOT EDIT.

package deployment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new deployment API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new deployment API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new deployment API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for deployment API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAPIV1DeploymentImages(params *GetAPIV1DeploymentImagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1DeploymentImagesOK, error)

	GetAPIV1DeploymentImagesDownload(params *GetAPIV1DeploymentImagesDownloadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1DeploymentImagesDownloadOK, error)

	GetAPIV1DeploymentInstances(params *GetAPIV1DeploymentInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1DeploymentInstancesOK, error)

	GetAPIV1DeploymentInstancesID(params *GetAPIV1DeploymentInstancesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1DeploymentInstancesIDOK, error)

	GetAPIV1DeploymentInstancesPlanning(params *GetAPIV1DeploymentInstancesPlanningParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1DeploymentInstancesPlanningOK, error)

	GetAPIV1DeploymentReadiness(params *GetAPIV1DeploymentReadinessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1DeploymentReadinessOK, error)

	GetAPIV1DeploymentRegistrationtoolDownload(params *GetAPIV1DeploymentRegistrationtoolDownloadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1DeploymentRegistrationtoolDownloadOK, error)

	GetAPIV1DeploymentTemplates(params *GetAPIV1DeploymentTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1DeploymentTemplatesOK, error)

	GetAPIV1DeploymentTemplatesID(params *GetAPIV1DeploymentTemplatesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1DeploymentTemplatesIDOK, error)

	PostAPIV1DeploymentImages(params *PostAPIV1DeploymentImagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentImagesCreated, error)

	PostAPIV1DeploymentInstances(params *PostAPIV1DeploymentInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentInstancesCreated, error)

	PostAPIV1DeploymentInstancesCreate(params *PostAPIV1DeploymentInstancesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentInstancesCreateCreated, error)

	PostAPIV1DeploymentInstancesDeploy(params *PostAPIV1DeploymentInstancesDeployParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentInstancesDeployOK, error)

	PostAPIV1DeploymentInstancesExpand(params *PostAPIV1DeploymentInstancesExpandParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentInstancesExpandCreated, error)

	PostAPIV1DeploymentInstancesOnboard(params *PostAPIV1DeploymentInstancesOnboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentInstancesOnboardCreated, error)

	PostAPIV1DeploymentInstancesPlanning(params *PostAPIV1DeploymentInstancesPlanningParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentInstancesPlanningCreated, error)

	PostAPIV1DeploymentInstancesRemove(params *PostAPIV1DeploymentInstancesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentInstancesRemoveCreated, error)

	PostAPIV1DeploymentOsDeploy(params *PostAPIV1DeploymentOsDeployParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentOsDeployCreated, error)

	PostAPIV1DeploymentReadiness(params *PostAPIV1DeploymentReadinessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentReadinessCreated, error)

	PostAPIV1DeploymentTemplates(params *PostAPIV1DeploymentTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentTemplatesCreated, error)

	PostAPIV1DeploymentTemplatesMetadataRules(params *PostAPIV1DeploymentTemplatesMetadataRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentTemplatesMetadataRulesOK, error)

	PostAPIV1DeploymentTemplatesRemove(params *PostAPIV1DeploymentTemplatesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentTemplatesRemoveOK, error)

	PostAPIV1DeploymentTemplatesUpdate(params *PostAPIV1DeploymentTemplatesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentTemplatesUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAPIV1DeploymentImages gets all mini images
*/
func (a *Client) GetAPIV1DeploymentImages(params *GetAPIV1DeploymentImagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1DeploymentImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1DeploymentImagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1DeploymentImages",
		Method:             "GET",
		PathPattern:        "/api/v1/deployment/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1DeploymentImagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1DeploymentImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1DeploymentImages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1DeploymentImagesDownload downloads a mini image
*/
func (a *Client) GetAPIV1DeploymentImagesDownload(params *GetAPIV1DeploymentImagesDownloadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1DeploymentImagesDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1DeploymentImagesDownloadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1DeploymentImagesDownload",
		Method:             "GET",
		PathPattern:        "/api/v1/deployment/images/download",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1DeploymentImagesDownloadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1DeploymentImagesDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1DeploymentImagesDownload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1DeploymentInstances gets instances metadata
*/
func (a *Client) GetAPIV1DeploymentInstances(params *GetAPIV1DeploymentInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1DeploymentInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1DeploymentInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1DeploymentInstances",
		Method:             "GET",
		PathPattern:        "/api/v1/deployment/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1DeploymentInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1DeploymentInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1DeploymentInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1DeploymentInstancesID queries instance by id
*/
func (a *Client) GetAPIV1DeploymentInstancesID(params *GetAPIV1DeploymentInstancesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1DeploymentInstancesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1DeploymentInstancesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1DeploymentInstancesID",
		Method:             "GET",
		PathPattern:        "/api/v1/deployment/instances/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1DeploymentInstancesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1DeploymentInstancesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1DeploymentInstancesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1DeploymentInstancesPlanning gets instances planning metadata
*/
func (a *Client) GetAPIV1DeploymentInstancesPlanning(params *GetAPIV1DeploymentInstancesPlanningParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1DeploymentInstancesPlanningOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1DeploymentInstancesPlanningParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1DeploymentInstancesPlanning",
		Method:             "GET",
		PathPattern:        "/api/v1/deployment/instances/planning",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1DeploymentInstancesPlanningReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1DeploymentInstancesPlanningOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1DeploymentInstancesPlanning: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1DeploymentReadiness queries readiness
*/
func (a *Client) GetAPIV1DeploymentReadiness(params *GetAPIV1DeploymentReadinessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1DeploymentReadinessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1DeploymentReadinessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1DeploymentReadiness",
		Method:             "GET",
		PathPattern:        "/api/v1/deployment/readiness",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1DeploymentReadinessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1DeploymentReadinessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1DeploymentReadiness: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1DeploymentRegistrationtoolDownload gets registration tool
*/
func (a *Client) GetAPIV1DeploymentRegistrationtoolDownload(params *GetAPIV1DeploymentRegistrationtoolDownloadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1DeploymentRegistrationtoolDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1DeploymentRegistrationtoolDownloadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1DeploymentRegistrationtoolDownload",
		Method:             "GET",
		PathPattern:        "/api/v1/deployment/registrationtool/download",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1DeploymentRegistrationtoolDownloadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1DeploymentRegistrationtoolDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1DeploymentRegistrationtoolDownload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1DeploymentTemplates queries templates
*/
func (a *Client) GetAPIV1DeploymentTemplates(params *GetAPIV1DeploymentTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1DeploymentTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1DeploymentTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1DeploymentTemplates",
		Method:             "GET",
		PathPattern:        "/api/v1/deployment/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1DeploymentTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1DeploymentTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1DeploymentTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1DeploymentTemplatesID queries template by id
*/
func (a *Client) GetAPIV1DeploymentTemplatesID(params *GetAPIV1DeploymentTemplatesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1DeploymentTemplatesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1DeploymentTemplatesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1DeploymentTemplatesID",
		Method:             "GET",
		PathPattern:        "/api/v1/deployment/templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1DeploymentTemplatesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1DeploymentTemplatesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1DeploymentTemplatesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1DeploymentImages creates mini image
*/
func (a *Client) PostAPIV1DeploymentImages(params *PostAPIV1DeploymentImagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentImagesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1DeploymentImagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1DeploymentImages",
		Method:             "POST",
		PathPattern:        "/api/v1/deployment/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1DeploymentImagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1DeploymentImagesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1DeploymentImages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1DeploymentInstances onboards and deploy instances by the planning metadata
*/
func (a *Client) PostAPIV1DeploymentInstances(params *PostAPIV1DeploymentInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentInstancesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1DeploymentInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1DeploymentInstances",
		Method:             "POST",
		PathPattern:        "/api/v1/deployment/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1DeploymentInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1DeploymentInstancesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1DeploymentInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1DeploymentInstancesCreate creates instances through a single request
*/
func (a *Client) PostAPIV1DeploymentInstancesCreate(params *PostAPIV1DeploymentInstancesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentInstancesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1DeploymentInstancesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1DeploymentInstancesCreate",
		Method:             "POST",
		PathPattern:        "/api/v1/deployment/instances/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1DeploymentInstancesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1DeploymentInstancesCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1DeploymentInstancesCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1DeploymentInstancesDeploy deploys instance
*/
func (a *Client) PostAPIV1DeploymentInstancesDeploy(params *PostAPIV1DeploymentInstancesDeployParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentInstancesDeployOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1DeploymentInstancesDeployParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1DeploymentInstancesDeploy",
		Method:             "POST",
		PathPattern:        "/api/v1/deployment/instances/deploy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1DeploymentInstancesDeployReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1DeploymentInstancesDeployOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1DeploymentInstancesDeploy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1DeploymentInstancesExpand expands instance
*/
func (a *Client) PostAPIV1DeploymentInstancesExpand(params *PostAPIV1DeploymentInstancesExpandParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentInstancesExpandCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1DeploymentInstancesExpandParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1DeploymentInstancesExpand",
		Method:             "POST",
		PathPattern:        "/api/v1/deployment/instances/expand",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1DeploymentInstancesExpandReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1DeploymentInstancesExpandCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1DeploymentInstancesExpand: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1DeploymentInstancesOnboard onboards instances by the planning metadata
*/
func (a *Client) PostAPIV1DeploymentInstancesOnboard(params *PostAPIV1DeploymentInstancesOnboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentInstancesOnboardCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1DeploymentInstancesOnboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1DeploymentInstancesOnboard",
		Method:             "POST",
		PathPattern:        "/api/v1/deployment/instances/onboard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1DeploymentInstancesOnboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1DeploymentInstancesOnboardCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1DeploymentInstancesOnboard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1DeploymentInstancesPlanning plans instances metadata
*/
func (a *Client) PostAPIV1DeploymentInstancesPlanning(params *PostAPIV1DeploymentInstancesPlanningParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentInstancesPlanningCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1DeploymentInstancesPlanningParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1DeploymentInstancesPlanning",
		Method:             "POST",
		PathPattern:        "/api/v1/deployment/instances/planning",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1DeploymentInstancesPlanningReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1DeploymentInstancesPlanningCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1DeploymentInstancesPlanning: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1DeploymentInstancesRemove removes instances
*/
func (a *Client) PostAPIV1DeploymentInstancesRemove(params *PostAPIV1DeploymentInstancesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentInstancesRemoveCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1DeploymentInstancesRemoveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1DeploymentInstancesRemove",
		Method:             "POST",
		PathPattern:        "/api/v1/deployment/instances/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1DeploymentInstancesRemoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1DeploymentInstancesRemoveCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1DeploymentInstancesRemove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1DeploymentOsDeploy deploys os
*/
func (a *Client) PostAPIV1DeploymentOsDeploy(params *PostAPIV1DeploymentOsDeployParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentOsDeployCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1DeploymentOsDeployParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1DeploymentOsDeploy",
		Method:             "POST",
		PathPattern:        "/api/v1/deployment/os/deploy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1DeploymentOsDeployReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1DeploymentOsDeployCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1DeploymentOsDeploy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1DeploymentReadiness creates readiness
*/
func (a *Client) PostAPIV1DeploymentReadiness(params *PostAPIV1DeploymentReadinessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentReadinessCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1DeploymentReadinessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1DeploymentReadiness",
		Method:             "POST",
		PathPattern:        "/api/v1/deployment/readiness",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1DeploymentReadinessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1DeploymentReadinessCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1DeploymentReadiness: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1DeploymentTemplates creates a template
*/
func (a *Client) PostAPIV1DeploymentTemplates(params *PostAPIV1DeploymentTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentTemplatesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1DeploymentTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1DeploymentTemplates",
		Method:             "POST",
		PathPattern:        "/api/v1/deployment/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1DeploymentTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1DeploymentTemplatesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1DeploymentTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1DeploymentTemplatesMetadataRules retrieves template metadata rules for a particular flavor and o s version

Retrieves all setting rules for deployment templates to determine which fields can be modified in the template table
*/
func (a *Client) PostAPIV1DeploymentTemplatesMetadataRules(params *PostAPIV1DeploymentTemplatesMetadataRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentTemplatesMetadataRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1DeploymentTemplatesMetadataRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1DeploymentTemplatesMetadataRules",
		Method:             "POST",
		PathPattern:        "/api/v1/deployment/templates/metadata-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1DeploymentTemplatesMetadataRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1DeploymentTemplatesMetadataRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1DeploymentTemplatesMetadataRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1DeploymentTemplatesRemove removes template
*/
func (a *Client) PostAPIV1DeploymentTemplatesRemove(params *PostAPIV1DeploymentTemplatesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentTemplatesRemoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1DeploymentTemplatesRemoveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1DeploymentTemplatesRemove",
		Method:             "POST",
		PathPattern:        "/api/v1/deployment/templates/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1DeploymentTemplatesRemoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1DeploymentTemplatesRemoveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1DeploymentTemplatesRemove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1DeploymentTemplatesUpdate updates a template
*/
func (a *Client) PostAPIV1DeploymentTemplatesUpdate(params *PostAPIV1DeploymentTemplatesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1DeploymentTemplatesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1DeploymentTemplatesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1DeploymentTemplatesUpdate",
		Method:             "POST",
		PathPattern:        "/api/v1/deployment/templates/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1DeploymentTemplatesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1DeploymentTemplatesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1DeploymentTemplatesUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
