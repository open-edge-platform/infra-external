// Code generated by go-swagger; DO NOT EDIT.

package deployment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIV1DeploymentInstancesParams creates a new GetAPIV1DeploymentInstancesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIV1DeploymentInstancesParams() *GetAPIV1DeploymentInstancesParams {
	return &GetAPIV1DeploymentInstancesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIV1DeploymentInstancesParamsWithTimeout creates a new GetAPIV1DeploymentInstancesParams object
// with the ability to set a timeout on a request.
func NewGetAPIV1DeploymentInstancesParamsWithTimeout(timeout time.Duration) *GetAPIV1DeploymentInstancesParams {
	return &GetAPIV1DeploymentInstancesParams{
		timeout: timeout,
	}
}

// NewGetAPIV1DeploymentInstancesParamsWithContext creates a new GetAPIV1DeploymentInstancesParams object
// with the ability to set a context for a request.
func NewGetAPIV1DeploymentInstancesParamsWithContext(ctx context.Context) *GetAPIV1DeploymentInstancesParams {
	return &GetAPIV1DeploymentInstancesParams{
		Context: ctx,
	}
}

// NewGetAPIV1DeploymentInstancesParamsWithHTTPClient creates a new GetAPIV1DeploymentInstancesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIV1DeploymentInstancesParamsWithHTTPClient(client *http.Client) *GetAPIV1DeploymentInstancesParams {
	return &GetAPIV1DeploymentInstancesParams{
		HTTPClient: client,
	}
}

/*
GetAPIV1DeploymentInstancesParams contains all the parameters to send to the API endpoint

	for the get API v1 deployment instances operation.

	Typically these are written to a http.Request.
*/
type GetAPIV1DeploymentInstancesParams struct {

	/* Authorization.

	   Bearer $token
	*/
	Authorization string

	/* FilterContains.

	   Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. The following example will return data which city contains shzj001 or shzj002, or county contains shzj001 or shzj002., example: [{"attributes":"city,country","values":"shzj001,shzj002"}]
	*/
	FilterContains *string

	/* FilterEquals.

	   Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. The following example will return data which city exactly matches shzj001 or shzj002, or county exactly matches shzj001 or shzj002, example: [{"attributes":"city,country","values":"shzj001,shzj002"}]
	*/
	FilterEquals *string

	/* Flavor.

	   by flavor
	*/
	Flavor *string

	/* FlavorVersion.

	   by flavor version
	*/
	FlavorVersion *string

	/* Limit.

	   limit of items to get in this API, example: 10

	   Default: 10
	*/
	Limit *int64

	/* Name.

	   by name
	*/
	Name *string

	/* Offset.

	   offset: to skip limit*offset items, example: 0
	*/
	Offset *int64

	/* Operation.

	   by operation
	*/
	Operation *string

	/* Site.

	   by site
	*/
	Site *string

	/* Sort.

	   Returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: ["created_time,desc\",\"id,asc\"]
	*/
	Sort *string

	/* Stage.

	   by stage
	*/
	Stage *string

	/* Status.

	   by status
	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API v1 deployment instances params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV1DeploymentInstancesParams) WithDefaults() *GetAPIV1DeploymentInstancesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API v1 deployment instances params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV1DeploymentInstancesParams) SetDefaults() {
	var (
		limitDefault = int64(10)

		offsetDefault = int64(0)
	)

	val := GetAPIV1DeploymentInstancesParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) WithTimeout(timeout time.Duration) *GetAPIV1DeploymentInstancesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) WithContext(ctx context.Context) *GetAPIV1DeploymentInstancesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) WithHTTPClient(client *http.Client) *GetAPIV1DeploymentInstancesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) WithAuthorization(authorization string) *GetAPIV1DeploymentInstancesParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithFilterContains adds the filterContains to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) WithFilterContains(filterContains *string) *GetAPIV1DeploymentInstancesParams {
	o.SetFilterContains(filterContains)
	return o
}

// SetFilterContains adds the filterContains to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) SetFilterContains(filterContains *string) {
	o.FilterContains = filterContains
}

// WithFilterEquals adds the filterEquals to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) WithFilterEquals(filterEquals *string) *GetAPIV1DeploymentInstancesParams {
	o.SetFilterEquals(filterEquals)
	return o
}

// SetFilterEquals adds the filterEquals to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) SetFilterEquals(filterEquals *string) {
	o.FilterEquals = filterEquals
}

// WithFlavor adds the flavor to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) WithFlavor(flavor *string) *GetAPIV1DeploymentInstancesParams {
	o.SetFlavor(flavor)
	return o
}

// SetFlavor adds the flavor to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) SetFlavor(flavor *string) {
	o.Flavor = flavor
}

// WithFlavorVersion adds the flavorVersion to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) WithFlavorVersion(flavorVersion *string) *GetAPIV1DeploymentInstancesParams {
	o.SetFlavorVersion(flavorVersion)
	return o
}

// SetFlavorVersion adds the flavorVersion to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) SetFlavorVersion(flavorVersion *string) {
	o.FlavorVersion = flavorVersion
}

// WithLimit adds the limit to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) WithLimit(limit *int64) *GetAPIV1DeploymentInstancesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) WithName(name *string) *GetAPIV1DeploymentInstancesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) WithOffset(offset *int64) *GetAPIV1DeploymentInstancesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOperation adds the operation to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) WithOperation(operation *string) *GetAPIV1DeploymentInstancesParams {
	o.SetOperation(operation)
	return o
}

// SetOperation adds the operation to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) SetOperation(operation *string) {
	o.Operation = operation
}

// WithSite adds the site to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) WithSite(site *string) *GetAPIV1DeploymentInstancesParams {
	o.SetSite(site)
	return o
}

// SetSite adds the site to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) SetSite(site *string) {
	o.Site = site
}

// WithSort adds the sort to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) WithSort(sort *string) *GetAPIV1DeploymentInstancesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithStage adds the stage to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) WithStage(stage *string) *GetAPIV1DeploymentInstancesParams {
	o.SetStage(stage)
	return o
}

// SetStage adds the stage to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) SetStage(stage *string) {
	o.Stage = stage
}

// WithStatus adds the status to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) WithStatus(status *string) *GetAPIV1DeploymentInstancesParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get API v1 deployment instances params
func (o *GetAPIV1DeploymentInstancesParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIV1DeploymentInstancesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.FilterContains != nil {

		// query param filterContains
		var qrFilterContains string

		if o.FilterContains != nil {
			qrFilterContains = *o.FilterContains
		}
		qFilterContains := qrFilterContains
		if qFilterContains != "" {

			if err := r.SetQueryParam("filterContains", qFilterContains); err != nil {
				return err
			}
		}
	}

	if o.FilterEquals != nil {

		// query param filterEquals
		var qrFilterEquals string

		if o.FilterEquals != nil {
			qrFilterEquals = *o.FilterEquals
		}
		qFilterEquals := qrFilterEquals
		if qFilterEquals != "" {

			if err := r.SetQueryParam("filterEquals", qFilterEquals); err != nil {
				return err
			}
		}
	}

	if o.Flavor != nil {

		// query param flavor
		var qrFlavor string

		if o.Flavor != nil {
			qrFlavor = *o.Flavor
		}
		qFlavor := qrFlavor
		if qFlavor != "" {

			if err := r.SetQueryParam("flavor", qFlavor); err != nil {
				return err
			}
		}
	}

	if o.FlavorVersion != nil {

		// query param flavorVersion
		var qrFlavorVersion string

		if o.FlavorVersion != nil {
			qrFlavorVersion = *o.FlavorVersion
		}
		qFlavorVersion := qrFlavorVersion
		if qFlavorVersion != "" {

			if err := r.SetQueryParam("flavorVersion", qFlavorVersion); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Operation != nil {

		// query param operation
		var qrOperation string

		if o.Operation != nil {
			qrOperation = *o.Operation
		}
		qOperation := qrOperation
		if qOperation != "" {

			if err := r.SetQueryParam("operation", qOperation); err != nil {
				return err
			}
		}
	}

	if o.Site != nil {

		// query param site
		var qrSite string

		if o.Site != nil {
			qrSite = *o.Site
		}
		qSite := qrSite
		if qSite != "" {

			if err := r.SetQueryParam("site", qSite); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.Stage != nil {

		// query param stage
		var qrStage string

		if o.Stage != nil {
			qrStage = *o.Stage
		}
		qStage := qrStage
		if qStage != "" {

			if err := r.SetQueryParam("stage", qStage); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
