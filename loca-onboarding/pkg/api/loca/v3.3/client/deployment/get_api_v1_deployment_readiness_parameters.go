// Code generated by go-swagger; DO NOT EDIT.

package deployment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIV1DeploymentReadinessParams creates a new GetAPIV1DeploymentReadinessParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIV1DeploymentReadinessParams() *GetAPIV1DeploymentReadinessParams {
	return &GetAPIV1DeploymentReadinessParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIV1DeploymentReadinessParamsWithTimeout creates a new GetAPIV1DeploymentReadinessParams object
// with the ability to set a timeout on a request.
func NewGetAPIV1DeploymentReadinessParamsWithTimeout(timeout time.Duration) *GetAPIV1DeploymentReadinessParams {
	return &GetAPIV1DeploymentReadinessParams{
		timeout: timeout,
	}
}

// NewGetAPIV1DeploymentReadinessParamsWithContext creates a new GetAPIV1DeploymentReadinessParams object
// with the ability to set a context for a request.
func NewGetAPIV1DeploymentReadinessParamsWithContext(ctx context.Context) *GetAPIV1DeploymentReadinessParams {
	return &GetAPIV1DeploymentReadinessParams{
		Context: ctx,
	}
}

// NewGetAPIV1DeploymentReadinessParamsWithHTTPClient creates a new GetAPIV1DeploymentReadinessParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIV1DeploymentReadinessParamsWithHTTPClient(client *http.Client) *GetAPIV1DeploymentReadinessParams {
	return &GetAPIV1DeploymentReadinessParams{
		HTTPClient: client,
	}
}

/*
GetAPIV1DeploymentReadinessParams contains all the parameters to send to the API endpoint

	for the get API v1 deployment readiness operation.

	Typically these are written to a http.Request.
*/
type GetAPIV1DeploymentReadinessParams struct {

	/* Authorization.

	   Bearer $token
	*/
	Authorization string

	/* City.

	   by city
	*/
	City *string

	/* Country.

	   by country
	*/
	Country *string

	/* FilterContains.

	   Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. the following example will return data which city contains shzj001 or shzj002, or county contains shzj001 or shzj002., example: [{"attributes":"city,country","values":"shzj001,shzj002"}]
	*/
	FilterContains *string

	/* FilterEquals.

	   Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city exactly matches shzj001 or shzj002, or county exactly matches shzj001 or shzj002., example: [{"attributes":"city,country","values":"shzj001,shzj002"}]
	*/
	FilterEquals *string

	/* Geo.

	   by geo
	*/
	Geo *string

	/* Limit.

	   limit of items to get in this API, example: 10

	   Default: 10
	*/
	Limit *int64

	/* Offset.

	   offset: to skip limit*offset items, example: 0
	*/
	Offset *int64

	/* Province.

	   by province
	*/
	Province *string

	/* Readiness.

	   by readiness
	*/
	Readiness *string

	/* SiteName.

	   by site name
	*/
	SiteName *string

	/* Sort.

	   returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: ["created_time,desc","id,asc"]
	*/
	Sort *string

	/* Template.

	   by template
	*/
	Template *string

	/* UUID.

	   by uuid
	*/
	UUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API v1 deployment readiness params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV1DeploymentReadinessParams) WithDefaults() *GetAPIV1DeploymentReadinessParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API v1 deployment readiness params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV1DeploymentReadinessParams) SetDefaults() {
	var (
		limitDefault = int64(10)

		offsetDefault = int64(0)
	)

	val := GetAPIV1DeploymentReadinessParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) WithTimeout(timeout time.Duration) *GetAPIV1DeploymentReadinessParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) WithContext(ctx context.Context) *GetAPIV1DeploymentReadinessParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) WithHTTPClient(client *http.Client) *GetAPIV1DeploymentReadinessParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) WithAuthorization(authorization string) *GetAPIV1DeploymentReadinessParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithCity adds the city to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) WithCity(city *string) *GetAPIV1DeploymentReadinessParams {
	o.SetCity(city)
	return o
}

// SetCity adds the city to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) SetCity(city *string) {
	o.City = city
}

// WithCountry adds the country to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) WithCountry(country *string) *GetAPIV1DeploymentReadinessParams {
	o.SetCountry(country)
	return o
}

// SetCountry adds the country to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) SetCountry(country *string) {
	o.Country = country
}

// WithFilterContains adds the filterContains to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) WithFilterContains(filterContains *string) *GetAPIV1DeploymentReadinessParams {
	o.SetFilterContains(filterContains)
	return o
}

// SetFilterContains adds the filterContains to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) SetFilterContains(filterContains *string) {
	o.FilterContains = filterContains
}

// WithFilterEquals adds the filterEquals to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) WithFilterEquals(filterEquals *string) *GetAPIV1DeploymentReadinessParams {
	o.SetFilterEquals(filterEquals)
	return o
}

// SetFilterEquals adds the filterEquals to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) SetFilterEquals(filterEquals *string) {
	o.FilterEquals = filterEquals
}

// WithGeo adds the geo to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) WithGeo(geo *string) *GetAPIV1DeploymentReadinessParams {
	o.SetGeo(geo)
	return o
}

// SetGeo adds the geo to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) SetGeo(geo *string) {
	o.Geo = geo
}

// WithLimit adds the limit to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) WithLimit(limit *int64) *GetAPIV1DeploymentReadinessParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) WithOffset(offset *int64) *GetAPIV1DeploymentReadinessParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithProvince adds the province to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) WithProvince(province *string) *GetAPIV1DeploymentReadinessParams {
	o.SetProvince(province)
	return o
}

// SetProvince adds the province to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) SetProvince(province *string) {
	o.Province = province
}

// WithReadiness adds the readiness to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) WithReadiness(readiness *string) *GetAPIV1DeploymentReadinessParams {
	o.SetReadiness(readiness)
	return o
}

// SetReadiness adds the readiness to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) SetReadiness(readiness *string) {
	o.Readiness = readiness
}

// WithSiteName adds the siteName to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) WithSiteName(siteName *string) *GetAPIV1DeploymentReadinessParams {
	o.SetSiteName(siteName)
	return o
}

// SetSiteName adds the siteName to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) SetSiteName(siteName *string) {
	o.SiteName = siteName
}

// WithSort adds the sort to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) WithSort(sort *string) *GetAPIV1DeploymentReadinessParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithTemplate adds the template to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) WithTemplate(template *string) *GetAPIV1DeploymentReadinessParams {
	o.SetTemplate(template)
	return o
}

// SetTemplate adds the template to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) SetTemplate(template *string) {
	o.Template = template
}

// WithUUID adds the uuid to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) WithUUID(uuid *string) *GetAPIV1DeploymentReadinessParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the get API v1 deployment readiness params
func (o *GetAPIV1DeploymentReadinessParams) SetUUID(uuid *string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIV1DeploymentReadinessParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.City != nil {

		// query param city
		var qrCity string

		if o.City != nil {
			qrCity = *o.City
		}
		qCity := qrCity
		if qCity != "" {

			if err := r.SetQueryParam("city", qCity); err != nil {
				return err
			}
		}
	}

	if o.Country != nil {

		// query param country
		var qrCountry string

		if o.Country != nil {
			qrCountry = *o.Country
		}
		qCountry := qrCountry
		if qCountry != "" {

			if err := r.SetQueryParam("country", qCountry); err != nil {
				return err
			}
		}
	}

	if o.FilterContains != nil {

		// query param filterContains
		var qrFilterContains string

		if o.FilterContains != nil {
			qrFilterContains = *o.FilterContains
		}
		qFilterContains := qrFilterContains
		if qFilterContains != "" {

			if err := r.SetQueryParam("filterContains", qFilterContains); err != nil {
				return err
			}
		}
	}

	if o.FilterEquals != nil {

		// query param filterEquals
		var qrFilterEquals string

		if o.FilterEquals != nil {
			qrFilterEquals = *o.FilterEquals
		}
		qFilterEquals := qrFilterEquals
		if qFilterEquals != "" {

			if err := r.SetQueryParam("filterEquals", qFilterEquals); err != nil {
				return err
			}
		}
	}

	if o.Geo != nil {

		// query param geo
		var qrGeo string

		if o.Geo != nil {
			qrGeo = *o.Geo
		}
		qGeo := qrGeo
		if qGeo != "" {

			if err := r.SetQueryParam("geo", qGeo); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Province != nil {

		// query param province
		var qrProvince string

		if o.Province != nil {
			qrProvince = *o.Province
		}
		qProvince := qrProvince
		if qProvince != "" {

			if err := r.SetQueryParam("province", qProvince); err != nil {
				return err
			}
		}
	}

	if o.Readiness != nil {

		// query param readiness
		var qrReadiness string

		if o.Readiness != nil {
			qrReadiness = *o.Readiness
		}
		qReadiness := qrReadiness
		if qReadiness != "" {

			if err := r.SetQueryParam("readiness", qReadiness); err != nil {
				return err
			}
		}
	}

	if o.SiteName != nil {

		// query param siteName
		var qrSiteName string

		if o.SiteName != nil {
			qrSiteName = *o.SiteName
		}
		qSiteName := qrSiteName
		if qSiteName != "" {

			if err := r.SetQueryParam("siteName", qSiteName); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.Template != nil {

		// query param template
		var qrTemplate string

		if o.Template != nil {
			qrTemplate = *o.Template
		}
		qTemplate := qrTemplate
		if qTemplate != "" {

			if err := r.SetQueryParam("template", qTemplate); err != nil {
				return err
			}
		}
	}

	if o.UUID != nil {

		// query param uuid
		var qrUUID string

		if o.UUID != nil {
			qrUUID = *o.UUID
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
