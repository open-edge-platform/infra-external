// Code generated by go-swagger; DO NOT EDIT.

package licenses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/open-edge-platform/infra-external/loca-onboarding/v2/pkg/api/loca/v3.3/model"
)

// GetAPIV1LicensesNotificationReader is a Reader for the GetAPIV1LicensesNotification structure.
type GetAPIV1LicensesNotificationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAPIV1LicensesNotificationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAPIV1LicensesNotificationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAPIV1LicensesNotificationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAPIV1LicensesNotificationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAPIV1LicensesNotificationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/v1/licenses/notification] GetAPIV1LicensesNotification", response, response.Code())
	}
}

// NewGetAPIV1LicensesNotificationOK creates a GetAPIV1LicensesNotificationOK with default headers values
func NewGetAPIV1LicensesNotificationOK() *GetAPIV1LicensesNotificationOK {
	return &GetAPIV1LicensesNotificationOK{}
}

/*
GetAPIV1LicensesNotificationOK describes a response with status code 200, with default header values.

success
*/
type GetAPIV1LicensesNotificationOK struct {
	Payload *model.DtoLicenseNotificationResponse
}

// IsSuccess returns true when this get Api v1 licenses notification o k response has a 2xx status code
func (o *GetAPIV1LicensesNotificationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get Api v1 licenses notification o k response has a 3xx status code
func (o *GetAPIV1LicensesNotificationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api v1 licenses notification o k response has a 4xx status code
func (o *GetAPIV1LicensesNotificationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Api v1 licenses notification o k response has a 5xx status code
func (o *GetAPIV1LicensesNotificationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api v1 licenses notification o k response a status code equal to that given
func (o *GetAPIV1LicensesNotificationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get Api v1 licenses notification o k response
func (o *GetAPIV1LicensesNotificationOK) Code() int {
	return 200
}

func (o *GetAPIV1LicensesNotificationOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/licenses/notification][%d] getApiV1LicensesNotificationOK %s", 200, payload)
}

func (o *GetAPIV1LicensesNotificationOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/licenses/notification][%d] getApiV1LicensesNotificationOK %s", 200, payload)
}

func (o *GetAPIV1LicensesNotificationOK) GetPayload() *model.DtoLicenseNotificationResponse {
	return o.Payload
}

func (o *GetAPIV1LicensesNotificationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.DtoLicenseNotificationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIV1LicensesNotificationBadRequest creates a GetAPIV1LicensesNotificationBadRequest with default headers values
func NewGetAPIV1LicensesNotificationBadRequest() *GetAPIV1LicensesNotificationBadRequest {
	return &GetAPIV1LicensesNotificationBadRequest{}
}

/*
GetAPIV1LicensesNotificationBadRequest describes a response with status code 400, with default header values.

bad request
*/
type GetAPIV1LicensesNotificationBadRequest struct {
	Payload *model.DtoErrResponse
}

// IsSuccess returns true when this get Api v1 licenses notification bad request response has a 2xx status code
func (o *GetAPIV1LicensesNotificationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api v1 licenses notification bad request response has a 3xx status code
func (o *GetAPIV1LicensesNotificationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api v1 licenses notification bad request response has a 4xx status code
func (o *GetAPIV1LicensesNotificationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Api v1 licenses notification bad request response has a 5xx status code
func (o *GetAPIV1LicensesNotificationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api v1 licenses notification bad request response a status code equal to that given
func (o *GetAPIV1LicensesNotificationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get Api v1 licenses notification bad request response
func (o *GetAPIV1LicensesNotificationBadRequest) Code() int {
	return 400
}

func (o *GetAPIV1LicensesNotificationBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/licenses/notification][%d] getApiV1LicensesNotificationBadRequest %s", 400, payload)
}

func (o *GetAPIV1LicensesNotificationBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/licenses/notification][%d] getApiV1LicensesNotificationBadRequest %s", 400, payload)
}

func (o *GetAPIV1LicensesNotificationBadRequest) GetPayload() *model.DtoErrResponse {
	return o.Payload
}

func (o *GetAPIV1LicensesNotificationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.DtoErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIV1LicensesNotificationUnauthorized creates a GetAPIV1LicensesNotificationUnauthorized with default headers values
func NewGetAPIV1LicensesNotificationUnauthorized() *GetAPIV1LicensesNotificationUnauthorized {
	return &GetAPIV1LicensesNotificationUnauthorized{}
}

/*
GetAPIV1LicensesNotificationUnauthorized describes a response with status code 401, with default header values.

auth fail
*/
type GetAPIV1LicensesNotificationUnauthorized struct {
	Payload *model.DtoErrResponse
}

// IsSuccess returns true when this get Api v1 licenses notification unauthorized response has a 2xx status code
func (o *GetAPIV1LicensesNotificationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api v1 licenses notification unauthorized response has a 3xx status code
func (o *GetAPIV1LicensesNotificationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api v1 licenses notification unauthorized response has a 4xx status code
func (o *GetAPIV1LicensesNotificationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Api v1 licenses notification unauthorized response has a 5xx status code
func (o *GetAPIV1LicensesNotificationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api v1 licenses notification unauthorized response a status code equal to that given
func (o *GetAPIV1LicensesNotificationUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get Api v1 licenses notification unauthorized response
func (o *GetAPIV1LicensesNotificationUnauthorized) Code() int {
	return 401
}

func (o *GetAPIV1LicensesNotificationUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/licenses/notification][%d] getApiV1LicensesNotificationUnauthorized %s", 401, payload)
}

func (o *GetAPIV1LicensesNotificationUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/licenses/notification][%d] getApiV1LicensesNotificationUnauthorized %s", 401, payload)
}

func (o *GetAPIV1LicensesNotificationUnauthorized) GetPayload() *model.DtoErrResponse {
	return o.Payload
}

func (o *GetAPIV1LicensesNotificationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.DtoErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIV1LicensesNotificationInternalServerError creates a GetAPIV1LicensesNotificationInternalServerError with default headers values
func NewGetAPIV1LicensesNotificationInternalServerError() *GetAPIV1LicensesNotificationInternalServerError {
	return &GetAPIV1LicensesNotificationInternalServerError{}
}

/*
GetAPIV1LicensesNotificationInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type GetAPIV1LicensesNotificationInternalServerError struct {
	Payload *model.DtoErrResponse
}

// IsSuccess returns true when this get Api v1 licenses notification internal server error response has a 2xx status code
func (o *GetAPIV1LicensesNotificationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api v1 licenses notification internal server error response has a 3xx status code
func (o *GetAPIV1LicensesNotificationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api v1 licenses notification internal server error response has a 4xx status code
func (o *GetAPIV1LicensesNotificationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Api v1 licenses notification internal server error response has a 5xx status code
func (o *GetAPIV1LicensesNotificationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get Api v1 licenses notification internal server error response a status code equal to that given
func (o *GetAPIV1LicensesNotificationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get Api v1 licenses notification internal server error response
func (o *GetAPIV1LicensesNotificationInternalServerError) Code() int {
	return 500
}

func (o *GetAPIV1LicensesNotificationInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/licenses/notification][%d] getApiV1LicensesNotificationInternalServerError %s", 500, payload)
}

func (o *GetAPIV1LicensesNotificationInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/licenses/notification][%d] getApiV1LicensesNotificationInternalServerError %s", 500, payload)
}

func (o *GetAPIV1LicensesNotificationInternalServerError) GetPayload() *model.DtoErrResponse {
	return o.Payload
}

func (o *GetAPIV1LicensesNotificationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.DtoErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
