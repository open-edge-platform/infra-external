// Code generated by go-swagger; DO NOT EDIT.

package licenses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new licenses API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new licenses API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new licenses API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for licenses API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAPIV1Licenses(params *GetAPIV1LicensesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1LicensesOK, error)

	GetAPIV1LicensesFlavorUsage(params *GetAPIV1LicensesFlavorUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1LicensesFlavorUsageOK, error)

	GetAPIV1LicensesID(params *GetAPIV1LicensesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1LicensesIDOK, error)

	GetAPIV1LicensesNotification(params *GetAPIV1LicensesNotificationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1LicensesNotificationOK, error)

	PostAPIV1LicensesExport(params *PostAPIV1LicensesExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1LicensesExportOK, error)

	PostAPIV1LicensesRemove(params *PostAPIV1LicensesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1LicensesRemoveOK, error)

	PostAPIV1LicensesUpload(params *PostAPIV1LicensesUploadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1LicensesUploadCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAPIV1Licenses queries licenses
*/
func (a *Client) GetAPIV1Licenses(params *GetAPIV1LicensesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1LicensesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1LicensesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1Licenses",
		Method:             "GET",
		PathPattern:        "/api/v1/licenses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1LicensesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1LicensesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1Licenses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1LicensesFlavorUsage gets the flavors usage of the license
*/
func (a *Client) GetAPIV1LicensesFlavorUsage(params *GetAPIV1LicensesFlavorUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1LicensesFlavorUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1LicensesFlavorUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1LicensesFlavorUsage",
		Method:             "GET",
		PathPattern:        "/api/v1/licenses/flavor/usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1LicensesFlavorUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1LicensesFlavorUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1LicensesFlavorUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1LicensesID queries license by id
*/
func (a *Client) GetAPIV1LicensesID(params *GetAPIV1LicensesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1LicensesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1LicensesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1LicensesID",
		Method:             "GET",
		PathPattern:        "/api/v1/licenses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1LicensesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1LicensesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1LicensesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1LicensesNotification notifies about expired license
*/
func (a *Client) GetAPIV1LicensesNotification(params *GetAPIV1LicensesNotificationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1LicensesNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1LicensesNotificationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1LicensesNotification",
		Method:             "GET",
		PathPattern:        "/api/v1/licenses/notification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1LicensesNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1LicensesNotificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1LicensesNotification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1LicensesExport exports a license to file
*/
func (a *Client) PostAPIV1LicensesExport(params *PostAPIV1LicensesExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1LicensesExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1LicensesExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1LicensesExport",
		Method:             "POST",
		PathPattern:        "/api/v1/licenses/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1LicensesExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1LicensesExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1LicensesExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1LicensesRemove removes licenses
*/
func (a *Client) PostAPIV1LicensesRemove(params *PostAPIV1LicensesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1LicensesRemoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1LicensesRemoveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1LicensesRemove",
		Method:             "POST",
		PathPattern:        "/api/v1/licenses/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1LicensesRemoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1LicensesRemoveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1LicensesRemove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1LicensesUpload uploads a license key file
*/
func (a *Client) PostAPIV1LicensesUpload(params *PostAPIV1LicensesUploadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1LicensesUploadCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1LicensesUploadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1LicensesUpload",
		Method:             "POST",
		PathPattern:        "/api/v1/licenses/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1LicensesUploadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1LicensesUploadCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1LicensesUpload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
