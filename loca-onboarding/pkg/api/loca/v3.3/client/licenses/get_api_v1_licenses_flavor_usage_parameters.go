// Code generated by go-swagger; DO NOT EDIT.

package licenses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetAPIV1LicensesFlavorUsageParams creates a new GetAPIV1LicensesFlavorUsageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIV1LicensesFlavorUsageParams() *GetAPIV1LicensesFlavorUsageParams {
	return &GetAPIV1LicensesFlavorUsageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIV1LicensesFlavorUsageParamsWithTimeout creates a new GetAPIV1LicensesFlavorUsageParams object
// with the ability to set a timeout on a request.
func NewGetAPIV1LicensesFlavorUsageParamsWithTimeout(timeout time.Duration) *GetAPIV1LicensesFlavorUsageParams {
	return &GetAPIV1LicensesFlavorUsageParams{
		timeout: timeout,
	}
}

// NewGetAPIV1LicensesFlavorUsageParamsWithContext creates a new GetAPIV1LicensesFlavorUsageParams object
// with the ability to set a context for a request.
func NewGetAPIV1LicensesFlavorUsageParamsWithContext(ctx context.Context) *GetAPIV1LicensesFlavorUsageParams {
	return &GetAPIV1LicensesFlavorUsageParams{
		Context: ctx,
	}
}

// NewGetAPIV1LicensesFlavorUsageParamsWithHTTPClient creates a new GetAPIV1LicensesFlavorUsageParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIV1LicensesFlavorUsageParamsWithHTTPClient(client *http.Client) *GetAPIV1LicensesFlavorUsageParams {
	return &GetAPIV1LicensesFlavorUsageParams{
		HTTPClient: client,
	}
}

/*
GetAPIV1LicensesFlavorUsageParams contains all the parameters to send to the API endpoint

	for the get API v1 licenses flavor usage operation.

	Typically these are written to a http.Request.
*/
type GetAPIV1LicensesFlavorUsageParams struct {

	/* FlavorName.

	   filter by flavor name, it is the second priority
	*/
	FlavorName *string

	/* TemplateID.

	   filter by template ID, it is the third priority
	*/
	TemplateID *string

	/* TemplateName.

	   filter by template name, it is the fourth priority
	*/
	TemplateName *string

	/* FlavorID.

	   filter by flavor ID, it is the first priority
	*/
	FlavorID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API v1 licenses flavor usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV1LicensesFlavorUsageParams) WithDefaults() *GetAPIV1LicensesFlavorUsageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API v1 licenses flavor usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV1LicensesFlavorUsageParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get API v1 licenses flavor usage params
func (o *GetAPIV1LicensesFlavorUsageParams) WithTimeout(timeout time.Duration) *GetAPIV1LicensesFlavorUsageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API v1 licenses flavor usage params
func (o *GetAPIV1LicensesFlavorUsageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API v1 licenses flavor usage params
func (o *GetAPIV1LicensesFlavorUsageParams) WithContext(ctx context.Context) *GetAPIV1LicensesFlavorUsageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API v1 licenses flavor usage params
func (o *GetAPIV1LicensesFlavorUsageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API v1 licenses flavor usage params
func (o *GetAPIV1LicensesFlavorUsageParams) WithHTTPClient(client *http.Client) *GetAPIV1LicensesFlavorUsageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API v1 licenses flavor usage params
func (o *GetAPIV1LicensesFlavorUsageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFlavorName adds the flavorName to the get API v1 licenses flavor usage params
func (o *GetAPIV1LicensesFlavorUsageParams) WithFlavorName(flavorName *string) *GetAPIV1LicensesFlavorUsageParams {
	o.SetFlavorName(flavorName)
	return o
}

// SetFlavorName adds the flavorName to the get API v1 licenses flavor usage params
func (o *GetAPIV1LicensesFlavorUsageParams) SetFlavorName(flavorName *string) {
	o.FlavorName = flavorName
}

// WithTemplateID adds the templateID to the get API v1 licenses flavor usage params
func (o *GetAPIV1LicensesFlavorUsageParams) WithTemplateID(templateID *string) *GetAPIV1LicensesFlavorUsageParams {
	o.SetTemplateID(templateID)
	return o
}

// SetTemplateID adds the templateId to the get API v1 licenses flavor usage params
func (o *GetAPIV1LicensesFlavorUsageParams) SetTemplateID(templateID *string) {
	o.TemplateID = templateID
}

// WithTemplateName adds the templateName to the get API v1 licenses flavor usage params
func (o *GetAPIV1LicensesFlavorUsageParams) WithTemplateName(templateName *string) *GetAPIV1LicensesFlavorUsageParams {
	o.SetTemplateName(templateName)
	return o
}

// SetTemplateName adds the templateName to the get API v1 licenses flavor usage params
func (o *GetAPIV1LicensesFlavorUsageParams) SetTemplateName(templateName *string) {
	o.TemplateName = templateName
}

// WithFlavorID adds the flavorID to the get API v1 licenses flavor usage params
func (o *GetAPIV1LicensesFlavorUsageParams) WithFlavorID(flavorID *string) *GetAPIV1LicensesFlavorUsageParams {
	o.SetFlavorID(flavorID)
	return o
}

// SetFlavorID adds the flavorId to the get API v1 licenses flavor usage params
func (o *GetAPIV1LicensesFlavorUsageParams) SetFlavorID(flavorID *string) {
	o.FlavorID = flavorID
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIV1LicensesFlavorUsageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FlavorName != nil {

		// query param FlavorName
		var qrFlavorName string

		if o.FlavorName != nil {
			qrFlavorName = *o.FlavorName
		}
		qFlavorName := qrFlavorName
		if qFlavorName != "" {

			if err := r.SetQueryParam("FlavorName", qFlavorName); err != nil {
				return err
			}
		}
	}

	if o.TemplateID != nil {

		// query param TemplateID
		var qrTemplateID string

		if o.TemplateID != nil {
			qrTemplateID = *o.TemplateID
		}
		qTemplateID := qrTemplateID
		if qTemplateID != "" {

			if err := r.SetQueryParam("TemplateID", qTemplateID); err != nil {
				return err
			}
		}
	}

	if o.TemplateName != nil {

		// query param TemplateName
		var qrTemplateName string

		if o.TemplateName != nil {
			qrTemplateName = *o.TemplateName
		}
		qTemplateName := qrTemplateName
		if qTemplateName != "" {

			if err := r.SetQueryParam("TemplateName", qTemplateName); err != nil {
				return err
			}
		}
	}

	if o.FlavorID != nil {

		// query param flavorID
		var qrFlavorID string

		if o.FlavorID != nil {
			qrFlavorID = *o.FlavorID
		}
		qFlavorID := qrFlavorID
		if qFlavorID != "" {

			if err := r.SetQueryParam("flavorID", qFlavorID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
