// Code generated by go-swagger; DO NOT EDIT.

package licenses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/open-edge-platform/infra-external/loca-onboarding/v2/pkg/api/loca/v3.3/model"
)

// GetAPIV1LicensesFlavorUsageReader is a Reader for the GetAPIV1LicensesFlavorUsage structure.
type GetAPIV1LicensesFlavorUsageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAPIV1LicensesFlavorUsageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAPIV1LicensesFlavorUsageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAPIV1LicensesFlavorUsageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAPIV1LicensesFlavorUsageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAPIV1LicensesFlavorUsageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/v1/licenses/flavor/usage] GetAPIV1LicensesFlavorUsage", response, response.Code())
	}
}

// NewGetAPIV1LicensesFlavorUsageOK creates a GetAPIV1LicensesFlavorUsageOK with default headers values
func NewGetAPIV1LicensesFlavorUsageOK() *GetAPIV1LicensesFlavorUsageOK {
	return &GetAPIV1LicensesFlavorUsageOK{}
}

/*
GetAPIV1LicensesFlavorUsageOK describes a response with status code 200, with default header values.

success
*/
type GetAPIV1LicensesFlavorUsageOK struct {
	Payload *model.DtoCloudServiceListResponse
}

// IsSuccess returns true when this get Api v1 licenses flavor usage o k response has a 2xx status code
func (o *GetAPIV1LicensesFlavorUsageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get Api v1 licenses flavor usage o k response has a 3xx status code
func (o *GetAPIV1LicensesFlavorUsageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api v1 licenses flavor usage o k response has a 4xx status code
func (o *GetAPIV1LicensesFlavorUsageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Api v1 licenses flavor usage o k response has a 5xx status code
func (o *GetAPIV1LicensesFlavorUsageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api v1 licenses flavor usage o k response a status code equal to that given
func (o *GetAPIV1LicensesFlavorUsageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get Api v1 licenses flavor usage o k response
func (o *GetAPIV1LicensesFlavorUsageOK) Code() int {
	return 200
}

func (o *GetAPIV1LicensesFlavorUsageOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/licenses/flavor/usage][%d] getApiV1LicensesFlavorUsageOK %s", 200, payload)
}

func (o *GetAPIV1LicensesFlavorUsageOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/licenses/flavor/usage][%d] getApiV1LicensesFlavorUsageOK %s", 200, payload)
}

func (o *GetAPIV1LicensesFlavorUsageOK) GetPayload() *model.DtoCloudServiceListResponse {
	return o.Payload
}

func (o *GetAPIV1LicensesFlavorUsageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.DtoCloudServiceListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIV1LicensesFlavorUsageBadRequest creates a GetAPIV1LicensesFlavorUsageBadRequest with default headers values
func NewGetAPIV1LicensesFlavorUsageBadRequest() *GetAPIV1LicensesFlavorUsageBadRequest {
	return &GetAPIV1LicensesFlavorUsageBadRequest{}
}

/*
GetAPIV1LicensesFlavorUsageBadRequest describes a response with status code 400, with default header values.

bad request
*/
type GetAPIV1LicensesFlavorUsageBadRequest struct {
	Payload *model.DtoErrResponse
}

// IsSuccess returns true when this get Api v1 licenses flavor usage bad request response has a 2xx status code
func (o *GetAPIV1LicensesFlavorUsageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api v1 licenses flavor usage bad request response has a 3xx status code
func (o *GetAPIV1LicensesFlavorUsageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api v1 licenses flavor usage bad request response has a 4xx status code
func (o *GetAPIV1LicensesFlavorUsageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Api v1 licenses flavor usage bad request response has a 5xx status code
func (o *GetAPIV1LicensesFlavorUsageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api v1 licenses flavor usage bad request response a status code equal to that given
func (o *GetAPIV1LicensesFlavorUsageBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get Api v1 licenses flavor usage bad request response
func (o *GetAPIV1LicensesFlavorUsageBadRequest) Code() int {
	return 400
}

func (o *GetAPIV1LicensesFlavorUsageBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/licenses/flavor/usage][%d] getApiV1LicensesFlavorUsageBadRequest %s", 400, payload)
}

func (o *GetAPIV1LicensesFlavorUsageBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/licenses/flavor/usage][%d] getApiV1LicensesFlavorUsageBadRequest %s", 400, payload)
}

func (o *GetAPIV1LicensesFlavorUsageBadRequest) GetPayload() *model.DtoErrResponse {
	return o.Payload
}

func (o *GetAPIV1LicensesFlavorUsageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.DtoErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIV1LicensesFlavorUsageUnauthorized creates a GetAPIV1LicensesFlavorUsageUnauthorized with default headers values
func NewGetAPIV1LicensesFlavorUsageUnauthorized() *GetAPIV1LicensesFlavorUsageUnauthorized {
	return &GetAPIV1LicensesFlavorUsageUnauthorized{}
}

/*
GetAPIV1LicensesFlavorUsageUnauthorized describes a response with status code 401, with default header values.

auth fail
*/
type GetAPIV1LicensesFlavorUsageUnauthorized struct {
	Payload *model.DtoErrResponse
}

// IsSuccess returns true when this get Api v1 licenses flavor usage unauthorized response has a 2xx status code
func (o *GetAPIV1LicensesFlavorUsageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api v1 licenses flavor usage unauthorized response has a 3xx status code
func (o *GetAPIV1LicensesFlavorUsageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api v1 licenses flavor usage unauthorized response has a 4xx status code
func (o *GetAPIV1LicensesFlavorUsageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Api v1 licenses flavor usage unauthorized response has a 5xx status code
func (o *GetAPIV1LicensesFlavorUsageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api v1 licenses flavor usage unauthorized response a status code equal to that given
func (o *GetAPIV1LicensesFlavorUsageUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get Api v1 licenses flavor usage unauthorized response
func (o *GetAPIV1LicensesFlavorUsageUnauthorized) Code() int {
	return 401
}

func (o *GetAPIV1LicensesFlavorUsageUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/licenses/flavor/usage][%d] getApiV1LicensesFlavorUsageUnauthorized %s", 401, payload)
}

func (o *GetAPIV1LicensesFlavorUsageUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/licenses/flavor/usage][%d] getApiV1LicensesFlavorUsageUnauthorized %s", 401, payload)
}

func (o *GetAPIV1LicensesFlavorUsageUnauthorized) GetPayload() *model.DtoErrResponse {
	return o.Payload
}

func (o *GetAPIV1LicensesFlavorUsageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.DtoErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIV1LicensesFlavorUsageInternalServerError creates a GetAPIV1LicensesFlavorUsageInternalServerError with default headers values
func NewGetAPIV1LicensesFlavorUsageInternalServerError() *GetAPIV1LicensesFlavorUsageInternalServerError {
	return &GetAPIV1LicensesFlavorUsageInternalServerError{}
}

/*
GetAPIV1LicensesFlavorUsageInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type GetAPIV1LicensesFlavorUsageInternalServerError struct {
	Payload *model.DtoErrResponse
}

// IsSuccess returns true when this get Api v1 licenses flavor usage internal server error response has a 2xx status code
func (o *GetAPIV1LicensesFlavorUsageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api v1 licenses flavor usage internal server error response has a 3xx status code
func (o *GetAPIV1LicensesFlavorUsageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api v1 licenses flavor usage internal server error response has a 4xx status code
func (o *GetAPIV1LicensesFlavorUsageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Api v1 licenses flavor usage internal server error response has a 5xx status code
func (o *GetAPIV1LicensesFlavorUsageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get Api v1 licenses flavor usage internal server error response a status code equal to that given
func (o *GetAPIV1LicensesFlavorUsageInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get Api v1 licenses flavor usage internal server error response
func (o *GetAPIV1LicensesFlavorUsageInternalServerError) Code() int {
	return 500
}

func (o *GetAPIV1LicensesFlavorUsageInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/licenses/flavor/usage][%d] getApiV1LicensesFlavorUsageInternalServerError %s", 500, payload)
}

func (o *GetAPIV1LicensesFlavorUsageInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/licenses/flavor/usage][%d] getApiV1LicensesFlavorUsageInternalServerError %s", 500, payload)
}

func (o *GetAPIV1LicensesFlavorUsageInternalServerError) GetPayload() *model.DtoErrResponse {
	return o.Payload
}

func (o *GetAPIV1LicensesFlavorUsageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.DtoErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
