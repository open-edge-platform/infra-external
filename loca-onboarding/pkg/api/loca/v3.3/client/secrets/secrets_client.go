// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new secrets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new secrets API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new secrets API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for secrets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIV1SecretsCredentialPoliciesID(params *DeleteAPIV1SecretsCredentialPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAPIV1SecretsCredentialPoliciesIDOK, error)

	GetAPIV1SecretsCredentialPolicies(params *GetAPIV1SecretsCredentialPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1SecretsCredentialPoliciesOK, error)

	GetAPIV1SecretsCredentialPoliciesID(params *GetAPIV1SecretsCredentialPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1SecretsCredentialPoliciesIDOK, error)

	GetAPIV1SecretsRegisteredVaults(params *GetAPIV1SecretsRegisteredVaultsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1SecretsRegisteredVaultsOK, error)

	PostAPIV1SecretsCredentialPolicies(params *PostAPIV1SecretsCredentialPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1SecretsCredentialPoliciesOK, error)

	PostAPIV1SecretsCredentialPoliciesRemove(params *PostAPIV1SecretsCredentialPoliciesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1SecretsCredentialPoliciesRemoveCreated, error)

	PostAPIV1SecretsCredentialPoliciesUpdate(params *PostAPIV1SecretsCredentialPoliciesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1SecretsCredentialPoliciesUpdateCreated, error)

	PostAPIV1SecretsSecretsFile(params *PostAPIV1SecretsSecretsFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	PostAPIV1SecretsUnderPath(params *PostAPIV1SecretsUnderPathParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	PostAPIV1SecretsVaultRegister(params *PostAPIV1SecretsVaultRegisterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	PostAPIV1SecretsVaultUnregister(params *PostAPIV1SecretsVaultUnregisterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1SecretsVaultUnregisterCreated, error)

	PostAPIV1SecretsVaultUpdate(params *PostAPIV1SecretsVaultUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAPIV1SecretsCredentialPoliciesID deletes a credential policy by id
*/
func (a *Client) DeleteAPIV1SecretsCredentialPoliciesID(params *DeleteAPIV1SecretsCredentialPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAPIV1SecretsCredentialPoliciesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV1SecretsCredentialPoliciesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPIV1SecretsCredentialPoliciesID",
		Method:             "DELETE",
		PathPattern:        "/api/v1/secrets/credential-policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV1SecretsCredentialPoliciesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV1SecretsCredentialPoliciesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV1SecretsCredentialPoliciesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1SecretsCredentialPolicies gets all credential policies
*/
func (a *Client) GetAPIV1SecretsCredentialPolicies(params *GetAPIV1SecretsCredentialPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1SecretsCredentialPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1SecretsCredentialPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1SecretsCredentialPolicies",
		Method:             "GET",
		PathPattern:        "/api/v1/secrets/credential-policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1SecretsCredentialPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1SecretsCredentialPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1SecretsCredentialPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1SecretsCredentialPoliciesID queries a credential policy by id
*/
func (a *Client) GetAPIV1SecretsCredentialPoliciesID(params *GetAPIV1SecretsCredentialPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1SecretsCredentialPoliciesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1SecretsCredentialPoliciesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1SecretsCredentialPoliciesID",
		Method:             "GET",
		PathPattern:        "/api/v1/secrets/credential-policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1SecretsCredentialPoliciesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1SecretsCredentialPoliciesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1SecretsCredentialPoliciesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1SecretsRegisteredVaults gets all registered vaults details
*/
func (a *Client) GetAPIV1SecretsRegisteredVaults(params *GetAPIV1SecretsRegisteredVaultsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIV1SecretsRegisteredVaultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1SecretsRegisteredVaultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1SecretsRegisteredVaults",
		Method:             "GET",
		PathPattern:        "/api/v1/secrets/registered-vaults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV1SecretsRegisteredVaultsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1SecretsRegisteredVaultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1SecretsRegisteredVaults: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1SecretsCredentialPolicies creates credential policies
*/
func (a *Client) PostAPIV1SecretsCredentialPolicies(params *PostAPIV1SecretsCredentialPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1SecretsCredentialPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1SecretsCredentialPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1SecretsCredentialPolicies",
		Method:             "POST",
		PathPattern:        "/api/v1/secrets/credential-policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1SecretsCredentialPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1SecretsCredentialPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1SecretsCredentialPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1SecretsCredentialPoliciesRemove updates credential policies
*/
func (a *Client) PostAPIV1SecretsCredentialPoliciesRemove(params *PostAPIV1SecretsCredentialPoliciesRemoveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1SecretsCredentialPoliciesRemoveCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1SecretsCredentialPoliciesRemoveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1SecretsCredentialPoliciesRemove",
		Method:             "POST",
		PathPattern:        "/api/v1/secrets/credential-policies/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1SecretsCredentialPoliciesRemoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1SecretsCredentialPoliciesRemoveCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1SecretsCredentialPoliciesRemove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1SecretsCredentialPoliciesUpdate updates credential policies
*/
func (a *Client) PostAPIV1SecretsCredentialPoliciesUpdate(params *PostAPIV1SecretsCredentialPoliciesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1SecretsCredentialPoliciesUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1SecretsCredentialPoliciesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1SecretsCredentialPoliciesUpdate",
		Method:             "POST",
		PathPattern:        "/api/v1/secrets/credential-policies/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1SecretsCredentialPoliciesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1SecretsCredentialPoliciesUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1SecretsCredentialPoliciesUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1SecretsSecretsFile gets an encrypted file with all l o c a secrets from vault
*/
func (a *Client) PostAPIV1SecretsSecretsFile(params *PostAPIV1SecretsSecretsFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1SecretsSecretsFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1SecretsSecretsFile",
		Method:             "POST",
		PathPattern:        "/api/v1/secrets/secrets-file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1SecretsSecretsFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
PostAPIV1SecretsUnderPath gets the list of secrets under a certain secret path
*/
func (a *Client) PostAPIV1SecretsUnderPath(params *PostAPIV1SecretsUnderPathParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1SecretsUnderPathParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1SecretsUnderPath",
		Method:             "POST",
		PathPattern:        "/api/v1/secrets/under-path",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1SecretsUnderPathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
PostAPIV1SecretsVaultRegister registers secret management vault service
*/
func (a *Client) PostAPIV1SecretsVaultRegister(params *PostAPIV1SecretsVaultRegisterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1SecretsVaultRegisterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1SecretsVaultRegister",
		Method:             "POST",
		PathPattern:        "/api/v1/secrets/vault/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1SecretsVaultRegisterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
PostAPIV1SecretsVaultUnregister unregisters secret management vault service
*/
func (a *Client) PostAPIV1SecretsVaultUnregister(params *PostAPIV1SecretsVaultUnregisterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAPIV1SecretsVaultUnregisterCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1SecretsVaultUnregisterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1SecretsVaultUnregister",
		Method:             "POST",
		PathPattern:        "/api/v1/secrets/vault/unregister",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1SecretsVaultUnregisterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1SecretsVaultUnregisterCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1SecretsVaultUnregister: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1SecretsVaultUpdate registers secret management vault service
*/
func (a *Client) PostAPIV1SecretsVaultUpdate(params *PostAPIV1SecretsVaultUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1SecretsVaultUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1SecretsVaultUpdate",
		Method:             "POST",
		PathPattern:        "/api/v1/secrets/vault/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV1SecretsVaultUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
