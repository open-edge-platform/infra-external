{
    "swagger": "2.0",
    "info": {
        "description": "Swagger file for LOC-A API",
        "title": "loca API",
        "contact": {},
        "version": "3.3.0"
    },
    "paths": {
        "/api/v1/auth/ldap-configs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and authorization"
                ],
                "summary": "Get ldap configs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.LdapConfigQueryResponse"
                        }
                    },
                    "400": {
                        "description": "failure",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and authorization"
                ],
                "summary": "Create ldap config",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "File",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "file path",
                        "name": "path",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "bind_password",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "bind_username",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "group_filter",
                        "in": "formData"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "group_search_attribute",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "id",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "local_role",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "root_dn",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "user_filter",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "user_search_attribute",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.LdapConfigQueryResponse"
                        }
                    },
                    "400": {
                        "description": "failure",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/ldap/validate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and authorization"
                ],
                "summary": "Validate ldap",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "File",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "file path",
                        "name": "path",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "bind_password",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "bind_username",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "group_filter",
                        "in": "formData"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "group_search_attribute",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "id",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "local_role",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "root_dn",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "user_filter",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "user_search_attribute",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.LdapValidateResponse"
                        }
                    },
                    "400": {
                        "description": "failure",
                        "schema": {
                            "$ref": "#/definitions/dto.LdapValidateResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and authorization"
                ],
                "summary": "User login with name and password",
                "parameters": [
                    {
                        "description": "User name and password",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.UserLoginResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/refresh-token": {
            "post": {
                "parameters": [
                    {
                        "description": "Refresh token",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/dto.UserRefreshTokenResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Refresh JWT token",
                "tags": [
                    "Authentication and authorization"
                ]
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and authorization"
                ],
                "summary": "User logout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "logout user with name",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserLogoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.UserLogoutResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/settings": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and authorization"
                ],
                "summary": "Get ldap user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.UserManageResponse"
                        }
                    },
                    "400": {
                        "description": "failure",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and authorization"
                ],
                "summary": "Create ldap user",
                "parameters": [
                    {
                        "description": "ldap user: id can be ignored.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserManage"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.UserManageResponse"
                        }
                    },
                    "400": {
                        "description": "failure",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/users": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and authorization"
                ],
                "summary": "Create a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "create a user with name/password/role",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.UserCreateResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/users/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and authorization"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.UserListResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/users/changePassword": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and authorization"
                ],
                "summary": "Change a user password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User update password",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseCUD"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and authorization"
                ],
                "summary": "Get user by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and authorization"
                ],
                "summary": "Modify a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "update a user by id",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserUpdateRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.UserUpdateResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and authorization"
                ],
                "summary": "Remove a user by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseCUD"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cert/download-crt": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificate"
                ],
                "summary": "download the installed signed certificate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {}
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cert/download-csr": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificate"
                ],
                "summary": "download the generated CSR",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {}
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cert/generate-csr": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificate"
                ],
                "summary": "create CSR file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "csr",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CSRCreateParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {}
                    },
                    "400": {
                        "description": "failure",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "429": {
                        "description": "too many requests in generating CSR",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cert/reset": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificate"
                ],
                "summary": "reset certificate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {}
                    },
                    "400": {
                        "description": "failure",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cert/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificate"
                ],
                "summary": "get certificate status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.CertStatusResponse"
                        }
                    },
                    "400": {
                        "description": "failure",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cert/upload": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificate"
                ],
                "summary": "import signed certificate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filename",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {}
                    },
                    "400": {
                        "description": "failure",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "429": {
                        "description": "too many requests in importing certificate",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployment/images": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Get all mini images",
                "parameters": [
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. the following example will return data which city contains shzj001 or shzj002, or county contains shzj001 or shzj002., example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterContains",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city exactly matches shzj001 or shzj002, or county exactly matches shzj001 or shzj002., example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[\"created_time,desc\",\"id,asc\"]",
                        "description": "Returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: [\"created_time,desc\",\"id,asc\"]",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "limit of items to get in this API, example: 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "offset: to skip limit*offset items, example: 0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.MiniImagesQryResponse"
                        }
                    },
                    "400": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Create mini image",
                "parameters": [
                    {
                        "description": "The details for creating mini image",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterParamWithPw"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.CreatedWorkflowResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployment/images/download": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Download a mini image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "image id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBase"
                        },
                        "headers": {
                            "Filename": {
                                "type": "string",
                                "description": "The filename of image"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployment/instances": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Get instances metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. The following example will return data which city contains shzj001 or shzj002, or county contains shzj001 or shzj002., example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterContains",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. The following example will return data which city exactly matches shzj001 or shzj002, or county exactly matches shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: [\"created_time,desc\\\",\\\"id,asc\\\"]",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "limit of items to get in this API, example: 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "offset: to skip limit*offset items, example: 0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "by site",
                        "name": "site",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "by stage",
                        "name": "stage",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "by operation",
                        "name": "operation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "by flavor",
                        "name": "flavor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "by flavor version",
                        "name": "flavorVersion",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.InstancesQryResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Onboard and deploy instances by the planning metadata",
                "parameters": [
                    {
                        "description": "The detailed info of cloud instance.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.OnboardInstancesParams"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.CreatedWorkflowResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployment/instances/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Create instances through a single request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Request body for creating instances",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateInstanceRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.InstancesCreatedResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployment/instances/deploy": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Deploy instance",
                "parameters": [
                    {
                        "description": "instance name list",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DeployInstancesRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.CreatedWorkflowResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployment/instances/expand": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Expand instance",
                "parameters": [
                    {
                        "description": "instance name list",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DeployInstancesRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.CreatedWorkflowResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployment/instances/onboard": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Onboard instances by the planning metadata",
                "parameters": [
                    {
                        "description": "Planning metadata",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.OnboardInstancesParams"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.CreatedWorkflowResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployment/instances/planning": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Get instances planning metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UUID",
                        "name": "uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The template name",
                        "name": "templateName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The site name",
                        "name": "siteName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The instance name",
                        "name": "instanceName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. The following example will return data which kind contains Deploy or Expand, or operation contains Deploy or Expand., example: [{\"attributes\":\"kind,operation\",\"values\":\"Deploy,Expand\"}]",
                        "name": "filterContains",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. The following example will return data which kind exactly matches Deploy or Expand, or operation exactly matches Deploy or Expand, example: [{\"attributes\":\"kind,operation\",\"values\":\"Deploy,Expand\"}]",
                        "name": "filterEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: [\"created_time,desc\",\"id,asc\"]",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of returns, example: 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset, example: 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.InstancePlanningsQryResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Plan instances metadata",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.InstancesPlanningParams"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.CreatedWorkflowResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployment/instances/remove": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Remove instances",
                "parameters": [
                    {
                        "description": "the ids of the instances",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RemoveInstancesRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.CreatedWorkflowResponse"
                        }
                    },
                    "400": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployment/instances/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Query instance by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "get cloud instance by id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.InstanceQryResponse"
                        }
                    },
                    "400": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployment/os/deploy": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Deploy os",
                "parameters": [
                    {
                        "description": "os deployment metadata",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/osdeploy.OsDeployDto"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.CreatedWorkflowResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployment/readiness": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Query readiness",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. the following example will return data which city contains shzj001 or shzj002, or county contains shzj001 or shzj002., example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterContains",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city exactly matches shzj001 or shzj002, or county exactly matches shzj001 or shzj002., example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: [\"created_time,desc\",\"id,asc\"]",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "limit of items to get in this API, example: 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "offset: to skip limit*offset items, example: 0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "by template",
                        "name": "template",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "by uuid",
                        "name": "uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "by site name",
                        "name": "siteName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "by city",
                        "name": "city",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "by province",
                        "name": "province",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "by country",
                        "name": "country",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "by geo",
                        "name": "geo",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "by readiness",
                        "name": "readiness",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ReadinessesQryResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Create readiness",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Request body for creating readiness",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReadinessParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.CreatedWorkflowResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployment/registrationtool/download": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Get registration tool",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBase"
                        },
                        "headers": {
                            "Filename": {
                                "type": "string",
                                "description": "The filename of registration tool"
                            }
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployment/templates": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Query templates",
                "parameters": [
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. the following example will return data which city contains shzj001 or shzj002, or county contains shzj001 or shzj002., example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterContains",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city exactly matches shzj001 or shzj002, or county exactly matches shzj001 or shzj002., example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[\"created_time,desc\",\"id,asc\"]",
                        "description": "Returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: [\"created_time,desc\",\"id,asc\"]",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "limit of items to get in this API, example: 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "offset: to skip limit*offset items, example: 0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "filter templates that do not support planning",
                        "name": "notSupportPlanning",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter templates that support the flavor",
                        "name": "flavor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter templates by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter templates by status, values: [Valid, Invalid]",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.TemplatesQryResponse"
                        }
                    },
                    "400": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Create a template",
                "parameters": [
                    {
                        "description": "request cloud-services params",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateTemplateRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.TemplateQryResponse"
                        }
                    },
                    "400": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployment/templates/metadata-rules": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all setting rules for deployment templates to determine which fields can be modified in the template table",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Retrieve template metadata rules for a particular flavor and OS version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved cloud service metadata rules",
                        "schema": {
                            "$ref": "#/definitions/dto.DtoSettingRuleListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployment/templates/remove": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Remove template",
                "parameters": [
                    {
                        "description": "the name of template",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RemoveTemplateRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBase"
                        }
                    },
                    "400": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployment/templates/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Update a template",
                "parameters": [
                    {
                        "description": "request template update params",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateTemplateRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.TemplateQryResponse"
                        }
                    },
                    "400": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployment/templates/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Query template by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.TemplateQryResponse"
                        }
                    },
                    "400": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployments": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployments"
                ],
                "summary": "Get deployment metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. The following example will return data which kind contains Deploy or Expand, or operation contains Deploy or Expand., example: [{\"attributes\":\"kind,operation\",\"values\":\"Deploy,Expand\"}]",
                        "name": "filterContains",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. The following example will return data which kind exactly matches Deploy or Expand, or operation exactly matches Deploy or Expand, example: [{\"attributes\":\"kind,operation\",\"values\":\"Deploy,Expand\"}]",
                        "name": "filterEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: [\"created_time,desc\",\"id,asc\"]",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of returns, example: 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset, example: 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.DeploymentsQryResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployments"
                ],
                "summary": "Create deployments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "the parameters for deployments creation",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DeploymentCreateParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBase"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployments/remove": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployments"
                ],
                "summary": "Remove deployments by ids",
                "parameters": [
                    {
                        "description": "the ids of the deployments",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DeploymentRemoveParams"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.DeploymentRemoveResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/deployments/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployments"
                ],
                "summary": "Query deployment metadata by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.DeploymentQryResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployments"
                ],
                "summary": "Update deployments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "the parameters for deployments update",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DeploymentUpdateParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBase"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/cloud-services": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Query cloud Services",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. the following example will return data which city contains shzj001 or shzj002, or county contains shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterContains",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city exactly matches shzj001 or shzj002, or county exactly matches shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that not matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city not match shzj001 or shzj002, or county not match shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterNotEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "inventory",
                            "staged",
                            "active"
                        ],
                        "type": "string",
                        "description": "filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by role",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by platformType",
                        "name": "platformType",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by siteAssociation",
                        "name": "siteAssociation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by serviceAddress",
                        "name": "serviceAddress",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "filter by connectionCheck",
                        "name": "connectionCheck",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by protocol",
                        "name": "protocol",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by parentService",
                        "name": "parentService",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[\"created_time,desc\",\"id,asc\"]",
                        "description": "returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: [\"created_time,desc\",\"id,asc\"]",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": " , example: 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": " , example: 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.CloudServiceListResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create one or multiple cloud services with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Create cloud services",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Array of cloud service creation requests",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.CloudServiceCreateRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Cloud services created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.CloudServicesCreatedResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/cloud-services/metadata-rules": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all setting rules for cloud services to determine which fields can be modified in the cloud service table.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Retrieve cloud service metadata rules",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved cloud service metadata rules",
                        "schema": {
                            "$ref": "#/definitions/dto.DtoSettingRuleListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/cloud-services/remove": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Remove cloud services",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ServiceRemoveRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseCUD"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/cloud-services/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the details of an existing cloud service identified by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Update a cloud service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Cloud service update request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CloudServiceUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cloud service updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseCUD"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Cloud service not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/cloud-services/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Query cloud service by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "get cloud service by id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.CloudServiceResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/device-profiles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Query device profiles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. the following example will return data which city contains shzj001 or shzj002, or county contains shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterContains",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city exactly matches shzj001 or shzj002, or county exactly matches shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that not matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city not match shzj001 or shzj002, or county not match shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterNotEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by device profile name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by flavor name",
                        "name": "flavor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[\"created_time,desc\",\"id,asc\"]",
                        "description": "returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: [\"created_time,desc\",\"id,asc\"]",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": " , example: 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": " , example: 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.DeviceProfileListResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Create DCIM Device Profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.CreateDeviceProfileElement"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseCUD"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/device-profiles/flavors/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Query DCIM Device Profile By ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id of device profile",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.DeviceProfileResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/device-profiles/remove": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Delete DCIM Device Profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.CreateDeviceProfileElement"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseCUD"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/device-profiles/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Update device profiles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.UpdateDeviceProfileElement"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseCUD"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/device-profiles/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Query device profile by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id of device profile",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.DeviceProfileResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/devices": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Query devices",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. the following example will return data which city contains shzj001 or shzj002, or county contains shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterContains",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city exactly matches shzj001 or shzj002, or county exactly matches shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that not matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city not match shzj001 or shzj002, or county not match shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterNotEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by serialNumber",
                        "name": "serialNumber",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by instance",
                        "name": "instance",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by deviceRole",
                        "name": "deviceRole",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by deviceType",
                        "name": "deviceType",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by primaryIP",
                        "name": "primaryIP",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "filter by site",
                        "name": "site",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by hostname",
                        "name": "hostname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by source",
                        "name": "source",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by managedBy",
                        "name": "managedBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": " , example: 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": " , example: 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.DeviceListResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Add devices by ip address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddDeviceParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseCUD"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/devices/discover": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Get discovered devices",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "task uuid",
                        "name": "task-uuid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.DiscoverDevicesResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Add devices through discovery",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DiscoverDeviceParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseCUD"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/devices/registration-file-download": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Download a registration devices template file with excel format",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {}
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/devices/remove": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Remove devices from inventory",
                "parameters": [
                    {
                        "description": "device id list.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseCUD"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/devices/upload": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Add devices through file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "File",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "bmc credential policy name, example: {\\\"credentialPolicyID\\\":\"string\",\"newPassword\":\"string\"}",
                        "name": "bmcCredential",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "uefi credential policy name, example: {\\\"credentialPolicyID\\\":\"string\",\"newPassword\":\"string\"}",
                        "name": "uefiCredential",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseCUD"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/devices/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Query devices by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id of device",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.DeviceResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/devices/{id}/metadata-rules": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Query device setting rules by the device ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id of device",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.DeviceResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/devices/{id}/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Update device",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DeviceUpdateParams"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.DeviceUpdateResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/download": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Download a cloud setup file with excel format",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {}
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/ip-ranges": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Query ip ranges",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. the following example will return data which city contains shzj001 or shzj002, or county contains shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterContains",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city exactly matches shzj001 or shzj002, or county exactly matches shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by startAddress",
                        "name": "startAddress",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "filter by netmask",
                        "name": "netmask",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by endAddress",
                        "name": "endAddress",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by description",
                        "name": "description",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by role",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by gateway",
                        "name": "gateway",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by siteAssociation",
                        "name": "siteAssociation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by vlan",
                        "name": "vlan",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[\"created_time,desc\",\"id,asc\"]",
                        "description": "Returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: [\"created_time,desc\",\"id,asc\"]",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": " , example: 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": " , example: 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.IPRangeListResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create one or multiple IP ranges with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Create IP ranges",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Array of IP range creation requests",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.IPRangeCreateRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "IP ranges created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.IPRangesCreatedResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/ip-ranges/metadata-rules": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all setting rules for IP ranges to determine which fields can be modified in the IP range table.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Retrieve IP range metadata rules",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved IP range metadata rules",
                        "schema": {
                            "$ref": "#/definitions/dto.DtoSettingRuleListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/ip-ranges/remove": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Remove ip ranges",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.IPRangeRemoveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseCUD"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/ip-ranges/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Query ip range by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "get ip range by id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.IPRangeResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/network-services": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Query network services",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. the following example will return data which city contains shzj001 or shzj002, or county contains shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterContains",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city exactly matches shzj001 or shzj002, or county exactly matches shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that not matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city not match shzj001 or shzj002, or county not match shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterNotEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "inventory",
                            "staged",
                            "active"
                        ],
                        "type": "string",
                        "description": "filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by role",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by platformType",
                        "name": "platformType",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by siteAssociation",
                        "name": "siteAssociation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by serviceAddress",
                        "name": "serviceAddress",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "filter by connectionCheck",
                        "name": "connectionCheck",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by protocol",
                        "name": "protocol",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by parentService",
                        "name": "parentService",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[\"created_time,desc\",\"id,asc\"]",
                        "description": "returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: [\"created_time,desc\",\"id,asc\"]",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": " , example: 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": " , example: 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.NetworkServiceListResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create one or multiple network services with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Create network services",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Array of network service creation requests",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.NetworkServiceCreateRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Network services created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.NetworkServicesCreatedResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/network-services/metadata-rules": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all setting rules for network services to determine which fields can be modified in the network service table.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Retrieve network service metadata rules",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved network service metadata rules",
                        "schema": {
                            "$ref": "#/definitions/dto.DtoSettingRuleListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/network-services/remove": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Remove network services",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ServiceRemoveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseCUD"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/network-services/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Query network service by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "get network service by id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.NetworkServiceResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/repository": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Refresh images list to repository",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. the following example will return data which city contains shzj001 or shzj002, or county contains shzj001 or shzj002., example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterContains",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city exactly matches shzj001 or shzj002, or county exactly matches shzj001 or shzj002., example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[\"city\",\"country\"]",
                        "description": "You can use the includeAttributes query parameter to include specific attributes in the response body. If this query parameter is present, only the specified attributes are returned. If it is missing, all attributes are returned by default. the following example will return data which includes default attributes + city + country., example: [\"city\",\"country\"]",
                        "name": "includeAttributes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[\"created_time,desc\",\"id,asc\"]",
                        "description": "Returns data that is sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: [\"created_time,desc\",\"id,asc\"]",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": " , example: 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": " , example: 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.RepositoryListResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/repository/remove": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Remove image from repository",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RepositoryImgRemoveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseCUD"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/repository/upload": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Upload image to repository",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Image file name",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Index of file's chunk",
                        "name": "chunkindex",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Total of file's chunk ",
                        "name": "chunktotal",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The size of file",
                        "name": "filesize",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The file type, options can be iso, firmware",
                        "name": "fileType",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "File content",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.RepositoryUploadResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/sites": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Query sites",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. the following example will return data which city contains shzj001 or shzj002, or county contains shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterContains",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city exactly matches shzj001 or shzj002, or county exactly matches shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that not matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city not match shzj001 or shzj002, or county not match shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterNotEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by name of site",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by site code",
                        "name": "siteCode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by status of site",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by geo of site",
                        "name": "geo",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by country of site",
                        "name": "country",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by province of site",
                        "name": "province",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by city of site",
                        "name": "city",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by sanity check status of site",
                        "name": "sanityCheckStatus",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by cluster of site",
                        "name": "cluster",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by cloud type of site",
                        "name": "cloudType",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[\"created_time,desc\",\"id,asc\"]",
                        "description": "returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: [\"created_time,desc\",\"id,asc\"]",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": " , example: 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": " , example: 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.SitesQueryResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create one or multiple sites with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Create new sites",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Array of site creation requests",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.SiteCreateRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Sites created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SitesCreatedResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/sites/metadata-rules": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all setting rules for sites to determine which fields can be modified in the site table.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Retrieve site metadata rules",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved site metadata rules",
                        "schema": {
                            "$ref": "#/definitions/dto.DtoSettingRuleListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/sites/remove": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Remove sites",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SitesRemoveRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseCUD"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/sites/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Query site by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id of site",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.SiteQueryResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/inventory/upload": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Upload a cloud setup file with excel format",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filename",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseCUD"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/licenses": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licenses"
                ],
                "summary": "Query licenses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. the following example will return data which city contains shzj001 or shzj002, or county contains shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterContains",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city exactly matches shzj001 or shzj002, or county exactly matches shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that not matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city not match shzj001 or shzj002, or county not match shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterNotEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by description of license",
                        "name": "description",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[\"created_time,desc\",\"id,asc\"]",
                        "description": "returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: [\"created_time,desc\",\"id,asc\"]",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": " , example: 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": " , example: 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.LicensesQueryResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/licenses/export": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licenses"
                ],
                "summary": "Export a license to file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "request body for export a license to file",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LicenseExportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {}
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/licenses/flavor/usage": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licenses"
                ],
                "summary": "Get the flavors usage of the license",
                "parameters": [
                    {
                        "type": "string",
                        "description": "filter by flavor ID, it is the first priority",
                        "name": "flavorID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by flavor name, it is the second priority",
                        "name": "FlavorName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by template ID, it is the third priority",
                        "name": "TemplateID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by template name, it is the fourth priority",
                        "name": "TemplateName",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.CloudServiceListResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/licenses/notification": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licenses"
                ],
                "summary": "Notify about expired license",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.LicenseNotificationResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/licenses/remove": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licenses"
                ],
                "summary": "Remove licenses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LicenseRemoveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.LicensesRemoveResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/licenses/upload": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licenses"
                ],
                "summary": "Upload a license key file",
                "parameters": [
                    {
                        "type": "file",
                        "description": "File",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.LicenseUploadResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/licenses/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licenses"
                ],
                "summary": "Query license by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id of license",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.LicenseQueryResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/loca/about": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Release"
                ],
                "summary": "Get version info",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.VersionResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/common.RestfulResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/plugins": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "Query plugins",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Returns data that contains a specific pattern.",
                        "name": "filterContains",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Returns data that exactly matches a specific pattern. ",
                        "name": "filterEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Returns data that not matches a specific pattern.",
                        "name": "filterNotEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by vendor",
                        "name": "vendor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by kind",
                        "name": "kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by flavor",
                        "name": "flavor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": " , example: 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": " , example: 0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[\"created_time,desc\",\"id,asc\"]",
                        "description": "returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: [\"created_time,desc\",\"id,asc\"]",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.PluginsResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "Enable a plugin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBase"
                        }
                    },
                    "400": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/plugins/delete": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "Remove a plugin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBase"
                        }
                    },
                    "400": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/plugins/flavors": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "Retrieves all available flavors that are filtered by license",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.FlavorsResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/plugins/flavors/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "Retrieves all flavors current LOC-A supported",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id of flavor",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.TemplateDefinitionResponse"
                        }
                    },
                    "400": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/plugins/templates/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "Get the template editing definition",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id of template",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.TemplateDefinitionResponse"
                        }
                    },
                    "400": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/plugins/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "Query plugin by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id of plugin",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.PluginResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/register/activity": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "REGISTER"
                ],
                "summary": "Create one activity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Register device to site",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.RegisterService"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/hpcgitlab_labs_lenovo_com_loc_backend_cmd_api_models.Activity"
                        }
                    },
                    "400": {
                        "description": "auth fail",
                        "schema": {}
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/secrets/credential-policies": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets"
                ],
                "summary": "Gets all credential policies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. the following example will return data which city contains shzj001 or shzj002, or county contains shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterContains",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city exactly matches shzj001 or shzj002, or county exactly matches shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "description": "Returns data that not matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. the following example will return data which city not match shzj001 or shzj002, or county not match shzj001 or shzj002, example: [{\"attributes\":\"city,country\",\"values\":\"shzj001,shzj002\"}]",
                        "name": "filterNotEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name of the policy",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "kind of the policy",
                        "name": "kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "approach of the policy",
                        "name": "approach",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "template of the policy",
                        "name": "template",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "[\"created_time,desc\",\"id,asc\"]",
                        "description": "returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: [\"created_time,desc\",\"id,asc\"]",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": " , example: 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": " , example: 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.CredentialpoliciesResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets"
                ],
                "summary": "Create credential policies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "create credential policies params",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CredentialPolicyCreateParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateCredentialpoliciesResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/secrets/credential-policies/remove": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets"
                ],
                "summary": "Update credential policies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Delete credential policy parameters, one of which must specify the credential policy id",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CredentialPolicyDeleteParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateCredentialpoliciesResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/secrets/credential-policies/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets"
                ],
                "summary": "Update credential policies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Update credential policy parameters, one of which must specify the credential policy id",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CredentialPolicyUpdateParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateCredentialpoliciesResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/secrets/credential-policies/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets"
                ],
                "summary": "Query a credential policy by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.CredentialPolicyResponse"
                        }
                    },
                    "400": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets"
                ],
                "summary": "Delete a credential policy by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateCredentialpoliciesResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/secrets/registered-vaults": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets"
                ],
                "summary": "Get all registered vaults details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list of registered vaults details",
                        "schema": {
                            "$ref": "#/definitions/dto.VaultServicesResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/secrets/secrets-file": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets"
                ],
                "summary": "Gets an encrypted file with all LOCA secrets from vault",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VaultSaveSecretsFile"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/secrets/under-path": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets"
                ],
                "summary": "Gets the list of secrets under a certain secret path",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VaultGetSecretUnderPath"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/secrets/vault/register": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets"
                ],
                "summary": "Register secret management vault service",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.VaultRegisterRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/secrets/vault/unregister": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets"
                ],
                "summary": "Unregister secret management vault service",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VaultUnregisterParams"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.WorkflowResponse"
                        }
                    },
                    "400": {
                        "description": "fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/secrets/vault/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets"
                ],
                "summary": "Register secret management vault service",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.VaultUpdateRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/sock": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sock"
                ],
                "summary": "Start a websocket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBase"
                        }
                    },
                    "400": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/sock/broadcast": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sock"
                ],
                "summary": "Broadcast to all websocket sessions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.SockMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBase"
                        }
                    },
                    "400": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/system/maintenance": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Maintenance"
                ],
                "summary": "Get current maintenance mode",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.QueryMaintenanceResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Maintenance"
                ],
                "summary": "Set maintenance mode",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "request body for setting maintenance mode",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateMaintenanceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateMaintenanceResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "503": {
                        "description": "service unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/task-management/tasks": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Task Management"
                ],
                "summary": "Get all tasks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Returns data that contains a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes contains any one of the specified patterns. The following example will return data which kind contains Deploy or Expand, or operation contains Deploy or Expand., example: [{\"attributes\":\"kind,operation\",\"values\":\"Deploy,Expand\"}]",
                        "name": "filterContains",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Returns data that exactly matches a specific pattern. Within the same filter query, data matches the query if the value of any one of the specified attributes exactly matches any one of the specified patterns. The following example will return data which kind exactly matches Deploy or Expand, or operation exactly matches Deploy or Expand, example: [{\"attributes\":\"kind,operation\",\"values\":\"Deploy,Expand\"}]",
                        "name": "filterEquals",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Returns data that sorted by specific rules. The following example sorts data first by created_time in descending order and then by id in ascending order., example: [\"created_time,desc\",\"id,asc\"]",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of returns, example: 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset, example: 0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "by name of task",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "by uuid of task",
                        "name": "uuid",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "by type of task",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "by action of task",
                        "name": "action",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "by status of task",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "by status of task",
                        "name": "job_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.TasksQryResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/task-management/tasks/{uuid}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Task Management"
                ],
                "summary": "Get task by uuid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.TaskQryResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Task Management"
                ],
                "summary": "Delete task with uuid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "task uuid",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteTaskResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/utilities/service-logs": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Utilities"
                ],
                "summary": "Generates the log collection archive.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer $token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LogCollectionParam"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "log file",
                        "schema": {
                            "$ref": "#/definitions/dto.FileResponse"
                        }
                    },
                    "400": {
                        "description": "auth fail",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "common.RestfulResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "controllers.ActResponseDto": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/hpcgitlab_labs_lenovo_com_loc_backend_cmd_api_models.Activity"
                    }
                }
            }
        },
        "controllers.VaultRegisterRequest": {
            "type": "object",
            "required": [
                "file"
            ],
            "properties": {
                "file": {
                    "$ref": "#/definitions/multipart.FileHeader"
                },
                "path": {
                    "type": "string"
                },
                "vault_api_params": {
                    "$ref": "#/definitions/models.VaultApiParams"
                }
            }
        },
        "controllers.VaultUpdateRequest": {
            "type": "object",
            "properties": {
                "file": {
                    "$ref": "#/definitions/multipart.FileHeader"
                },
                "path": {
                    "type": "string"
                },
                "vault_api_params": {
                    "$ref": "#/definitions/models.VaultUpdateApiParams"
                }
            }
        },
        "dto.AddDeviceDTO": {
            "type": "object",
            "properties": {
                "bmcCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DeviceCredential"
                    }
                },
                "ip": {
                    "type": "string"
                },
                "site": {
                    "type": "string"
                },
                "sn": {
                    "type": "string"
                },
                "uefiCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DeviceCredential"
                    }
                }
            }
        },
        "dto.AddDeviceParams": {
            "type": "object",
            "properties": {
                "gateway": {
                    "type": "string"
                },
                "register_info": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AddDeviceDTO"
                    }
                }
            }
        },
        "dto.AffinityItem": {
            "type": "object",
            "properties": {
                "allocationStrategy": {
                    "type": "string"
                },
                "extra": {
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "dto.CSRCreateParams": {
            "type": "object",
            "properties": {
                "common_name": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "locality": {
                    "type": "string"
                },
                "organization": {
                    "type": "string"
                },
                "organizational_unit": {
                    "type": "string"
                },
                "province": {
                    "type": "string"
                },
                "san_extensions": {
                    "$ref": "#/definitions/dto.CertSANs"
                }
            }
        },
        "dto.CertSANs": {
            "type": "object",
            "properties": {
                "dns_list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "email_list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ip_list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uri_list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.CertStatus": {
            "type": "object",
            "properties": {
                "crt": {
                    "type": "boolean"
                },
                "csr": {
                    "type": "boolean"
                }
            }
        },
        "dto.CertStatusResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.CertStatus"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.CloudServiceCreateRequest": {
            "type": "object",
            "required": [
                "connectionCheck",
                "name",
                "platformType",
                "role",
                "serviceAddress",
                "siteAssociation",
                "status"
            ],
            "properties": {
                "adminPassword": {
                    "type": "string"
                },
                "adminUser": {
                    "type": "string"
                },
                "connectionCheck": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "platformType": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "retries": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "serviceAddress": {
                    "type": "string"
                },
                "serviceSettings": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "siteAssociation": {
                    "type": "string"
                },
                "softwareVersion": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.CloudServiceCreatedListData": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CloudServiceListElement"
                    }
                }
            }
        },
        "dto.CloudServiceListData": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CloudServiceListElement"
                    }
                }
            }
        },
        "dto.CloudServiceListElement": {
            "type": "object",
            "properties": {
                "childServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "connectionCheck": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "credentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Credential"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "isDeployedByUsers": {
                    "type": "boolean"
                },
                "mongouuid": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentService": {
                    "type": "string"
                },
                "platformType": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "retries": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "roleReference": {
                    "type": "string"
                },
                "serviceAddress": {
                    "type": "string"
                },
                "siteAssociation": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "softwareVersion": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.CloudServiceListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.CloudServiceListData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.CloudServiceResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.CloudServiceSingleElement"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.CloudServiceSingleElement": {
            "type": "object",
            "properties": {
                "connectionCheck": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "credentialRule": {},
                "credentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Credential"
                    }
                },
                "id": {
                    "type": "string"
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isDeployedByUsers": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "platformType": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "retries": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "roleReference": {
                    "type": "string"
                },
                "serviceAddress": {
                    "type": "string"
                },
                "serviceSettings": {
                    "type": "object"
                },
                "siteAssociation": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "softwareVersion": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.CloudServiceUpdateRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "connectionCheck": {
                    "type": "boolean"
                },
                "credentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Credential"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "platformType": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "retries": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "serviceAddress": {
                    "type": "string"
                },
                "serviceSettings": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "siteAssociation": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "softwareVersion": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.CloudServicesCreatedResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.CloudServiceCreatedListData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.Condition": {
            "type": "object",
            "properties": {
                "field": {
                    "description": "Field the condition applies to",
                    "type": "string"
                },
                "operator": {
                    "description": "Comparison operator (e.g., \"==\", \"\u003e\", \"\u003c=\", etc.)",
                    "type": "string"
                },
                "value": {
                    "description": "Value to compare against"
                }
            }
        },
        "dto.CreateCredentialpolicies": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.CreateCredentialpoliciesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.CreateCredentialpolicies"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.CreateDeviceProfileElement": {
            "type": "object",
            "required": [
                "deviceModels",
                "flavor",
                "name"
            ],
            "properties": {
                "bmc": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "deviceModels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "flavor": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pattern": {
                    "type": "string"
                },
                "uefi": {
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "dto.CreateInstanceRequest": {
            "type": "object",
            "required": [
                "instances",
                "templateID"
            ],
            "properties": {
                "instances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.InstanceInfo"
                    }
                },
                "templateID": {
                    "type": "string"
                }
            }
        },
        "dto.CreateTemplateRequest": {
            "description": "the template metadata",
            "type": "object",
            "properties": {
                "description": {
                    "description": "the description of the template",
                    "type": "string"
                },
                "deviceProfileID": {
                    "description": "the device profile of the template",
                    "type": "string"
                },
                "devices": {
                    "description": "the device list of the template",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreateUpdateTemplateDevice"
                    }
                },
                "extraVars": {
                    "description": "the extra vars of the template(the key should be a string and the value can be any type)",
                    "type": "object",
                    "additionalProperties": true
                },
                "instanceInfo": {
                    "description": "Kind               string                         `json:\"kind\" swaggerignore:\"true\"`               // The kind of the template (os/cloud)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TemplateInstanceInfo"
                        }
                    ]
                },
                "kind": {
                    "description": "The kind of the template (os/cloud)",
                    "type": "string"
                },
                "name": {
                    "description": "the name of the template",
                    "type": "string"
                },
                "networking": {
                    "description": "the networking of the template",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.CreateUpdateTemplateNetworking"
                        }
                    ]
                }
            }
        },
        "dto.CreateUpdateTemplateCredential": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string"
                },
                "credentialPolicyID": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.CreateUpdateTemplateDevice": {
            "description": "The device template",
            "type": "object",
            "properties": {
                "filters": {
                    "description": "the device filters aims to screen registered devices for instance creation",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TemplateDeviceFilters"
                        }
                    ]
                },
                "cloudRole": {
                    "description": "the cloud roles",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "firmwarePackageID": {
                    "description": "the firmware details",
                    "type": "string"
                },
                "networkSettings": {
                    "$ref": "#/definitions/dto.CreateUpdateTemplateNetworkSettings"
                },
                "numberOfDevices": {
                    "description": "the required number of devices",
                    "type": "integer"
                },
                "osSettings": {
                    "description": "the os settings",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.CreateUpdateTemplateOsSettings"
                        }
                    ]
                }
            }
        },
        "dto.CreateUpdateTemplateNetwork": {
            "description": "The dns template",
            "type": "object",
            "properties": {
                "domain": {
                    "description": "the domain name template (e.g., {{site_code}}.{{province}}.{{country}}.customer.com)",
                    "type": "string"
                },
                "hostname": {
                    "description": "the host name template (e.g., ubuntu{{#}})",
                    "type": "string"
                }
            }
        },
        "dto.CreateUpdateTemplateNetworkSettings": {
            "type": "object",
            "properties": {
                "networkModel": {
                    "type": "string"
                }
            }
        },
        "dto.CreateUpdateTemplateNetworking": {
            "description": "The networking of the template",
            "type": "object",
            "properties": {
                "dns": {
                    "description": "the dns template of the networking",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.CreateUpdateTemplateNetwork"
                        }
                    ]
                }
            }
        },
        "dto.CreateUpdateTemplateOsSettings": {
            "description": "The device os settings",
            "type": "object",
            "properties": {
                "credentials": {
                    "description": "the credentials of the os",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreateUpdateTemplateCredential"
                    }
                }
            }
        },
        "dto.CreatedWorkflowDetails": {
            "type": "object",
            "properties": {
                "task_uuid": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "workflow": {
                    "type": "string"
                }
            }
        },
        "dto.CreatedWorkflowResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.CreatedWorkflowDetails"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.Credential": {
            "description": "The credential",
            "type": "object",
            "properties": {
                "approach": {
                    "description": "the approach of the credential",
                    "type": "string"
                },
                "credentialPolicy": {
                    "description": "the policy of the credential",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.CredentialPolicy"
                        }
                    ]
                },
                "kind": {
                    "description": "the kind of the credential",
                    "type": "string"
                },
                "password": {
                    "description": "the password of the credential",
                    "type": "string"
                },
                "username": {
                    "description": "the username of the credential",
                    "type": "string"
                }
            }
        },
        "dto.CredentialPolicy": {
            "description": "The policy of the credential",
            "type": "object",
            "properties": {
                "approach": {
                    "description": "the approach of the policy",
                    "type": "string"
                },
                "created_at": {
                    "description": "the creation time of the policy",
                    "type": "string"
                },
                "id": {
                    "description": "the id of the policy",
                    "type": "string"
                },
                "isBuiltin": {
                    "description": "true if this policy is a built-in policy",
                    "type": "boolean"
                },
                "kind": {
                    "description": "the kind of the policy",
                    "type": "string"
                },
                "name": {
                    "description": "the name of the policy",
                    "type": "string"
                },
                "passwordTemplate": {
                    "description": "the password template of the policy",
                    "type": "string"
                },
                "templates": {
                    "description": "the template id list of the policy",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "description": "the deletion time of the policy",
                    "type": "string"
                },
                "version": {
                    "description": "the version of the policy",
                    "type": "integer"
                }
            }
        },
        "dto.CredentialPolicyResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.CredentialPolicy"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.Credentialpolicies": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CredentialPolicy"
                    }
                }
            }
        },
        "dto.CredentialpoliciesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.Credentialpolicies"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.DCIMType": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isService": {
                    "type": "boolean"
                },
                "machineType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "serverFamily": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "vendor": {
                    "type": "string"
                }
            }
        },
        "dto.DeleteTaskResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.DeployInstancesRequest": {
            "type": "object",
            "properties": {
                "instances_name": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.Deployment": {
            "type": "object",
            "properties": {
                "associatedSites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cloudTemplates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DeploymentCloudTemplate"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "plannedSites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "settings": {
                    "$ref": "#/definitions/dto.DeploymentSettings"
                }
            }
        },
        "dto.DeploymentCloudTemplate": {
            "type": "object",
            "properties": {
                "flavor": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.DeploymentCreateParams": {
            "type": "object",
            "properties": {
                "associatedSites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cloudTemplates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "description": "a boolean `IsDefault` field is forbidden here in user interface, only created in the initDatabase",
                    "type": "string"
                },
                "settings": {
                    "$ref": "#/definitions/dto.DeploymentSettingsCreateParams"
                }
            }
        },
        "dto.DeploymentDetails": {
            "type": "object",
            "properties": {
                "authenticationType": {
                    "type": "string"
                },
                "cloudVersion": {
                    "type": "string"
                },
                "deviceModel": {
                    "type": "string"
                },
                "deviceProfile": {
                    "$ref": "#/definitions/dto.DeviceProfile"
                },
                "flavorName": {
                    "type": "string"
                },
                "nodesOfCluster": {
                    "type": "integer"
                },
                "numberOfSites": {
                    "type": "integer"
                },
                "templateName": {
                    "type": "string"
                }
            }
        },
        "dto.DeploymentList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Deployment"
                    }
                }
            }
        },
        "dto.DeploymentQryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.Deployment"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.DeploymentRemoveParams": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.DeploymentRemoveResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.DeploymentSettings": {
            "type": "object",
            "properties": {
                "autoDeploy": {
                    "type": "boolean"
                }
            }
        },
        "dto.DeploymentSettingsCreateParams": {
            "type": "object",
            "properties": {
                "autoDeploy": {
                    "type": "boolean"
                }
            }
        },
        "dto.DeploymentSettingsUpdateParams": {
            "type": "object",
            "properties": {
                "autoDeploy": {
                    "type": "boolean"
                }
            }
        },
        "dto.DeploymentUpdateParams": {
            "type": "object",
            "properties": {
                "associatedSites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cloudTemplates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "settings": {
                    "$ref": "#/definitions/dto.DeploymentSettingsUpdateParams"
                }
            }
        },
        "dto.DeploymentsQryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.DeploymentList"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.Detail": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "elapsed": {
                    "type": "number"
                },
                "failed": {
                    "type": "boolean"
                },
                "finished": {
                    "type": "string"
                },
                "jobtype": {
                    "type": "string"
                },
                "launchtype": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "started": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.DeviceCredential": {
            "type": "object",
            "properties": {
                "credentialPolicyID": {
                    "type": "string"
                },
                "currentPassword": {
                    "type": "string"
                },
                "newPassword": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.DeviceListData": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DeviceListElement"
                    }
                }
            }
        },
        "dto.DeviceListElement": {
            "type": "object",
            "properties": {
                "connectivityCheckResult": {},
                "contact": {
                    "type": "string"
                },
                "coresNumber": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "credentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Credential"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceRole": {
                    "type": "string"
                },
                "deviceType": {
                    "$ref": "#/definitions/dto.DCIMType"
                },
                "diskSpace": {
                    "type": "string"
                },
                "editable": {
                    "type": "boolean"
                },
                "gpuCount": {
                    "type": "string"
                },
                "hostdomain": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                },
                "managedBy": {
                    "type": "string"
                },
                "mongouuid": {
                    "type": "string"
                },
                "nicBandwidth": {
                    "type": "string"
                },
                "nics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.NIC"
                    }
                },
                "platform": {
                    "type": "string"
                },
                "primaryIP": {
                    "type": "string"
                },
                "ramAmount": {
                    "type": "string"
                },
                "serialNumber": {
                    "type": "string"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "sideload": {
                    "$ref": "#/definitions/dto.Sideload"
                },
                "site": {
                    "type": "string"
                },
                "sockets": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.DeviceListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.DeviceListData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.DeviceProfile": {
            "description": "The device profile",
            "type": "object",
            "properties": {
                "bmc": {
                    "description": "the bmc config of the device profile",
                    "type": "object",
                    "additionalProperties": {}
                },
                "created_at": {
                    "description": "the creation time of the device profile",
                    "type": "string"
                },
                "deviceModels": {
                    "description": "the device models of the device profile",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "flavor": {
                    "description": "the flavor name of the device profile",
                    "type": "string"
                },
                "id": {
                    "description": "the id of the device profile",
                    "type": "string"
                },
                "name": {
                    "description": "the name of the device profile",
                    "type": "string"
                },
                "pattern": {
                    "description": "the pattern of the device profile",
                    "type": "string"
                },
                "template": {
                    "description": "the template list of the device profile",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uefi": {
                    "description": "the uefi config of the device profile",
                    "type": "object",
                    "additionalProperties": {}
                },
                "updated_at": {
                    "description": "the deletion time of the device profile",
                    "type": "string"
                }
            }
        },
        "dto.DeviceProfileElement": {
            "type": "object",
            "properties": {
                "alerts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bmc": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "created_at": {
                    "type": "string"
                },
                "deviceModels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "flavor": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pattern": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "template": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uefi": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.DeviceProfileListData": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DeviceProfileElement"
                    }
                }
            }
        },
        "dto.DeviceProfileListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.DeviceProfileListData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.DeviceProfileResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.DeviceProfileElement"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.DeviceResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.DeviceListElement"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.DeviceUpdateParams": {
            "type": "object",
            "properties": {
                "settings": {
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "dto.DeviceUpdateResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.DiscoverDeviceParams": {
            "type": "object",
            "properties": {
                "TaskUUID": {
                    "type": "string"
                },
                "bmc_discovery_method": {
                    "type": "string",
                    "enum": [
                        "L2",
                        "L3"
                    ]
                },
                "reserved_ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "site": {
                    "type": "string"
                }
            }
        },
        "dto.DiscoverDevicesData": {
            "type": "object",
            "properties": {
                "discovered_devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DiscoveredDevicesElement"
                    }
                },
                "reserved_ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.DiscoverDevicesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.DiscoverDevicesData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.DiscoveredDevicesElement": {
            "type": "object",
            "properties": {
                "currentIPAddresses": {
                    "type": "string"
                },
                "macAddress": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "node": {
                    "type": "string"
                },
                "serial": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.DtoSettingRule": {
            "type": "object",
            "properties": {
                "defaultValue": {},
                "displayName": {
                    "type": "string"
                },
                "enum": {
                    "type": "array",
                    "items": {}
                },
                "example": {},
                "format": {
                    "type": "string"
                },
                "formatExpression": {
                    "type": "string"
                },
                "itemType": {
                    "type": "object"
                },
                "limitations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Limitation"
                    }
                },
                "model": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "optional": {
                    "type": "boolean"
                },
                "paramType": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "readOnly": {
                    "type": "boolean"
                },
                "requiredForDeployment": {
                    "type": "boolean"
                },
                "toolTip": {
                    "type": "string"
                }
            }
        },
        "dto.DtoSettingRuleListData": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DtoSettingRule"
                    }
                }
            }
        },
        "dto.DtoSettingRuleListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.DtoSettingRuleListData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.ErrResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.ExtraVarItem": {
            "description": "The extra var",
            "type": "object",
            "properties": {
                "displayName": {
                    "description": "the display name",
                    "type": "string"
                },
                "value": {
                    "description": "the value"
                }
            }
        },
        "dto.FileResponse": {
            "type": "object",
            "properties": {
                "body": {
                    "description": "in: body",
                    "type": "object",
                    "properties": {
                        "file": {
                            "description": "File data",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                }
            }
        },
        "dto.Flavor": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "versions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.Flavors": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Flavor"
                    }
                }
            }
        },
        "dto.FlavorsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.Flavors"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.HardwareDetail": {
            "type": "object",
            "properties": {
                "bmcIPAddress": {
                    "type": "string"
                },
                "bmcMACAddress": {
                    "type": "string"
                },
                "credentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Credential"
                    }
                },
                "deviceID": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "hostFQDN": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.NetworkSettings"
                    }
                },
                "machineType": {
                    "type": "string"
                },
                "mongouuid": {
                    "type": "string"
                },
                "osVersion": {
                    "type": "string"
                },
                "serialNumber": {
                    "type": "string"
                },
                "serverFamily": {
                    "type": "string"
                },
                "serverModel": {
                    "type": "string"
                },
                "settings": {
                    "type": "string"
                },
                "settingsVaultInternalSecretPath": {
                    "type": "string"
                },
                "vaultCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.VaultCredential"
                    }
                },
                "vaultInternalSecretPath": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "warnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.IPRangeCreateRequest": {
            "type": "object",
            "required": [
                "name",
                "prefix",
                "role",
                "siteAssociation"
            ],
            "properties": {
                "allocationStrategy": {
                    "type": "string"
                },
                "endAddress": {
                    "type": "string"
                },
                "gateway": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "siteAssociation": {
                    "type": "string"
                },
                "startAddress": {
                    "type": "string"
                },
                "vlan": {
                    "type": "string"
                }
            }
        },
        "dto.IPRangeCreatedListData": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.IPRangeListElement"
                    }
                }
            }
        },
        "dto.IPRangeListData": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.IPRangeListElement"
                    }
                }
            }
        },
        "dto.IPRangeListElement": {
            "type": "object",
            "properties": {
                "allocationStrategy": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "endAddress": {
                    "type": "string"
                },
                "gateway": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "netmask": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "siteAssociation": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "size": {
                    "type": "integer"
                },
                "startAddress": {
                    "type": "string"
                },
                "subnet": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "vlan": {
                    "type": "string"
                }
            }
        },
        "dto.IPRangeListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.IPRangeListData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.IPRangeRemoveRequest": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.IPRangeResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.IPRangeListElement"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.IPRangeWithRole": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/dto.AffinityItem"
                }
            }
        },
        "dto.IPRangesCreatedResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.IPRangeCreatedListData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.Instance": {
            "type": "object",
            "properties": {
                "cloudNetworks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/dto.Network"
                    }
                },
                "cloudServices": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/dto.Service"
                        }
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "deviceProfile": {
                    "$ref": "#/definitions/dto.DeviceProfile"
                },
                "extraVars": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "extraVarsVaultInternalSecretPath": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "flavor": {
                    "type": "string"
                },
                "flavorVersion": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "networkServices": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/dto.Service"
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Node"
                    }
                },
                "operation": {
                    "type": "string"
                },
                "site": {
                    "type": "string"
                },
                "stage": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "template": {
                    "$ref": "#/definitions/dto.Template"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.InstanceCreatedListData": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Instance"
                    }
                }
            }
        },
        "dto.InstanceInList": {
            "type": "object",
            "properties": {
                "credentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.InstanceInListCredential"
                    }
                },
                "flavor": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "numberOfNodes": {
                    "type": "integer"
                },
                "operation": {
                    "type": "string"
                },
                "operation_errors": {},
                "site": {
                    "type": "string"
                },
                "stage": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.InstanceInListCredential": {
            "type": "object",
            "properties": {
                "credentials": {},
                "subInstanceName": {
                    "type": "string"
                }
            }
        },
        "dto.InstanceInfo": {
            "type": "object",
            "required": [
                "siteID"
            ],
            "properties": {
                "devices": {
                    "description": "1. if the flavor is os type, only the first one will be used. If not input any device, will auto select suitable device from device list.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "siteID": {
                    "type": "string"
                }
            }
        },
        "dto.InstanceList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.InstanceInList"
                    }
                }
            }
        },
        "dto.InstancePlanning": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deploymentDetails": {
                    "$ref": "#/definitions/dto.DeploymentDetails"
                },
                "deploymentExtra": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "extraVarsVaultInternalSecretPath": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "instanceSummary": {
                    "$ref": "#/definitions/dto.InstanceSummary"
                },
                "kind": {
                    "type": "string"
                },
                "operation": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.InstancePlanningList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.InstancePlanning"
                    }
                }
            }
        },
        "dto.InstancePlanningsQryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.InstancePlanningList"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.InstanceQryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.Instance"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.InstanceSummary": {
            "type": "object",
            "properties": {
                "cloudServices": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "hardwareDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.HardwareDetail"
                    }
                },
                "instanceName": {
                    "type": "string"
                },
                "networkDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.NetworkDetail"
                    }
                },
                "networkServices": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "siteName": {
                    "type": "string"
                }
            }
        },
        "dto.InstancesCreatedResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.InstanceCreatedListData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.InstancesQryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.InstanceList"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.Ipaddress": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "assignedObject": {
                    "type": "string"
                },
                "assignedObjectType": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ipRange": {
                    "type": "string"
                },
                "netmask": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "site": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "vrf": {
                    "type": "string"
                }
            }
        },
        "dto.LdapCert": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "filename": {
                    "type": "string"
                }
            }
        },
        "dto.LdapConfig": {
            "type": "object",
            "properties": {
                "bind_password": {
                    "type": "string"
                },
                "bind_username": {
                    "type": "string"
                },
                "group_filter": {
                    "type": "string"
                },
                "group_search_attribute": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "local_role": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "root_dn": {
                    "type": "string"
                },
                "uris": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.LdapUri"
                    }
                },
                "user_filter": {
                    "type": "string"
                },
                "user_search_attribute": {
                    "type": "string"
                }
            }
        },
        "dto.LdapConfigQueryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.LdapConfig"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.LdapUri": {
            "type": "object",
            "properties": {
                "cert_files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.LdapCert"
                    }
                },
                "host": {
                    "type": "string"
                },
                "insecure_skip_verify": {
                    "type": "boolean"
                },
                "port": {
                    "type": "string"
                },
                "tls_enable": {
                    "type": "boolean"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "dto.LdapValidateResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.License": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "endTime": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.LicenseExportRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "dto.LicenseListData": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.License"
                    }
                }
            }
        },
        "dto.LicenseMsg": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.LicenseNotification": {
            "type": "object",
            "properties": {
                "compliant": {
                    "type": "boolean"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.LicenseMsg"
                    }
                }
            }
        },
        "dto.LicenseNotificationResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.LicenseNotification"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.LicenseQueryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.License"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.LicenseRemoveRequest": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.LicenseUploadResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.License"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.LicensesQueryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.LicenseListData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.LicensesRemoveResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.Limitation": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Condition"
                    }
                },
                "conditionsLogic": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.LogCollectionParam": {
            "type": "object",
            "properties": {
                "system_type": {
                    "description": "values from const above",
                    "type": "string"
                },
                "task_uuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.MiniImage": {
            "type": "object",
            "properties": {
                "created_by": {
                    "type": "string"
                },
                "created_time": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "expire_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "link": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password_policy": {
                    "type": "object",
                    "properties": {
                        "bmc": {
                            "type": "string"
                        },
                        "uefi": {
                            "type": "string"
                        }
                    }
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.MiniImageList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.MiniImage"
                    }
                }
            }
        },
        "dto.MiniImagesQryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.MiniImageList"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.NIC": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "ipaddress": {
                    "$ref": "#/definitions/dto.Ipaddress"
                },
                "kind": {
                    "type": "string"
                },
                "macAddress": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pciPort": {
                    "type": "string"
                },
                "vlan": {
                    "type": "string"
                }
            }
        },
        "dto.Network": {
            "type": "object",
            "properties": {
                "addressEnd": {
                    "type": "string"
                },
                "addressStart": {
                    "type": "string"
                },
                "flavorExtraIPs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gateway": {
                    "type": "string"
                },
                "netmask": {
                    "type": "string"
                },
                "prefix": {
                    "type": "integer"
                },
                "subnet": {
                    "type": "string"
                },
                "vlan": {
                    "type": "string"
                }
            }
        },
        "dto.NetworkDetail": {
            "type": "object",
            "properties": {
                "endIPAddress": {
                    "type": "string"
                },
                "flavorExtraIPs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gateway": {
                    "type": "string"
                },
                "ipRangeID": {
                    "type": "string"
                },
                "ipRangeName": {
                    "type": "string"
                },
                "netmask": {
                    "type": "integer"
                },
                "networkRole": {
                    "type": "string"
                },
                "numberOfReservedIPs": {
                    "type": "integer"
                },
                "startIPAddress": {
                    "type": "string"
                },
                "subnet": {
                    "type": "string"
                },
                "vlan": {
                    "type": "string"
                }
            }
        },
        "dto.NetworkServiceCreateRequest": {
            "type": "object",
            "required": [
                "connectionCheck",
                "name",
                "role",
                "serviceAddress",
                "siteAssociation"
            ],
            "properties": {
                "connectionCheck": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "retries": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "serviceAddress": {
                    "type": "string"
                },
                "siteAssociation": {
                    "type": "string"
                }
            }
        },
        "dto.NetworkServiceCreatedListData": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.NetworkServiceListElement"
                    }
                }
            }
        },
        "dto.NetworkServiceListData": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.NetworkServiceListElement"
                    }
                }
            }
        },
        "dto.NetworkServiceListElement": {
            "type": "object",
            "properties": {
                "childServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "connectionCheck": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mongouuid": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentService": {
                    "type": "string"
                },
                "platformType": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "retries": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "roleReference": {
                    "type": "string"
                },
                "serviceAddress": {
                    "type": "string"
                },
                "siteAssociation": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "softwareVersion": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.NetworkServiceListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.NetworkServiceListData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.NetworkServiceResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.NetworkServiceSingleElement"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.NetworkServiceSingleElement": {
            "type": "object",
            "properties": {
                "childServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "connectionCheck": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mongouuid": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentService": {
                    "type": "string"
                },
                "platformType": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "retries": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "roleReference": {
                    "type": "string"
                },
                "serviceAddress": {
                    "type": "string"
                },
                "siteAssociation": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "softwareVersion": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.NetworkServicesCreatedResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.NetworkServiceCreatedListData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.NetworkSettings": {
            "type": "object",
            "properties": {
                "ipv4Addr": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "netmask": {
                    "type": "integer"
                },
                "nic": {
                    "type": "string"
                }
            }
        },
        "dto.Node": {
            "type": "object",
            "properties": {
                "credentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Credential"
                    }
                },
                "fqdn": {
                    "type": "string"
                },
                "hostDomain": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "machineType": {
                    "type": "string"
                },
                "networks": {
                    "$ref": "#/definitions/dto.OSNetwork"
                },
                "osVersion": {
                    "type": "string"
                },
                "serialNumber": {
                    "type": "string"
                },
                "serverModel": {
                    "type": "string"
                },
                "settings": {
                    "type": "string"
                },
                "vaultCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.VaultCredential"
                    }
                }
            }
        },
        "dto.OSNetwork": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/dto.NetworkSettings"
            }
        },
        "dto.Plugin": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "flavor": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "index": {
                    "type": "string"
                },
                "isBuiltIn": {
                    "type": "boolean"
                },
                "isDeleted": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "supportOsDeploy": {
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                },
                "vendor": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "dto.PluginResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.Plugin"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.Plugins": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Plugin"
                    }
                }
            }
        },
        "dto.PluginsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.Plugins"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.QueryMaintenanceResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.QueryMaintenanceResponseData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.QueryMaintenanceResponseData": {
            "type": "object",
            "properties": {
                "isMaintaining": {
                    "type": "boolean"
                }
            }
        },
        "dto.Readiness": {
            "type": "object",
            "properties": {
                "alerts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "availableIPsSize": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "hardwareDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.HardwareDetail"
                    }
                },
                "id": {
                    "type": "string"
                },
                "maximumDevices": {
                    "type": "integer"
                },
                "networkDetails": {
                    "description": "only used for deployment planning",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.NetworkDetail"
                    }
                },
                "operation": {
                    "type": "string"
                },
                "readiness": {
                    "type": "string"
                },
                "site": {
                    "$ref": "#/definitions/dto.ReadinessSite"
                },
                "template": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.ReadinessList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Readiness"
                    }
                }
            }
        },
        "dto.ReadinessSite": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "geo": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "province": {
                    "type": "string"
                },
                "siteCode": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.ReadinessesQryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.ReadinessList"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.RemoveTemplateRequest": {
            "description": "The request body for the template deletion request",
            "type": "object",
            "properties": {
                "templateName": {
                    "description": "the template name list",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.RepositoryImg": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.RepositoryImgRemoveRequest": {
            "type": "object",
            "properties": {
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.RepositoryImg"
                    }
                }
            }
        },
        "dto.RepositoryListData": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.RepositoryListElement"
                    }
                }
            }
        },
        "dto.RepositoryListElement": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "details": {},
                "id": {
                    "type": "string"
                },
                "mapping_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "dto.RepositoryListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.RepositoryListData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.RepositoryUploadResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.ResponseBase": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.ResponseCUD": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.TaskResponseData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.SanityCheckSummary": {
            "type": "object",
            "properties": {
                "alert": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isOK": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.Service": {
            "type": "object",
            "properties": {
                "childServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "connectionCheck": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "credentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Credential"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isDeployedByUsers": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ServiceNetwork"
                    }
                },
                "parentService": {
                    "type": "string"
                },
                "platformType": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "readOnly": {
                    "type": "boolean"
                },
                "retries": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "roleReference": {
                    "type": "string"
                },
                "serviceAddress": {
                    "type": "string"
                },
                "serviceSettings": {
                    "type": "string"
                },
                "siteAssociation": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "softwareVersion": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "vaultCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.VaultCredential"
                    }
                },
                "vaultInternalSecretPath": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "vaultMountPath": {
                    "type": "string"
                },
                "vaultSPTemplates": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "vaultSecretPath": {
                    "type": "string"
                },
                "vaultSecretTemplate": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "vaultUpdate": {
                    "type": "boolean"
                }
            }
        },
        "dto.ServiceAffinityItem": {
            "type": "object",
            "properties": {
                "allocationStrategy": {
                    "type": "string"
                },
                "extra": {
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "dto.ServiceItemWithRole": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/dto.ServiceAffinityItem"
                }
            }
        },
        "dto.ServiceNetwork": {
            "type": "object",
            "properties": {
                "ipv4Address": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.ServiceRemoveRequest": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.Sideload": {
            "type": "object",
            "properties": {
                "profile": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "dto.Site": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "cloudServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ServiceAffinityItem"
                    }
                },
                "cloudType": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "customServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ServiceAffinityItem"
                    }
                },
                "description": {
                    "type": "string"
                },
                "dns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ServiceAffinityItem"
                    }
                },
                "geo": {
                    "type": "string"
                },
                "gpsCoordinates": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ipranges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SiteIpranges"
                    }
                },
                "name": {
                    "type": "string"
                },
                "ntp": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ServiceAffinityItem"
                    }
                },
                "postCode": {
                    "type": "string"
                },
                "province": {
                    "type": "string"
                },
                "proxyServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ServiceAffinityItem"
                    }
                },
                "siteCode": {
                    "type": "string"
                },
                "timeZone": {
                    "type": "string"
                }
            }
        },
        "dto.SiteCreateRequest": {
            "type": "object",
            "required": [
                "city",
                "cloudType",
                "country",
                "geo",
                "name",
                "province",
                "siteCode"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "cloudType": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "geo": {
                    "type": "string"
                },
                "gpsCoordinates": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "postCode": {
                    "type": "string"
                },
                "province": {
                    "type": "string"
                },
                "siteCode": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                }
            }
        },
        "dto.SiteCreatedListData": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Sites"
                    }
                }
            }
        },
        "dto.SiteIpranges": {
            "type": "object",
            "properties": {
                "allocationStrategy": {
                    "type": "string"
                },
                "endAddress": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "startAddress": {
                    "type": "string"
                }
            }
        },
        "dto.SiteListData": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Sites"
                    }
                }
            }
        },
        "dto.SiteQueryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.Site"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.Sites": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "cloudServicesAffinityQ": {
                    "$ref": "#/definitions/dto.ServiceItemWithRole"
                },
                "cloudType": {
                    "type": "string"
                },
                "cluster": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "customServicesAffinityQ": {
                    "$ref": "#/definitions/dto.ServiceItemWithRole"
                },
                "description": {
                    "type": "string"
                },
                "geo": {
                    "type": "string"
                },
                "gpsCoordinates": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ipRangesAffinityQ": {
                    "$ref": "#/definitions/dto.IPRangeWithRole"
                },
                "name": {
                    "type": "string"
                },
                "networkServicesAffinityQ": {
                    "$ref": "#/definitions/dto.ServiceItemWithRole"
                },
                "postCode": {
                    "type": "string"
                },
                "province": {
                    "type": "string"
                },
                "sanityCheckStatus": {
                    "type": "string"
                },
                "sanityCheckSummary": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SanityCheckSummary"
                    }
                },
                "siteCode": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.SitesCreatedResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.SiteCreatedListData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.SitesQueryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.SiteListData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.SitesRemoveRequest": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.Task": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Detail"
                    }
                },
                "executor": {
                    "type": "string"
                },
                "go_workflow_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "job_id": {
                    "type": "number"
                },
                "mode": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "output": {
                    "type": "object"
                },
                "params": {
                    "type": "object"
                },
                "progress": {
                    "type": "string"
                },
                "schedule_time": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "stop_time": {
                    "type": "string"
                },
                "targets": {},
                "type": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.TaskInList": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Detail"
                    }
                },
                "executor": {
                    "type": "string"
                },
                "go_workflow_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "job_id": {
                    "type": "number"
                },
                "mode": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "output": {
                    "type": "object"
                },
                "params": {
                    "type": "object"
                },
                "progress": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "stop_time": {
                    "type": "string"
                },
                "targets": {},
                "type": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.TaskList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TaskInList"
                    }
                }
            }
        },
        "dto.TaskQryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.Task"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.TaskResponseData": {
            "type": "object",
            "properties": {
                "task_uuid": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "workflow": {
                    "type": "string"
                }
            }
        },
        "dto.TasksQryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.TaskList"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.Template": {
            "description": "the template metadata",
            "type": "object",
            "properties": {
                "alerts": {
                    "description": "the alerts of the template",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "description": "the creation time of the template",
                    "type": "string"
                },
                "description": {
                    "description": "the description of the template",
                    "type": "string"
                },
                "deviceProfile": {
                    "description": "the device profile of the template",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.DeviceProfile"
                        }
                    ]
                },
                "devices": {
                    "description": "the device list of the template",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TemplateDevice"
                    }
                },
                "extraVars": {
                    "description": "the extra vars of the template(the key should be a string and the value can be any type)  //Sorin TBD.....",
                    "type": "object",
                    "additionalProperties": {}
                },
                "extraVarsVaultInternalSecretPath": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extraVarsWithDisplayName": {
                    "description": "the extra vars of the template with the display names",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/dto.ExtraVarItem"
                    }
                },
                "id": {
                    "description": "the id of the template",
                    "type": "string"
                },
                "instanceInfo": {
                    "description": "the instance info of the template",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TemplateInstanceInfo"
                        }
                    ]
                },
                "instances": {
                    "description": "the instance list refers to this template",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "kind": {
                    "description": "The kind of the template (os/cloud)",
                    "type": "string"
                },
                "name": {
                    "description": "the name of the template",
                    "type": "string"
                },
                "networking": {
                    "description": "the networking of the template",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TemplateNetworking"
                        }
                    ]
                },
                "status": {
                    "description": "the status of the template",
                    "type": "string"
                },
                "updated_at": {
                    "description": "the updation time of the template",
                    "type": "string"
                }
            }
        },
        "dto.TemplateDNS": {
            "description": "The dns template",
            "type": "object",
            "properties": {
                "domain": {
                    "description": "the domain name template (e.g., {{site_code}}.{{province}}.{{country}}.customer.com)",
                    "type": "string"
                },
                "hostFQDN": {
                    "description": "the fqdn template (e.g., ubuntu{{#}}.{{site_code}}.{{province}}.{{country}}.customer.com)",
                    "type": "string"
                },
                "hostname": {
                    "description": "the host name template (e.g., ubuntu{{#}})",
                    "type": "string"
                }
            }
        },
        "dto.TemplateDefinitionResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.TemplateDevice": {
            "description": "The device template",
            "type": "object",
            "properties": {
                "filters": {
                    "description": "the device filters aims to screen registered devices for instance creation",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TemplateDeviceFilters"
                        }
                    ]
                },
                "firmware": {
                    "description": "the firmware details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TemplateDeviceFirmware"
                        }
                    ]
                },
                "numberOfDevices": {
                    "description": "the required number of devices",
                    "type": "integer"
                },
                "osSettings": {
                    "description": "the os settings",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TemplateOsSettings"
                        }
                    ]
                }
            }
        },
        "dto.TemplateDeviceFilters": {
            "description": "The device filters",
            "type": "object",
            "properties": {
                "model": {
                    "description": "the device model filters",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.TemplateDeviceFirmware": {
            "description": "The device firmware",
            "type": "object",
            "properties": {
                "name": {
                    "description": "the name of the device firmware",
                    "type": "string"
                },
                "type": {
                    "description": "the type of the device firmware",
                    "type": "string"
                }
            }
        },
        "dto.TemplateFlavorOptions": {
            "description": "The flavor options of the instance info",
            "type": "object",
            "properties": {
                "osVersion": {
                    "description": "the os version",
                    "type": "string"
                },
                "version": {
                    "description": "the flavor version",
                    "type": "string"
                }
            }
        },
        "dto.TemplateInstanceInfo": {
            "description": "The instance info of the template",
            "type": "object",
            "properties": {
                "flavor": {
                    "description": "the favor name of the instance info",
                    "type": "string"
                },
                "flavorOptions": {
                    "description": "the flavor options of the instance info",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TemplateFlavorOptions"
                        }
                    ]
                },
                "name": {
                    "description": "the name template of the instance info (e.g., ubuntu{{#}}.{{site_code}}.{{province}}.{{country}}.customer.com)",
                    "type": "string"
                }
            }
        },
        "dto.TemplateList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Template"
                    }
                }
            }
        },
        "dto.TemplateNetworking": {
            "description": "The networking of the template",
            "type": "object",
            "properties": {
                "dns": {
                    "description": "the dns template of the networking",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TemplateDNS"
                        }
                    ]
                }
            }
        },
        "dto.TemplateOsSettings": {
            "description": "The device os settings",
            "type": "object",
            "properties": {
                "credentials": {
                    "description": "the credentials of the os",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Credential"
                    }
                },
                "vaultCredentials": {
                    "description": "the vault credentials of the os",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.VaultCredential"
                    }
                },
                "vaultInternalSecretPath": {
                    "description": "the vault credential secret paths of the os",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.TemplateQryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.Template"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.TemplatesQryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.TemplateList"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.UpdateCredentialpolicies": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateCredentialpoliciesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.UpdateCredentialpolicies"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.UpdateDeviceProfileElement": {
            "type": "object",
            "properties": {
                "bmc": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "deviceModels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "uefi": {
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "dto.UpdateMaintenanceRequest": {
            "type": "object",
            "properties": {
                "isMaintaining": {
                    "type": "boolean"
                }
            }
        },
        "dto.UpdateMaintenanceResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.UpdateMaintenanceResponseData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.UpdateMaintenanceResponseData": {
            "type": "object",
            "properties": {
                "affectedImages": {
                    "type": "integer"
                },
                "hasExpired": {
                    "type": "boolean"
                }
            }
        },
        "dto.UpdateTemplateInstanceInfo": {
            "type": "object",
            "properties": {
                "flavorOptions": {
                    "description": "the flavor options of the instance info",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TemplateFlavorOptions"
                        }
                    ]
                },
                "name": {
                    "description": "the name template of the instance info (e.g., ubuntu{{#}}.{{site_code}}.{{province}}.{{country}}.customer.com)",
                    "type": "string"
                }
            }
        },
        "dto.UpdateTemplateRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "description": {
                    "description": "the description of the template",
                    "type": "string"
                },
                "deviceProfileID": {
                    "description": "the device profile of the template",
                    "type": "string"
                },
                "devices": {
                    "description": "the device list of the template",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreateUpdateTemplateDevice"
                    }
                },
                "extraVars": {
                    "description": "the extra vars of the template(the key should be a string and the value can be any type)",
                    "type": "object",
                    "additionalProperties": true
                },
                "id": {
                    "type": "string"
                },
                "instanceInfo": {
                    "description": "Devices            []*UpdateTemplateDevice        `json:\"devices\"`                                 // the device list of the template\n\tKind               string                         `json:\"kind\" swaggerignore:\"true\"`               // The kind of the template (os/cloud)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.UpdateTemplateInstanceInfo"
                        }
                    ]
                },
                "name": {
                    "description": "the name of the template",
                    "type": "string"
                },
                "networking": {
                    "description": "the networking of the template",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.CreateUpdateTemplateNetworking"
                        }
                    ]
                }
            }
        },
        "dto.UserChangePasswordRequest": {
            "type": "object",
            "required": [
                "name",
                "new_password",
                "password"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string",
                    "maxLength": 256,
                    "minLength": 8
                },
                "password": {
                    "type": "string",
                    "maxLength": 256,
                    "minLength": 8
                }
            }
        },
        "dto.UserCreateReponseData": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.UserCreateRequest": {
            "type": "object",
            "required": [
                "name",
                "password"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 3
                },
                "password": {
                    "type": "string",
                    "maxLength": 256,
                    "minLength": 8
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "dto.UserCreateResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.UserCreateReponseData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.UserListData": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserResponseData"
                    }
                }
            }
        },
        "dto.UserListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.UserListData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.UserLoginRequest": {
            "type": "object",
            "required": [
                "name",
                "password"
            ],
            "properties": {
                "_id": {
                    "type": "string"
                },
                "expiration_period": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 3
                },
                "new_password": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 256,
                    "minLength": 5
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "dto.UserLoginResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "token": {
                            "type": "string"
                        },
                        "refresh_token": {
                            "type": "string"
                        }
                    }
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.UserLogoutRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.UserLogoutResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.UserLogoutResponseData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.UserLogoutResponseData": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "msg": {}
            }
        },
        "dto.UserManage": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "login_priority": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.UserManageResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.UserManage"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.UserRefreshTokenResponse": {
            "properties": {
                "data": {
                    "properties": {
                        "access_token": {
                            "type": "string"
                        },
                        "refresh_token": {
                            "type": "string"
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.UserResponseData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.UserResponseData": {
            "type": "object",
            "properties": {
                "created_time": {
                    "type": "string"
                },
                "expiration_period": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "update_time": {
                    "type": "string"
                }
            }
        },
        "dto.UserUpdateRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 3
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "dto.UserUpdateResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.UserResponseData"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.VaultCredential": {
            "description": "The vault credential",
            "type": "object",
            "properties": {
                "ctUser": {
                    "description": "true if only password read from vault and username provided in clear text",
                    "type": "boolean"
                },
                "enable": {
                    "description": "true if this vault credential is enabled",
                    "type": "boolean"
                },
                "manual": {
                    "description": "true if the secret path provided manually",
                    "type": "boolean"
                },
                "name": {
                    "description": "the name of the vault credential",
                    "type": "string"
                },
                "secretPath": {
                    "description": "the secret path of the vault credential",
                    "type": "string"
                }
            }
        },
        "dto.VaultService": {
            "type": "object",
            "properties": {
                "credentials": {
                    "description": "type Service struct -\u003e Credentials",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/hpcgitlab_labs_lenovo_com_loc_backend_cmd_api_models.Credential"
                    }
                },
                "description": {
                    "description": "type Service struct -\u003e Description",
                    "type": "string"
                },
                "name": {
                    "description": "type Service struct -\u003e Name",
                    "type": "string"
                },
                "needsUpdate": {
                    "description": "not in type Service struct, logic bool",
                    "type": "boolean"
                },
                "platformType": {
                    "description": "type Service struct -\u003e PlatformType",
                    "type": "string"
                },
                "port": {
                    "description": "type Service struct -\u003e Port",
                    "type": "integer"
                },
                "protocol": {
                    "description": "type Service struct -\u003e Protocol",
                    "type": "string"
                },
                "readOnly": {
                    "description": "type Service struct -\u003e ReadOnly",
                    "type": "boolean"
                },
                "role": {
                    "description": "type Service struct -\u003e Role",
                    "type": "string"
                },
                "serviceAddress": {
                    "description": "type Service struct -\u003e Address",
                    "type": "string"
                },
                "serviceType": {
                    "description": "type Service struct -\u003e ServiceType",
                    "type": "string"
                },
                "status": {
                    "description": "type Service struct -\u003e Status",
                    "type": "string"
                },
                "url": {
                    "description": "not in type Service struct but derived from above fields",
                    "type": "string"
                },
                "vaultInternalSecretPath": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "vaultMountPath": {
                    "description": "type Service struct -\u003e VaultMountPath",
                    "type": "string"
                },
                "vaultSPTemplates": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "vaultSecretPath": {
                    "description": "first part type Service struct -\u003e VaultSecretPath",
                    "type": "string"
                },
                "vaultSecretTemplate": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "vaultUserPath": {
                    "description": "second part (teh rest) of type Service struct -\u003e VaultSecretPath",
                    "type": "string"
                }
            }
        },
        "dto.VaultServices": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.VaultService"
                    }
                }
            }
        },
        "dto.VaultServicesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.VaultServices"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.Version": {
            "type": "object",
            "properties": {
                "DATE": {
                    "type": "string"
                },
                "SYSTEM_UUID": {
                    "type": "string"
                },
                "VERSION": {
                    "type": "string"
                }
            }
        },
        "dto.VersionResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.Version"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.Workflow": {
            "type": "object",
            "properties": {
                "task_uuid": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "workflow": {
                    "type": "string"
                }
            }
        },
        "dto.WorkflowResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.Workflow"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "hpcgitlab_labs_lenovo_com_loc_backend_cmd_api_models.Activity": {
            "type": "object",
            "properties": {
                "created_time": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "link": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notification": {}
            }
        },
        "hpcgitlab_labs_lenovo_com_loc_backend_cmd_api_models.Credential": {
            "type": "object",
            "properties": {
                "approach": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "serviceRole": {
                    "description": "Node, DNS, NTP, vCenter",
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "vltrslt": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vaultschema.ExternalVaultSP"
                    }
                }
            }
        },
        "hpcgitlab_labs_lenovo_com_loc_backend_cmd_api_models.DeploymentDetails": {
            "type": "object",
            "properties": {
                "authenticationType": {
                    "type": "string"
                },
                "cloudVersion": {
                    "type": "string"
                },
                "deviceModel": {
                    "type": "string"
                },
                "flavorName": {
                    "type": "string"
                },
                "nodesOfCluster": {
                    "type": "integer"
                },
                "numberOfSites": {
                    "type": "integer"
                },
                "templateName": {
                    "type": "string"
                }
            }
        },
        "hpcgitlab_labs_lenovo_com_loc_backend_cmd_api_models.HardwareDetail": {
            "type": "object",
            "properties": {
                "credentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/hpcgitlab_labs_lenovo_com_loc_backend_cmd_api_models.Credential"
                    }
                },
                "deviceID": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "hostFQDN": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.VNIC"
                    }
                },
                "osVersion": {
                    "type": "string"
                },
                "serialNumber": {
                    "type": "string"
                },
                "settings": {
                    "type": "string"
                },
                "settingsVaultInternalSecretPath": {
                    "type": "string"
                },
                "vaultCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/hpcgitlab_labs_lenovo_com_loc_backend_cmd_api_models.VaultCredential"
                    }
                },
                "warnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "hpcgitlab_labs_lenovo_com_loc_backend_cmd_api_models.InstanceSummary": {
            "type": "object",
            "properties": {
                "cloudServices": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "hardwareDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/hpcgitlab_labs_lenovo_com_loc_backend_cmd_api_models.HardwareDetail"
                    }
                },
                "instanceName": {
                    "type": "string"
                },
                "networkDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/hpcgitlab_labs_lenovo_com_loc_backend_cmd_api_models.NetworkDetail"
                    }
                },
                "networkServices": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "siteName": {
                    "type": "string"
                }
            }
        },
        "hpcgitlab_labs_lenovo_com_loc_backend_cmd_api_models.NetworkDetail": {
            "type": "object",
            "properties": {
                "flavorExtraIPs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ipRangeID": {
                    "type": "string"
                },
                "numberOfReservedIPs": {
                    "type": "integer"
                }
            }
        },
        "hpcgitlab_labs_lenovo_com_loc_backend_cmd_api_models.VaultCredential": {
            "type": "object",
            "properties": {
                "ctUser": {
                    "description": "True if only password read from vault  and username provided in clear text",
                    "type": "boolean"
                },
                "enable": {
                    "description": "aka per Credential ValutCreds",
                    "type": "boolean"
                },
                "manual": {
                    "description": "SecretPath provided manually (true) or trough registered Vault Instance SP template (false)",
                    "type": "boolean"
                },
                "name": {
                    "description": "aka VaultName",
                    "type": "string"
                },
                "secretPath": {
                    "type": "string"
                }
            }
        },
        "hpcgitlab_labs_lenovo_com_loc_backend_pkg_nexus_models.Credential": {
            "type": "object",
            "properties": {
                "approach": {
                    "type": "string"
                },
                "credentialPolicy": {
                    "$ref": "#/definitions/models.CredentialPolicy"
                },
                "kind": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "hpcgitlab_labs_lenovo_com_loc_backend_pkg_nexus_models.HardwareDetail": {
            "type": "object",
            "properties": {
                "bmcIPAddress": {
                    "type": "string"
                },
                "bmcMACAddress": {
                    "type": "string"
                },
                "credentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/hpcgitlab_labs_lenovo_com_loc_backend_pkg_nexus_models.Credential"
                    }
                },
                "deviceID": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "hostFQDN": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.NetworkSettings"
                    }
                },
                "machineType": {
                    "type": "string"
                },
                "mongouuid": {
                    "type": "string"
                },
                "osVersion": {
                    "type": "string"
                },
                "serialNumber": {
                    "type": "string"
                },
                "serverFamily": {
                    "type": "string"
                },
                "serverModel": {
                    "type": "string"
                },
                "settings": {
                    "type": "string"
                },
                "settingsVaultInternalSecretPath": {
                    "type": "string"
                },
                "vaultCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/hpcgitlab_labs_lenovo_com_loc_backend_pkg_nexus_models.VaultCredential"
                    }
                },
                "vaultInternalSecretPath": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "warnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "hpcgitlab_labs_lenovo_com_loc_backend_pkg_nexus_models.NetworkDetail": {
            "type": "object",
            "properties": {
                "endIPAddress": {
                    "type": "string"
                },
                "flavorExtraIPs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gateway": {
                    "type": "string"
                },
                "ipRangeID": {
                    "type": "string"
                },
                "ipRangeName": {
                    "type": "string"
                },
                "netmask": {
                    "type": "integer"
                },
                "networkRole": {
                    "type": "string"
                },
                "numberOfReservedIPs": {
                    "type": "integer"
                },
                "startIPAddress": {
                    "type": "string"
                },
                "subnet": {
                    "type": "string"
                },
                "vlan": {
                    "type": "string"
                }
            }
        },
        "hpcgitlab_labs_lenovo_com_loc_backend_pkg_nexus_models.VaultCredential": {
            "type": "object",
            "properties": {
                "ctUser": {
                    "description": "True if only password read from vault  and username provided in clear text",
                    "type": "boolean"
                },
                "enable": {
                    "description": "aka per Credential ValutCreds",
                    "type": "boolean"
                },
                "manual": {
                    "description": "SecretPath provided manually (true) or trough registered Vault Instance SP template (false)",
                    "type": "boolean"
                },
                "name": {
                    "description": "aka VaultName",
                    "type": "string"
                },
                "secretPath": {
                    "type": "string"
                }
            }
        },
        "models.CreateCredentialPolicyParam": {
            "type": "object",
            "properties": {
                "approach": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "passwordTemplate": {
                    "type": "string"
                }
            }
        },
        "models.CredentialPolicy": {
            "description": "The policy of the credential",
            "type": "object",
            "properties": {
                "approach": {
                    "description": "the approach of the policy",
                    "type": "string"
                },
                "created_at": {
                    "description": "the creation time of the policy",
                    "type": "integer"
                },
                "id": {
                    "description": "the id of the policy",
                    "type": "string"
                },
                "isBuiltin": {
                    "description": "true if this policy is a built-in policy",
                    "type": "boolean"
                },
                "kind": {
                    "description": "the kind of the policy",
                    "type": "string"
                },
                "name": {
                    "description": "the name of the policy",
                    "type": "string"
                },
                "passwordTemplate": {
                    "description": "the password template of the policy",
                    "type": "string"
                },
                "templates": {
                    "description": "the template id list of the policy",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "description": "the deletion time of the policy",
                    "type": "integer"
                },
                "version": {
                    "description": "the version of the policy",
                    "type": "integer"
                }
            }
        },
        "models.CredentialPolicyCreateParams": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CreateCredentialPolicyParam"
                    }
                }
            }
        },
        "models.CredentialPolicyDeleteParams": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DeleteCredentialPolicyParam"
                    }
                }
            }
        },
        "models.CredentialPolicyUpdateParams": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UpdateCredentialPolicyParam"
                    }
                }
            }
        },
        "models.DeleteCredentialPolicyParam": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "models.InstancePlanningDetail": {
            "type": "object",
            "properties": {
                "deploymentDetails": {
                    "$ref": "#/definitions/hpcgitlab_labs_lenovo_com_loc_backend_cmd_api_models.DeploymentDetails"
                },
                "deploymentExtra": {},
                "instanceSummary": {
                    "$ref": "#/definitions/hpcgitlab_labs_lenovo_com_loc_backend_cmd_api_models.InstanceSummary"
                },
                "kind": {
                    "type": "string"
                },
                "operation": {
                    "type": "string"
                }
            }
        },
        "models.InstancesPlanningParams": {
            "type": "object",
            "properties": {
                "instanceName": {
                    "type": "string"
                },
                "operation": {
                    "type": "string"
                },
                "planSites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.PlanningSite"
                    }
                },
                "template": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "models.NetworkSettings": {
            "type": "object",
            "properties": {
                "ipv4Addr": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "netmask": {
                    "type": "integer"
                },
                "nic": {
                    "type": "string"
                }
            }
        },
        "models.OnboardInstancesParams": {
            "type": "object",
            "properties": {
                "instancePlanningDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.InstancePlanningDetail"
                    }
                },
                "planningIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.PlanningSite": {
            "type": "object",
            "properties": {
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/hpcgitlab_labs_lenovo_com_loc_backend_pkg_nexus_models.HardwareDetail"
                    }
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/hpcgitlab_labs_lenovo_com_loc_backend_pkg_nexus_models.NetworkDetail"
                    }
                },
                "site": {
                    "type": "string"
                }
            }
        },
        "models.ReadinessParams": {
            "type": "object",
            "properties": {
                "instanceId": {
                    "type": "string"
                },
                "operation": {
                    "type": "string"
                },
                "templateId": {
                    "type": "string"
                },
                "templateName": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "models.RegisterParamWithPw": {
            "type": "object",
            "properties": {
                "credential": {
                    "type": "object",
                    "properties": {
                        "bmc_password_approach": {
                            "type": "string"
                        },
                        "bmc_password_policy": {
                            "type": "string"
                        },
                        "bmc_password_template": {
                            "type": "string"
                        },
                        "bmc_password_value": {
                            "type": "string"
                        },
                        "uefi_password_approach": {
                            "type": "string"
                        },
                        "uefi_password_policy": {
                            "type": "string"
                        },
                        "uefi_password_template": {
                            "type": "string"
                        },
                        "uefi_password_value": {
                            "type": "string"
                        }
                    }
                },
                "encrypt_pwd": {
                    "type": "string"
                },
                "expire": {
                    "type": "number"
                },
                "sideload": {
                    "type": "boolean"
                },
                "ssl_verify": {
                    "type": "boolean"
                },
                "template": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "models.RemoveInstancesRequest": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.UpdateCredentialPolicyParam": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "passwordTemplate": {
                    "type": "string"
                }
            }
        },
        "models.VNIC": {
            "type": "object",
            "properties": {
                "ipv4Addr": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "netmask": {
                    "type": "integer"
                },
                "nic": {
                    "type": "string"
                }
            }
        },
        "models.VaultApiParams": {
            "type": "object",
            "required": [
                "fqdnOrIp",
                "mountPath",
                "name",
                "port",
                "secretsPath",
                "token"
            ],
            "properties": {
                "certificate": {
                    "type": "string"
                },
                "deployTemplate": {
                    "type": "string"
                },
                "deviceTemplate": {
                    "type": "string"
                },
                "fqdnOrIp": {
                    "description": "hostname, fqdn or IP as string",
                    "type": "string"
                },
                "mountPath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "readOnly": {
                    "type": "boolean"
                },
                "secretTemplate": {
                    "type": "string"
                },
                "secretsPath": {
                    "type": "string"
                },
                "serviceTemplate": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "uefiTemplate": {
                    "type": "string"
                },
                "vaultType": {
                    "type": "string"
                }
            }
        },
        "models.VaultGetSecretUnderPath": {
            "type": "object",
            "required": [
                "secretPath",
                "vaultName"
            ],
            "properties": {
                "secretPath": {
                    "type": "string"
                },
                "vaultName": {
                    "type": "string"
                }
            }
        },
        "models.VaultSaveSecretsFile": {
            "type": "object",
            "required": [
                "encryptKey",
                "secretPath",
                "vaultName"
            ],
            "properties": {
                "encryptKey": {
                    "type": "string"
                },
                "secretPath": {
                    "type": "string"
                },
                "vaultName": {
                    "type": "string"
                }
            }
        },
        "models.VaultUnregisterParams": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "deleteSecrets": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.VaultUpdateApiParams": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "certificate": {
                    "type": "string"
                },
                "deployTemplate": {
                    "type": "string"
                },
                "deviceTemplate": {
                    "type": "string"
                },
                "fqdnOrIp": {
                    "type": "string"
                },
                "mountPath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "readOnly": {
                    "type": "boolean"
                },
                "secretTemplate": {
                    "type": "string"
                },
                "secretsPath": {
                    "type": "string"
                },
                "serviceTemplate": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "uefiTemplate": {
                    "type": "string"
                },
                "vaultType": {
                    "type": "string"
                }
            }
        },
        "multipart.FileHeader": {
            "type": "object",
            "properties": {
                "filename": {
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/textproto.MIMEHeader"
                },
                "size": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "osdeploy.ConfluentServerInfo": {
            "type": "object",
            "properties": {
                "bmc_ipv4_addr": {
                    "type": "string"
                },
                "bmc_pass": {
                    "type": "string"
                },
                "bmc_user": {
                    "type": "string"
                },
                "device_type": {
                    "type": "string"
                },
                "domain": {
                    "description": "Name = SiteName - Hostname",
                    "type": "string"
                },
                "fqdn": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "netmask": {
                    "type": "string"
                },
                "origin_os_profile": {
                    "type": "string"
                },
                "os_pass": {
                    "type": "string"
                },
                "os_profile": {
                    "type": "string"
                },
                "serial": {
                    "type": "string"
                },
                "side_load": {
                    "type": "boolean"
                }
            }
        },
        "osdeploy.OsDeployDto": {
            "type": "object",
            "properties": {
                "dns_servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gateway": {
                    "type": "string"
                },
                "ntp_servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "post_script": {
                    "description": "extra_vars.post_script",
                    "type": "string"
                },
                "secure_boot": {
                    "description": "unmarshal(device_profile).uefi.secureBoot",
                    "type": "boolean"
                },
                "servers_info": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/osdeploy.ConfluentServerInfo"
                    }
                },
                "site": {
                    "type": "string"
                }
            }
        },
        "services.Notification": {
            "type": "object",
            "required": [
                "device",
                "site"
            ],
            "properties": {
                "device": {
                    "type": "string"
                },
                "serial": {
                    "type": "string"
                },
                "site": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "services.RegisterService": {
            "type": "object",
            "required": [
                "name",
                "notification"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notification": {
                    "$ref": "#/definitions/services.Notification"
                }
            }
        },
        "services.SockMessage": {
            "type": "object",
            "properties": {
                "create_by": {
                    "type": "string"
                },
                "create_time": {
                    "type": "string"
                },
                "data": {},
                "extra": {
                    "description": "NotificationExtra?"
                },
                "id": {
                    "type": "integer"
                },
                "silent": {
                    "type": "boolean"
                },
                "status": {
                    "description": "'success' | 'error' | 'info';",
                    "type": "string"
                },
                "summary": {
                    "description": "'success' | 'error' | 'info';",
                    "type": "string"
                },
                "timeout": {
                    "type": "integer"
                },
                "type": {
                    "description": "'TaskOnResult' |'TaskOnProgress' | 'Alert' | 'everyone';",
                    "type": "string"
                }
            }
        },
        "textproto.MIMEHeader": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        },
        "vaultschema.ExternalVaultSP": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "external read-write vault instance name",
                    "type": "string"
                },
                "secretPath": {
                    "description": "secretpath inside the vault instance above",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}