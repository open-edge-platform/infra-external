// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DtoNetworkServiceCreateRequest dto network service create request
//
// swagger:model dto.NetworkServiceCreateRequest
type DtoNetworkServiceCreateRequest struct {

	// connection check
	// Required: true
	ConnectionCheck *bool `json:"connectionCheck"`

	// name
	// Required: true
	Name *string `json:"name"`

	// port
	Port int64 `json:"port,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// retries
	Retries int64 `json:"retries,omitempty"`

	// role
	// Required: true
	Role *string `json:"role"`

	// service address
	// Required: true
	ServiceAddress *string `json:"serviceAddress"`

	// site association
	// Required: true
	SiteAssociation *string `json:"siteAssociation"`
}

// Validate validates this dto network service create request
func (m *DtoNetworkServiceCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionCheck(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteAssociation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoNetworkServiceCreateRequest) validateConnectionCheck(formats strfmt.Registry) error {

	if err := validate.Required("connectionCheck", "body", m.ConnectionCheck); err != nil {
		return err
	}

	return nil
}

func (m *DtoNetworkServiceCreateRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DtoNetworkServiceCreateRequest) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

func (m *DtoNetworkServiceCreateRequest) validateServiceAddress(formats strfmt.Registry) error {

	if err := validate.Required("serviceAddress", "body", m.ServiceAddress); err != nil {
		return err
	}

	return nil
}

func (m *DtoNetworkServiceCreateRequest) validateSiteAssociation(formats strfmt.Registry) error {

	if err := validate.Required("siteAssociation", "body", m.SiteAssociation); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this dto network service create request based on context it is used
func (m *DtoNetworkServiceCreateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DtoNetworkServiceCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoNetworkServiceCreateRequest) UnmarshalBinary(b []byte) error {
	var res DtoNetworkServiceCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
