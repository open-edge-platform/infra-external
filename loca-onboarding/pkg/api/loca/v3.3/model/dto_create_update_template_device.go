// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoCreateUpdateTemplateDevice The device template
//
// swagger:model dto.CreateUpdateTemplateDevice
type DtoCreateUpdateTemplateDevice struct {

	// the cloud roles
	CloudRole []string `json:"cloudRole"`

	// the device filters aims to screen registered devices for instance creation
	Filters struct {
		DtoTemplateDeviceFilters
	} `json:"filters,omitempty"`

	// the firmware details
	FirmwarePackageID string `json:"firmwarePackageID,omitempty"`

	// network settings
	NetworkSettings *DtoCreateUpdateTemplateNetworkSettings `json:"networkSettings,omitempty"`

	// the required number of devices
	NumberOfDevices int64 `json:"numberOfDevices,omitempty"`

	// the os settings
	OsSettings struct {
		DtoCreateUpdateTemplateOsSettings
	} `json:"osSettings,omitempty"`
}

// Validate validates this dto create update template device
func (m *DtoCreateUpdateTemplateDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoCreateUpdateTemplateDevice) validateFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.Filters) { // not required
		return nil
	}

	return nil
}

func (m *DtoCreateUpdateTemplateDevice) validateNetworkSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkSettings) { // not required
		return nil
	}

	if m.NetworkSettings != nil {
		if err := m.NetworkSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DtoCreateUpdateTemplateDevice) validateOsSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.OsSettings) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this dto create update template device based on the context it is used
func (m *DtoCreateUpdateTemplateDevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOsSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoCreateUpdateTemplateDevice) contextValidateFilters(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *DtoCreateUpdateTemplateDevice) contextValidateNetworkSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkSettings != nil {

		if swag.IsZero(m.NetworkSettings) { // not required
			return nil
		}

		if err := m.NetworkSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkSettings")
			}
			return err
		}
	}

	return nil
}

func (m *DtoCreateUpdateTemplateDevice) contextValidateOsSettings(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *DtoCreateUpdateTemplateDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoCreateUpdateTemplateDevice) UnmarshalBinary(b []byte) error {
	var res DtoCreateUpdateTemplateDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
