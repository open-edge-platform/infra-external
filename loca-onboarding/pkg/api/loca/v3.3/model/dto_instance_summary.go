// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoInstanceSummary dto instance summary
//
// swagger:model dto.InstanceSummary
type DtoInstanceSummary struct {

	// cloud services
	CloudServices map[string][]string `json:"cloudServices,omitempty"`

	// hardware details
	HardwareDetails []*DtoHardwareDetail `json:"hardwareDetails"`

	// instance name
	InstanceName string `json:"instanceName,omitempty"`

	// network details
	NetworkDetails []*DtoNetworkDetail `json:"networkDetails"`

	// network services
	NetworkServices map[string][]string `json:"networkServices,omitempty"`

	// site name
	SiteName string `json:"siteName,omitempty"`
}

// Validate validates this dto instance summary
func (m *DtoInstanceSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHardwareDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoInstanceSummary) validateHardwareDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.HardwareDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.HardwareDetails); i++ {
		if swag.IsZero(m.HardwareDetails[i]) { // not required
			continue
		}

		if m.HardwareDetails[i] != nil {
			if err := m.HardwareDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hardwareDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hardwareDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoInstanceSummary) validateNetworkDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkDetails); i++ {
		if swag.IsZero(m.NetworkDetails[i]) { // not required
			continue
		}

		if m.NetworkDetails[i] != nil {
			if err := m.NetworkDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this dto instance summary based on the context it is used
func (m *DtoInstanceSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHardwareDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoInstanceSummary) contextValidateHardwareDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HardwareDetails); i++ {

		if m.HardwareDetails[i] != nil {

			if swag.IsZero(m.HardwareDetails[i]) { // not required
				return nil
			}

			if err := m.HardwareDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hardwareDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hardwareDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoInstanceSummary) contextValidateNetworkDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkDetails); i++ {

		if m.NetworkDetails[i] != nil {

			if swag.IsZero(m.NetworkDetails[i]) { // not required
				return nil
			}

			if err := m.NetworkDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DtoInstanceSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoInstanceSummary) UnmarshalBinary(b []byte) error {
	var res DtoInstanceSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
