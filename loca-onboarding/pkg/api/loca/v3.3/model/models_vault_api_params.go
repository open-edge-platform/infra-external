// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsVaultAPIParams models vault Api params
//
// swagger:model models.VaultApiParams
type ModelsVaultAPIParams struct {

	// certificate
	Certificate string `json:"certificate,omitempty"`

	// deploy template
	DeployTemplate string `json:"deployTemplate,omitempty"`

	// device template
	DeviceTemplate string `json:"deviceTemplate,omitempty"`

	// hostname, fqdn or IP as string
	// Required: true
	FqdnOrIP *string `json:"fqdnOrIp"`

	// mount path
	// Required: true
	MountPath *string `json:"mountPath"`

	// name
	// Required: true
	Name *string `json:"name"`

	// port
	// Required: true
	Port *string `json:"port"`

	// read only
	ReadOnly bool `json:"readOnly,omitempty"`

	// secret template
	SecretTemplate string `json:"secretTemplate,omitempty"`

	// secrets path
	// Required: true
	SecretsPath *string `json:"secretsPath"`

	// service template
	ServiceTemplate string `json:"serviceTemplate,omitempty"`

	// token
	// Required: true
	Token *string `json:"token"`

	// uefi template
	UefiTemplate string `json:"uefiTemplate,omitempty"`

	// vault type
	VaultType string `json:"vaultType,omitempty"`
}

// Validate validates this models vault Api params
func (m *ModelsVaultAPIParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFqdnOrIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretsPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsVaultAPIParams) validateFqdnOrIP(formats strfmt.Registry) error {

	if err := validate.Required("fqdnOrIp", "body", m.FqdnOrIP); err != nil {
		return err
	}

	return nil
}

func (m *ModelsVaultAPIParams) validateMountPath(formats strfmt.Registry) error {

	if err := validate.Required("mountPath", "body", m.MountPath); err != nil {
		return err
	}

	return nil
}

func (m *ModelsVaultAPIParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ModelsVaultAPIParams) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *ModelsVaultAPIParams) validateSecretsPath(formats strfmt.Registry) error {

	if err := validate.Required("secretsPath", "body", m.SecretsPath); err != nil {
		return err
	}

	return nil
}

func (m *ModelsVaultAPIParams) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models vault Api params based on context it is used
func (m *ModelsVaultAPIParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsVaultAPIParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsVaultAPIParams) UnmarshalBinary(b []byte) error {
	var res ModelsVaultAPIParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
