// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OsdeployOsDeployDto osdeploy os deploy dto
//
// swagger:model osdeploy.OsDeployDto
type OsdeployOsDeployDto struct {

	// dns servers
	DNSServers []string `json:"dns_servers"`

	// gateway
	Gateway string `json:"gateway,omitempty"`

	// ntp servers
	NtpServers []string `json:"ntp_servers"`

	// extra_vars.post_script
	PostScript string `json:"post_script,omitempty"`

	// unmarshal(device_profile).uefi.secureBoot
	SecureBoot bool `json:"secure_boot,omitempty"`

	// servers info
	ServersInfo []*OsdeployConfluentServerInfo `json:"servers_info"`

	// site
	Site string `json:"site,omitempty"`
}

// Validate validates this osdeploy os deploy dto
func (m *OsdeployOsDeployDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServersInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsdeployOsDeployDto) validateServersInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ServersInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.ServersInfo); i++ {
		if swag.IsZero(m.ServersInfo[i]) { // not required
			continue
		}

		if m.ServersInfo[i] != nil {
			if err := m.ServersInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servers_info" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("servers_info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this osdeploy os deploy dto based on the context it is used
func (m *OsdeployOsDeployDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServersInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsdeployOsDeployDto) contextValidateServersInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ServersInfo); i++ {

		if m.ServersInfo[i] != nil {

			if swag.IsZero(m.ServersInfo[i]) { // not required
				return nil
			}

			if err := m.ServersInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servers_info" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("servers_info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsdeployOsDeployDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsdeployOsDeployDto) UnmarshalBinary(b []byte) error {
	var res OsdeployOsDeployDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
