// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ControllersVaultRegisterRequest controllers vault register request
//
// swagger:model controllers.VaultRegisterRequest
type ControllersVaultRegisterRequest struct {

	// file
	// Required: true
	File *MultipartFileHeader `json:"file"`

	// path
	Path string `json:"path,omitempty"`

	// vault api params
	VaultAPIParams *ModelsVaultAPIParams `json:"vault_api_params,omitempty"`
}

// Validate validates this controllers vault register request
func (m *ControllersVaultRegisterRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultAPIParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ControllersVaultRegisterRequest) validateFile(formats strfmt.Registry) error {

	if err := validate.Required("file", "body", m.File); err != nil {
		return err
	}

	if m.File != nil {
		if err := m.File.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("file")
			}
			return err
		}
	}

	return nil
}

func (m *ControllersVaultRegisterRequest) validateVaultAPIParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VaultAPIParams) { // not required
		return nil
	}

	if m.VaultAPIParams != nil {
		if err := m.VaultAPIParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vault_api_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vault_api_params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this controllers vault register request based on the context it is used
func (m *ControllersVaultRegisterRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVaultAPIParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ControllersVaultRegisterRequest) contextValidateFile(ctx context.Context, formats strfmt.Registry) error {

	if m.File != nil {

		if err := m.File.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("file")
			}
			return err
		}
	}

	return nil
}

func (m *ControllersVaultRegisterRequest) contextValidateVaultAPIParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VaultAPIParams != nil {

		if swag.IsZero(m.VaultAPIParams) { // not required
			return nil
		}

		if err := m.VaultAPIParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vault_api_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vault_api_params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ControllersVaultRegisterRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ControllersVaultRegisterRequest) UnmarshalBinary(b []byte) error {
	var res ControllersVaultRegisterRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
