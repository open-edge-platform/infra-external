// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoDeployment dto deployment
//
// swagger:model dto.Deployment
type DtoDeployment struct {

	// associated sites
	AssociatedSites []string `json:"associatedSites"`

	// cloud templates
	CloudTemplates []*DtoDeploymentCloudTemplate `json:"cloudTemplates"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// planned sites
	PlannedSites []string `json:"plannedSites"`

	// settings
	Settings *DtoDeploymentSettings `json:"settings,omitempty"`
}

// Validate validates this dto deployment
func (m *DtoDeployment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoDeployment) validateCloudTemplates(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudTemplates) { // not required
		return nil
	}

	for i := 0; i < len(m.CloudTemplates); i++ {
		if swag.IsZero(m.CloudTemplates[i]) { // not required
			continue
		}

		if m.CloudTemplates[i] != nil {
			if err := m.CloudTemplates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloudTemplates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloudTemplates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoDeployment) validateSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this dto deployment based on the context it is used
func (m *DtoDeployment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoDeployment) contextValidateCloudTemplates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CloudTemplates); i++ {

		if m.CloudTemplates[i] != nil {

			if swag.IsZero(m.CloudTemplates[i]) { // not required
				return nil
			}

			if err := m.CloudTemplates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloudTemplates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloudTemplates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoDeployment) contextValidateSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.Settings != nil {

		if swag.IsZero(m.Settings) { // not required
			return nil
		}

		if err := m.Settings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DtoDeployment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoDeployment) UnmarshalBinary(b []byte) error {
	var res DtoDeployment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
