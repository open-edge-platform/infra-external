// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoTemplateDevice The device template
//
// swagger:model dto.TemplateDevice
type DtoTemplateDevice struct {

	// the device filters aims to screen registered devices for instance creation
	Filters struct {
		DtoTemplateDeviceFilters
	} `json:"filters,omitempty"`

	// the firmware details
	Firmware struct {
		DtoTemplateDeviceFirmware
	} `json:"firmware,omitempty"`

	// the required number of devices
	NumberOfDevices int64 `json:"numberOfDevices,omitempty"`

	// the os settings
	OsSettings struct {
		DtoTemplateOsSettings
	} `json:"osSettings,omitempty"`
}

// Validate validates this dto template device
func (m *DtoTemplateDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirmware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoTemplateDevice) validateFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.Filters) { // not required
		return nil
	}

	return nil
}

func (m *DtoTemplateDevice) validateFirmware(formats strfmt.Registry) error {
	if swag.IsZero(m.Firmware) { // not required
		return nil
	}

	return nil
}

func (m *DtoTemplateDevice) validateOsSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.OsSettings) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this dto template device based on the context it is used
func (m *DtoTemplateDevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirmware(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOsSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoTemplateDevice) contextValidateFilters(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *DtoTemplateDevice) contextValidateFirmware(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *DtoTemplateDevice) contextValidateOsSettings(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *DtoTemplateDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoTemplateDevice) UnmarshalBinary(b []byte) error {
	var res DtoTemplateDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
