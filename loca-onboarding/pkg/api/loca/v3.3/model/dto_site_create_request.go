// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DtoSiteCreateRequest dto site create request
//
// swagger:model dto.SiteCreateRequest
type DtoSiteCreateRequest struct {

	// address
	Address string `json:"address,omitempty"`

	// city
	// Required: true
	City *string `json:"city"`

	// cloud type
	// Required: true
	CloudType *string `json:"cloudType"`

	// country
	// Required: true
	Country *string `json:"country"`

	// geo
	// Required: true
	Geo *string `json:"geo"`

	// gps coordinates
	GpsCoordinates string `json:"gpsCoordinates,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// post code
	PostCode string `json:"postCode,omitempty"`

	// province
	// Required: true
	Province *string `json:"province"`

	// site code
	// Required: true
	SiteCode *string `json:"siteCode"`

	// timezone
	Timezone string `json:"timezone,omitempty"`
}

// Validate validates this dto site create request
func (m *DtoSiteCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvince(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoSiteCreateRequest) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *DtoSiteCreateRequest) validateCloudType(formats strfmt.Registry) error {

	if err := validate.Required("cloudType", "body", m.CloudType); err != nil {
		return err
	}

	return nil
}

func (m *DtoSiteCreateRequest) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *DtoSiteCreateRequest) validateGeo(formats strfmt.Registry) error {

	if err := validate.Required("geo", "body", m.Geo); err != nil {
		return err
	}

	return nil
}

func (m *DtoSiteCreateRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DtoSiteCreateRequest) validateProvince(formats strfmt.Registry) error {

	if err := validate.Required("province", "body", m.Province); err != nil {
		return err
	}

	return nil
}

func (m *DtoSiteCreateRequest) validateSiteCode(formats strfmt.Registry) error {

	if err := validate.Required("siteCode", "body", m.SiteCode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this dto site create request based on context it is used
func (m *DtoSiteCreateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DtoSiteCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoSiteCreateRequest) UnmarshalBinary(b []byte) error {
	var res DtoSiteCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
