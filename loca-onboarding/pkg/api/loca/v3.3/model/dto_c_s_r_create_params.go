// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoCSRCreateParams dto c s r create params
//
// swagger:model dto.CSRCreateParams
type DtoCSRCreateParams struct {

	// common name
	CommonName string `json:"common_name,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// locality
	Locality string `json:"locality,omitempty"`

	// organization
	Organization string `json:"organization,omitempty"`

	// organizational unit
	OrganizationalUnit string `json:"organizational_unit,omitempty"`

	// province
	Province string `json:"province,omitempty"`

	// san extensions
	SanExtensions *DtoCertSANs `json:"san_extensions,omitempty"`
}

// Validate validates this dto c s r create params
func (m *DtoCSRCreateParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSanExtensions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoCSRCreateParams) validateSanExtensions(formats strfmt.Registry) error {
	if swag.IsZero(m.SanExtensions) { // not required
		return nil
	}

	if m.SanExtensions != nil {
		if err := m.SanExtensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("san_extensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("san_extensions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this dto c s r create params based on the context it is used
func (m *DtoCSRCreateParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSanExtensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoCSRCreateParams) contextValidateSanExtensions(ctx context.Context, formats strfmt.Registry) error {

	if m.SanExtensions != nil {

		if swag.IsZero(m.SanExtensions) { // not required
			return nil
		}

		if err := m.SanExtensions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("san_extensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("san_extensions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DtoCSRCreateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoCSRCreateParams) UnmarshalBinary(b []byte) error {
	var res DtoCSRCreateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
