// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoTaskInList dto task in list
//
// swagger:model dto.TaskInList
type DtoTaskInList struct {

	// action
	Action int64 `json:"action,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by
	CreatedBy string `json:"created_by,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// details
	Details []*DtoDetail `json:"details"`

	// executor
	Executor string `json:"executor,omitempty"`

	// go workflow id
	GoWorkflowID string `json:"go_workflow_id,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// job id
	JobID float64 `json:"job_id,omitempty"`

	// mode
	Mode int64 `json:"mode,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// output
	Output interface{} `json:"output,omitempty"`

	// params
	Params interface{} `json:"params,omitempty"`

	// progress
	Progress string `json:"progress,omitempty"`

	// start time
	StartTime string `json:"start_time,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// stop time
	StopTime string `json:"stop_time,omitempty"`

	// targets
	Targets interface{} `json:"targets,omitempty"`

	// type
	Type int64 `json:"type,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this dto task in list
func (m *DtoTaskInList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoTaskInList) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.Details) { // not required
		return nil
	}

	for i := 0; i < len(m.Details); i++ {
		if swag.IsZero(m.Details[i]) { // not required
			continue
		}

		if m.Details[i] != nil {
			if err := m.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this dto task in list based on the context it is used
func (m *DtoTaskInList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoTaskInList) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Details); i++ {

		if m.Details[i] != nil {

			if swag.IsZero(m.Details[i]) { // not required
				return nil
			}

			if err := m.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DtoTaskInList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoTaskInList) UnmarshalBinary(b []byte) error {
	var res DtoTaskInList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
