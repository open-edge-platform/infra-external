// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelsRegisterParamWithPw models register param with pw
//
// swagger:model models.RegisterParamWithPw
type ModelsRegisterParamWithPw struct {

	// credential
	Credential *ModelsRegisterParamWithPwCredential `json:"credential,omitempty"`

	// encrypt pwd
	EncryptPwd string `json:"encrypt_pwd,omitempty"`

	// expire
	Expire float64 `json:"expire,omitempty"`

	// sideload
	Sideload bool `json:"sideload,omitempty"`

	// ssl verify
	SslVerify bool `json:"ssl_verify,omitempty"`

	// template
	Template string `json:"template,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this models register param with pw
func (m *ModelsRegisterParamWithPw) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredential(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsRegisterParamWithPw) validateCredential(formats strfmt.Registry) error {
	if swag.IsZero(m.Credential) { // not required
		return nil
	}

	if m.Credential != nil {
		if err := m.Credential.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credential")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credential")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this models register param with pw based on the context it is used
func (m *ModelsRegisterParamWithPw) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredential(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsRegisterParamWithPw) contextValidateCredential(ctx context.Context, formats strfmt.Registry) error {

	if m.Credential != nil {

		if swag.IsZero(m.Credential) { // not required
			return nil
		}

		if err := m.Credential.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credential")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credential")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsRegisterParamWithPw) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsRegisterParamWithPw) UnmarshalBinary(b []byte) error {
	var res ModelsRegisterParamWithPw
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ModelsRegisterParamWithPwCredential models register param with pw credential
//
// swagger:model ModelsRegisterParamWithPwCredential
type ModelsRegisterParamWithPwCredential struct {

	// bmc password approach
	BmcPasswordApproach string `json:"bmc_password_approach,omitempty"`

	// bmc password policy
	BmcPasswordPolicy string `json:"bmc_password_policy,omitempty"`

	// bmc password template
	BmcPasswordTemplate string `json:"bmc_password_template,omitempty"`

	// bmc password value
	BmcPasswordValue string `json:"bmc_password_value,omitempty"`

	// uefi password approach
	UefiPasswordApproach string `json:"uefi_password_approach,omitempty"`

	// uefi password policy
	UefiPasswordPolicy string `json:"uefi_password_policy,omitempty"`

	// uefi password template
	UefiPasswordTemplate string `json:"uefi_password_template,omitempty"`

	// uefi password value
	UefiPasswordValue string `json:"uefi_password_value,omitempty"`
}

// Validate validates this models register param with pw credential
func (m *ModelsRegisterParamWithPwCredential) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this models register param with pw credential based on context it is used
func (m *ModelsRegisterParamWithPwCredential) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsRegisterParamWithPwCredential) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsRegisterParamWithPwCredential) UnmarshalBinary(b []byte) error {
	var res ModelsRegisterParamWithPwCredential
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
