// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HpcgitlabLabsLenovoComLocBackendCmdAPIModelsHardwareDetail hpcgitlab labs lenovo com loc backend cmd api models hardware detail
//
// swagger:model hpcgitlab_labs_lenovo_com_loc_backend_cmd_api_models.HardwareDetail
type HpcgitlabLabsLenovoComLocBackendCmdAPIModelsHardwareDetail struct {

	// credentials
	Credentials []*HpcgitlabLabsLenovoComLocBackendCmdAPIModelsCredential `json:"credentials"`

	// device ID
	DeviceID string `json:"deviceID,omitempty"`

	// domain
	Domain string `json:"domain,omitempty"`

	// host f q d n
	HostFQDN string `json:"hostFQDN,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// interfaces
	Interfaces []*ModelsVNIC `json:"interfaces"`

	// os version
	OsVersion string `json:"osVersion,omitempty"`

	// serial number
	SerialNumber string `json:"serialNumber,omitempty"`

	// settings
	Settings string `json:"settings,omitempty"`

	// settings vault internal secret path
	SettingsVaultInternalSecretPath string `json:"settingsVaultInternalSecretPath,omitempty"`

	// vault credentials
	VaultCredentials []*HpcgitlabLabsLenovoComLocBackendCmdAPIModelsVaultCredential `json:"vaultCredentials"`

	// warnings
	Warnings []string `json:"warnings"`
}

// Validate validates this hpcgitlab labs lenovo com loc backend cmd api models hardware detail
func (m *HpcgitlabLabsLenovoComLocBackendCmdAPIModelsHardwareDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HpcgitlabLabsLenovoComLocBackendCmdAPIModelsHardwareDetail) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	for i := 0; i < len(m.Credentials); i++ {
		if swag.IsZero(m.Credentials[i]) { // not required
			continue
		}

		if m.Credentials[i] != nil {
			if err := m.Credentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("credentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HpcgitlabLabsLenovoComLocBackendCmdAPIModelsHardwareDetail) validateInterfaces(formats strfmt.Registry) error {
	if swag.IsZero(m.Interfaces) { // not required
		return nil
	}

	for i := 0; i < len(m.Interfaces); i++ {
		if swag.IsZero(m.Interfaces[i]) { // not required
			continue
		}

		if m.Interfaces[i] != nil {
			if err := m.Interfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HpcgitlabLabsLenovoComLocBackendCmdAPIModelsHardwareDetail) validateVaultCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.VaultCredentials) { // not required
		return nil
	}

	for i := 0; i < len(m.VaultCredentials); i++ {
		if swag.IsZero(m.VaultCredentials[i]) { // not required
			continue
		}

		if m.VaultCredentials[i] != nil {
			if err := m.VaultCredentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vaultCredentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vaultCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this hpcgitlab labs lenovo com loc backend cmd api models hardware detail based on the context it is used
func (m *HpcgitlabLabsLenovoComLocBackendCmdAPIModelsHardwareDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInterfaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVaultCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HpcgitlabLabsLenovoComLocBackendCmdAPIModelsHardwareDetail) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Credentials); i++ {

		if m.Credentials[i] != nil {

			if swag.IsZero(m.Credentials[i]) { // not required
				return nil
			}

			if err := m.Credentials[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("credentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HpcgitlabLabsLenovoComLocBackendCmdAPIModelsHardwareDetail) contextValidateInterfaces(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Interfaces); i++ {

		if m.Interfaces[i] != nil {

			if swag.IsZero(m.Interfaces[i]) { // not required
				return nil
			}

			if err := m.Interfaces[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HpcgitlabLabsLenovoComLocBackendCmdAPIModelsHardwareDetail) contextValidateVaultCredentials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VaultCredentials); i++ {

		if m.VaultCredentials[i] != nil {

			if swag.IsZero(m.VaultCredentials[i]) { // not required
				return nil
			}

			if err := m.VaultCredentials[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vaultCredentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vaultCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HpcgitlabLabsLenovoComLocBackendCmdAPIModelsHardwareDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HpcgitlabLabsLenovoComLocBackendCmdAPIModelsHardwareDetail) UnmarshalBinary(b []byte) error {
	var res HpcgitlabLabsLenovoComLocBackendCmdAPIModelsHardwareDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
