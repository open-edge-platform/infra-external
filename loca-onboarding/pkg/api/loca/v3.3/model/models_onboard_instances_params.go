// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelsOnboardInstancesParams models onboard instances params
//
// swagger:model models.OnboardInstancesParams
type ModelsOnboardInstancesParams struct {

	// instance planning details
	InstancePlanningDetails []*ModelsInstancePlanningDetail `json:"instancePlanningDetails"`

	// planning ids
	PlanningIds []string `json:"planningIds"`
}

// Validate validates this models onboard instances params
func (m *ModelsOnboardInstancesParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstancePlanningDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsOnboardInstancesParams) validateInstancePlanningDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.InstancePlanningDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.InstancePlanningDetails); i++ {
		if swag.IsZero(m.InstancePlanningDetails[i]) { // not required
			continue
		}

		if m.InstancePlanningDetails[i] != nil {
			if err := m.InstancePlanningDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instancePlanningDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instancePlanningDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this models onboard instances params based on the context it is used
func (m *ModelsOnboardInstancesParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstancePlanningDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsOnboardInstancesParams) contextValidateInstancePlanningDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InstancePlanningDetails); i++ {

		if m.InstancePlanningDetails[i] != nil {

			if swag.IsZero(m.InstancePlanningDetails[i]) { // not required
				return nil
			}

			if err := m.InstancePlanningDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instancePlanningDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instancePlanningDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsOnboardInstancesParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsOnboardInstancesParams) UnmarshalBinary(b []byte) error {
	var res ModelsOnboardInstancesParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
