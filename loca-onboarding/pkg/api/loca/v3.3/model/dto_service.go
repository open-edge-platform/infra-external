// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoService dto service
//
// swagger:model dto.Service
type DtoService struct {

	// child services
	ChildServices []string `json:"childServices"`

	// connection check
	ConnectionCheck bool `json:"connectionCheck,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// credentials
	Credentials []*DtoCredential `json:"credentials"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// instances
	Instances []string `json:"instances"`

	// is deployed by users
	IsDeployedByUsers bool `json:"isDeployedByUsers,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// networks
	Networks []*DtoServiceNetwork `json:"networks"`

	// parent service
	ParentService string `json:"parentService,omitempty"`

	// platform type
	PlatformType string `json:"platformType,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// read only
	ReadOnly bool `json:"readOnly,omitempty"`

	// retries
	Retries int64 `json:"retries,omitempty"`

	// role
	Role string `json:"role,omitempty"`

	// role reference
	RoleReference string `json:"roleReference,omitempty"`

	// service address
	ServiceAddress string `json:"serviceAddress,omitempty"`

	// service settings
	ServiceSettings string `json:"serviceSettings,omitempty"`

	// site association
	SiteAssociation []string `json:"siteAssociation"`

	// software version
	SoftwareVersion string `json:"softwareVersion,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// vault credentials
	VaultCredentials []*DtoVaultCredential `json:"vaultCredentials"`

	// vault internal secret path
	VaultInternalSecretPath []string `json:"vaultInternalSecretPath"`

	// vault mount path
	VaultMountPath string `json:"vaultMountPath,omitempty"`

	// vault s p templates
	VaultSPTemplates map[string]string `json:"vaultSPTemplates,omitempty"`

	// vault secret path
	VaultSecretPath string `json:"vaultSecretPath,omitempty"`

	// vault secret template
	VaultSecretTemplate map[string]string `json:"vaultSecretTemplate,omitempty"`

	// vault update
	VaultUpdate bool `json:"vaultUpdate,omitempty"`
}

// Validate validates this dto service
func (m *DtoService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoService) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	for i := 0; i < len(m.Credentials); i++ {
		if swag.IsZero(m.Credentials[i]) { // not required
			continue
		}

		if m.Credentials[i] != nil {
			if err := m.Credentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("credentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoService) validateNetworks(formats strfmt.Registry) error {
	if swag.IsZero(m.Networks) { // not required
		return nil
	}

	for i := 0; i < len(m.Networks); i++ {
		if swag.IsZero(m.Networks[i]) { // not required
			continue
		}

		if m.Networks[i] != nil {
			if err := m.Networks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoService) validateVaultCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.VaultCredentials) { // not required
		return nil
	}

	for i := 0; i < len(m.VaultCredentials); i++ {
		if swag.IsZero(m.VaultCredentials[i]) { // not required
			continue
		}

		if m.VaultCredentials[i] != nil {
			if err := m.VaultCredentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vaultCredentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vaultCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this dto service based on the context it is used
func (m *DtoService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVaultCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoService) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Credentials); i++ {

		if m.Credentials[i] != nil {

			if swag.IsZero(m.Credentials[i]) { // not required
				return nil
			}

			if err := m.Credentials[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("credentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoService) contextValidateNetworks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Networks); i++ {

		if m.Networks[i] != nil {

			if swag.IsZero(m.Networks[i]) { // not required
				return nil
			}

			if err := m.Networks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoService) contextValidateVaultCredentials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VaultCredentials); i++ {

		if m.VaultCredentials[i] != nil {

			if swag.IsZero(m.VaultCredentials[i]) { // not required
				return nil
			}

			if err := m.VaultCredentials[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vaultCredentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vaultCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DtoService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoService) UnmarshalBinary(b []byte) error {
	var res DtoService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
