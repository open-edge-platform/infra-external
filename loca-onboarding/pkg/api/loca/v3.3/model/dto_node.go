// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoNode dto node
//
// swagger:model dto.Node
type DtoNode struct {

	// credentials
	Credentials []*DtoCredential `json:"credentials"`

	// fqdn
	Fqdn string `json:"fqdn,omitempty"`

	// host domain
	HostDomain string `json:"hostDomain,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// machine type
	MachineType string `json:"machineType,omitempty"`

	// networks
	Networks DtoOSNetwork `json:"networks,omitempty"`

	// os version
	OsVersion string `json:"osVersion,omitempty"`

	// serial number
	SerialNumber string `json:"serialNumber,omitempty"`

	// server model
	ServerModel string `json:"serverModel,omitempty"`

	// settings
	Settings string `json:"settings,omitempty"`

	// vault credentials
	VaultCredentials []*DtoVaultCredential `json:"vaultCredentials"`
}

// Validate validates this dto node
func (m *DtoNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoNode) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	for i := 0; i < len(m.Credentials); i++ {
		if swag.IsZero(m.Credentials[i]) { // not required
			continue
		}

		if m.Credentials[i] != nil {
			if err := m.Credentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("credentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoNode) validateNetworks(formats strfmt.Registry) error {
	if swag.IsZero(m.Networks) { // not required
		return nil
	}

	if m.Networks != nil {
		if err := m.Networks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networks")
			}
			return err
		}
	}

	return nil
}

func (m *DtoNode) validateVaultCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.VaultCredentials) { // not required
		return nil
	}

	for i := 0; i < len(m.VaultCredentials); i++ {
		if swag.IsZero(m.VaultCredentials[i]) { // not required
			continue
		}

		if m.VaultCredentials[i] != nil {
			if err := m.VaultCredentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vaultCredentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vaultCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this dto node based on the context it is used
func (m *DtoNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVaultCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoNode) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Credentials); i++ {

		if m.Credentials[i] != nil {

			if swag.IsZero(m.Credentials[i]) { // not required
				return nil
			}

			if err := m.Credentials[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("credentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoNode) contextValidateNetworks(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Networks) { // not required
		return nil
	}

	if err := m.Networks.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("networks")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("networks")
		}
		return err
	}

	return nil
}

func (m *DtoNode) contextValidateVaultCredentials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VaultCredentials); i++ {

		if m.VaultCredentials[i] != nil {

			if swag.IsZero(m.VaultCredentials[i]) { // not required
				return nil
			}

			if err := m.VaultCredentials[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vaultCredentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vaultCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DtoNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoNode) UnmarshalBinary(b []byte) error {
	var res DtoNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
