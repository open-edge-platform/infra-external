// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoDtoSettingRule dto dto setting rule
//
// swagger:model dto.DtoSettingRule
type DtoDtoSettingRule struct {

	// default value
	DefaultValue interface{} `json:"defaultValue,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// enum
	Enum []interface{} `json:"enum"`

	// example
	Example interface{} `json:"example,omitempty"`

	// format
	Format string `json:"format,omitempty"`

	// format expression
	FormatExpression string `json:"formatExpression,omitempty"`

	// item type
	ItemType interface{} `json:"itemType,omitempty"`

	// limitations
	Limitations []*DtoLimitation `json:"limitations"`

	// model
	Model string `json:"model,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// optional
	Optional bool `json:"optional,omitempty"`

	// param type
	ParamType string `json:"paramType,omitempty"`

	// properties
	Properties []interface{} `json:"properties"`

	// read only
	ReadOnly bool `json:"readOnly,omitempty"`

	// required for deployment
	RequiredForDeployment bool `json:"requiredForDeployment,omitempty"`

	// tool tip
	ToolTip string `json:"toolTip,omitempty"`
}

// Validate validates this dto dto setting rule
func (m *DtoDtoSettingRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimitations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoDtoSettingRule) validateLimitations(formats strfmt.Registry) error {
	if swag.IsZero(m.Limitations) { // not required
		return nil
	}

	for i := 0; i < len(m.Limitations); i++ {
		if swag.IsZero(m.Limitations[i]) { // not required
			continue
		}

		if m.Limitations[i] != nil {
			if err := m.Limitations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("limitations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("limitations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this dto dto setting rule based on the context it is used
func (m *DtoDtoSettingRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLimitations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoDtoSettingRule) contextValidateLimitations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Limitations); i++ {

		if m.Limitations[i] != nil {

			if swag.IsZero(m.Limitations[i]) { // not required
				return nil
			}

			if err := m.Limitations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("limitations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("limitations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DtoDtoSettingRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoDtoSettingRule) UnmarshalBinary(b []byte) error {
	var res DtoDtoSettingRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
