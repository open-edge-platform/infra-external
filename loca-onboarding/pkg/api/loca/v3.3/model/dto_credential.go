// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoCredential The credential
//
// swagger:model dto.Credential
type DtoCredential struct {

	// the approach of the credential
	Approach string `json:"approach,omitempty"`

	// the policy of the credential
	CredentialPolicy struct {
		DtoCredentialPolicy
	} `json:"credentialPolicy,omitempty"`

	// the kind of the credential
	Kind string `json:"kind,omitempty"`

	// the password of the credential
	Password string `json:"password,omitempty"`

	// the username of the credential
	Username string `json:"username,omitempty"`
}

// Validate validates this dto credential
func (m *DtoCredential) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentialPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoCredential) validateCredentialPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.CredentialPolicy) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this dto credential based on the context it is used
func (m *DtoCredential) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentialPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoCredential) contextValidateCredentialPolicy(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *DtoCredential) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoCredential) UnmarshalBinary(b []byte) error {
	var res DtoCredential
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
