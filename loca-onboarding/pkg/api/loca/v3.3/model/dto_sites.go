// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoSites dto sites
//
// swagger:model dto.Sites
type DtoSites struct {

	// address
	Address string `json:"address,omitempty"`

	// city
	City string `json:"city,omitempty"`

	// cloud services affinity q
	CloudServicesAffinityQ DtoServiceItemWithRole `json:"cloudServicesAffinityQ,omitempty"`

	// cloud type
	CloudType string `json:"cloudType,omitempty"`

	// cluster
	Cluster string `json:"cluster,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// custom services affinity q
	CustomServicesAffinityQ DtoServiceItemWithRole `json:"customServicesAffinityQ,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// geo
	Geo string `json:"geo,omitempty"`

	// gps coordinates
	GpsCoordinates string `json:"gpsCoordinates,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// ip ranges affinity q
	IPRangesAffinityQ DtoIPRangeWithRole `json:"ipRangesAffinityQ,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// network services affinity q
	NetworkServicesAffinityQ DtoServiceItemWithRole `json:"networkServicesAffinityQ,omitempty"`

	// post code
	PostCode string `json:"postCode,omitempty"`

	// province
	Province string `json:"province,omitempty"`

	// sanity check status
	SanityCheckStatus string `json:"sanityCheckStatus,omitempty"`

	// sanity check summary
	SanityCheckSummary []*DtoSanityCheckSummary `json:"sanityCheckSummary"`

	// site code
	SiteCode string `json:"siteCode,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this dto sites
func (m *DtoSites) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudServicesAffinityQ(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomServicesAffinityQ(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPRangesAffinityQ(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkServicesAffinityQ(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSanityCheckSummary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoSites) validateCloudServicesAffinityQ(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudServicesAffinityQ) { // not required
		return nil
	}

	if m.CloudServicesAffinityQ != nil {
		if err := m.CloudServicesAffinityQ.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudServicesAffinityQ")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudServicesAffinityQ")
			}
			return err
		}
	}

	return nil
}

func (m *DtoSites) validateCustomServicesAffinityQ(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomServicesAffinityQ) { // not required
		return nil
	}

	if m.CustomServicesAffinityQ != nil {
		if err := m.CustomServicesAffinityQ.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customServicesAffinityQ")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customServicesAffinityQ")
			}
			return err
		}
	}

	return nil
}

func (m *DtoSites) validateIPRangesAffinityQ(formats strfmt.Registry) error {
	if swag.IsZero(m.IPRangesAffinityQ) { // not required
		return nil
	}

	if m.IPRangesAffinityQ != nil {
		if err := m.IPRangesAffinityQ.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipRangesAffinityQ")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipRangesAffinityQ")
			}
			return err
		}
	}

	return nil
}

func (m *DtoSites) validateNetworkServicesAffinityQ(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkServicesAffinityQ) { // not required
		return nil
	}

	if m.NetworkServicesAffinityQ != nil {
		if err := m.NetworkServicesAffinityQ.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkServicesAffinityQ")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkServicesAffinityQ")
			}
			return err
		}
	}

	return nil
}

func (m *DtoSites) validateSanityCheckSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.SanityCheckSummary) { // not required
		return nil
	}

	for i := 0; i < len(m.SanityCheckSummary); i++ {
		if swag.IsZero(m.SanityCheckSummary[i]) { // not required
			continue
		}

		if m.SanityCheckSummary[i] != nil {
			if err := m.SanityCheckSummary[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sanityCheckSummary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sanityCheckSummary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this dto sites based on the context it is used
func (m *DtoSites) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudServicesAffinityQ(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomServicesAffinityQ(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPRangesAffinityQ(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkServicesAffinityQ(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSanityCheckSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoSites) contextValidateCloudServicesAffinityQ(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.CloudServicesAffinityQ) { // not required
		return nil
	}

	if err := m.CloudServicesAffinityQ.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cloudServicesAffinityQ")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cloudServicesAffinityQ")
		}
		return err
	}

	return nil
}

func (m *DtoSites) contextValidateCustomServicesAffinityQ(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.CustomServicesAffinityQ) { // not required
		return nil
	}

	if err := m.CustomServicesAffinityQ.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("customServicesAffinityQ")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("customServicesAffinityQ")
		}
		return err
	}

	return nil
}

func (m *DtoSites) contextValidateIPRangesAffinityQ(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.IPRangesAffinityQ) { // not required
		return nil
	}

	if err := m.IPRangesAffinityQ.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ipRangesAffinityQ")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ipRangesAffinityQ")
		}
		return err
	}

	return nil
}

func (m *DtoSites) contextValidateNetworkServicesAffinityQ(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkServicesAffinityQ) { // not required
		return nil
	}

	if err := m.NetworkServicesAffinityQ.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("networkServicesAffinityQ")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("networkServicesAffinityQ")
		}
		return err
	}

	return nil
}

func (m *DtoSites) contextValidateSanityCheckSummary(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SanityCheckSummary); i++ {

		if m.SanityCheckSummary[i] != nil {

			if swag.IsZero(m.SanityCheckSummary[i]) { // not required
				return nil
			}

			if err := m.SanityCheckSummary[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sanityCheckSummary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sanityCheckSummary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DtoSites) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoSites) UnmarshalBinary(b []byte) error {
	var res DtoSites
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
