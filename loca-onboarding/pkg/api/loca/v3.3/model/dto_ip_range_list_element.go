// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoIPRangeListElement dto IP range list element
//
// swagger:model dto.IPRangeListElement
type DtoIPRangeListElement struct {

	// allocation strategy
	AllocationStrategy string `json:"allocationStrategy,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// end address
	EndAddress string `json:"endAddress,omitempty"`

	// gateway
	Gateway string `json:"gateway,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// instances
	Instances []string `json:"instances"`

	// name
	Name string `json:"name,omitempty"`

	// netmask
	Netmask int64 `json:"netmask,omitempty"`

	// role
	Role string `json:"role,omitempty"`

	// site association
	SiteAssociation []string `json:"siteAssociation"`

	// size
	Size int64 `json:"size,omitempty"`

	// start address
	StartAddress string `json:"startAddress,omitempty"`

	// subnet
	Subnet string `json:"subnet,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// vlan
	Vlan string `json:"vlan,omitempty"`
}

// Validate validates this dto IP range list element
func (m *DtoIPRangeListElement) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this dto IP range list element based on context it is used
func (m *DtoIPRangeListElement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DtoIPRangeListElement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoIPRangeListElement) UnmarshalBinary(b []byte) error {
	var res DtoIPRangeListElement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
