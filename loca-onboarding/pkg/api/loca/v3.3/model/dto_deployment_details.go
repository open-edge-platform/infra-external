// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoDeploymentDetails dto deployment details
//
// swagger:model dto.DeploymentDetails
type DtoDeploymentDetails struct {

	// authentication type
	AuthenticationType string `json:"authenticationType,omitempty"`

	// cloud version
	CloudVersion string `json:"cloudVersion,omitempty"`

	// device model
	DeviceModel string `json:"deviceModel,omitempty"`

	// device profile
	DeviceProfile *DtoDeviceProfile `json:"deviceProfile,omitempty"`

	// flavor name
	FlavorName string `json:"flavorName,omitempty"`

	// nodes of cluster
	NodesOfCluster int64 `json:"nodesOfCluster,omitempty"`

	// number of sites
	NumberOfSites int64 `json:"numberOfSites,omitempty"`

	// template name
	TemplateName string `json:"templateName,omitempty"`
}

// Validate validates this dto deployment details
func (m *DtoDeploymentDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceProfile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoDeploymentDetails) validateDeviceProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceProfile) { // not required
		return nil
	}

	if m.DeviceProfile != nil {
		if err := m.DeviceProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceProfile")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this dto deployment details based on the context it is used
func (m *DtoDeploymentDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeviceProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoDeploymentDetails) contextValidateDeviceProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceProfile != nil {

		if swag.IsZero(m.DeviceProfile) { // not required
			return nil
		}

		if err := m.DeviceProfile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceProfile")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DtoDeploymentDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoDeploymentDetails) UnmarshalBinary(b []byte) error {
	var res DtoDeploymentDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
