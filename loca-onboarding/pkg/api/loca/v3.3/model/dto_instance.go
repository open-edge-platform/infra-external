// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DtoInstance dto instance
//
// swagger:model dto.Instance
type DtoInstance struct {

	// cloud networks
	CloudNetworks map[string]DtoNetwork `json:"cloudNetworks,omitempty"`

	// cloud services
	CloudServices map[string][]DtoService `json:"cloudServices,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// device profile
	DeviceProfile *DtoDeviceProfile `json:"deviceProfile,omitempty"`

	// extra vars
	ExtraVars map[string]interface{} `json:"extraVars,omitempty"`

	// extra vars vault internal secret path
	ExtraVarsVaultInternalSecretPath map[string]string `json:"extraVarsVaultInternalSecretPath,omitempty"`

	// flavor
	Flavor string `json:"flavor,omitempty"`

	// flavor version
	FlavorVersion string `json:"flavorVersion,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// kind
	Kind string `json:"kind,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// network services
	NetworkServices map[string][]DtoService `json:"networkServices,omitempty"`

	// nodes
	Nodes []*DtoNode `json:"nodes"`

	// operation
	Operation string `json:"operation,omitempty"`

	// site
	Site string `json:"site,omitempty"`

	// stage
	Stage string `json:"stage,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// template
	Template *DtoTemplate `json:"template,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this dto instance
func (m *DtoInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoInstance) validateCloudNetworks(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudNetworks) { // not required
		return nil
	}

	for k := range m.CloudNetworks {

		if err := validate.Required("cloudNetworks"+"."+k, "body", m.CloudNetworks[k]); err != nil {
			return err
		}
		if val, ok := m.CloudNetworks[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloudNetworks" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloudNetworks" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoInstance) validateCloudServices(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudServices) { // not required
		return nil
	}

	for k := range m.CloudServices {

		if err := validate.Required("cloudServices"+"."+k, "body", m.CloudServices[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.CloudServices[k]); i++ {

			if err := m.CloudServices[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloudServices" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloudServices" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *DtoInstance) validateDeviceProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceProfile) { // not required
		return nil
	}

	if m.DeviceProfile != nil {
		if err := m.DeviceProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceProfile")
			}
			return err
		}
	}

	return nil
}

func (m *DtoInstance) validateNetworkServices(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkServices) { // not required
		return nil
	}

	for k := range m.NetworkServices {

		if err := validate.Required("networkServices"+"."+k, "body", m.NetworkServices[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.NetworkServices[k]); i++ {

			if err := m.NetworkServices[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkServices" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkServices" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *DtoInstance) validateNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.Nodes) { // not required
		return nil
	}

	for i := 0; i < len(m.Nodes); i++ {
		if swag.IsZero(m.Nodes[i]) { // not required
			continue
		}

		if m.Nodes[i] != nil {
			if err := m.Nodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoInstance) validateTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this dto instance based on the context it is used
func (m *DtoInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudNetworks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoInstance) contextValidateCloudNetworks(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.CloudNetworks {

		if val, ok := m.CloudNetworks[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DtoInstance) contextValidateCloudServices(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.CloudServices {

		for i := 0; i < len(m.CloudServices[k]); i++ {

			if swag.IsZero(m.CloudServices[k][i]) { // not required
				return nil
			}

			if err := m.CloudServices[k][i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloudServices" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloudServices" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *DtoInstance) contextValidateDeviceProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceProfile != nil {

		if swag.IsZero(m.DeviceProfile) { // not required
			return nil
		}

		if err := m.DeviceProfile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceProfile")
			}
			return err
		}
	}

	return nil
}

func (m *DtoInstance) contextValidateNetworkServices(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.NetworkServices {

		for i := 0; i < len(m.NetworkServices[k]); i++ {

			if swag.IsZero(m.NetworkServices[k][i]) { // not required
				return nil
			}

			if err := m.NetworkServices[k][i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkServices" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkServices" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *DtoInstance) contextValidateNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nodes); i++ {

		if m.Nodes[i] != nil {

			if swag.IsZero(m.Nodes[i]) { // not required
				return nil
			}

			if err := m.Nodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoInstance) contextValidateTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.Template != nil {

		if swag.IsZero(m.Template) { // not required
			return nil
		}

		if err := m.Template.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DtoInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoInstance) UnmarshalBinary(b []byte) error {
	var res DtoInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
