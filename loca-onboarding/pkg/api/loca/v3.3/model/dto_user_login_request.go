// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DtoUserLoginRequest dto user login request
//
// swagger:model dto.UserLoginRequest
type DtoUserLoginRequest struct {

	// id
	ID string `json:"_id,omitempty"`

	// expiration period
	ExpirationPeriod string `json:"expiration_period,omitempty"`

	// name
	// Required: true
	// Max Length: 30
	// Min Length: 3
	Name *string `json:"name"`

	// new password
	NewPassword string `json:"new_password,omitempty"`

	// password
	// Required: true
	// Max Length: 256
	// Min Length: 5
	Password *string `json:"password"`

	// role
	Role string `json:"role,omitempty"`
}

// Validate validates this dto user login request
func (m *DtoUserLoginRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoUserLoginRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 30); err != nil {
		return err
	}

	return nil
}

func (m *DtoUserLoginRequest) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", *m.Password, 5); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", *m.Password, 256); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this dto user login request based on context it is used
func (m *DtoUserLoginRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DtoUserLoginRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoUserLoginRequest) UnmarshalBinary(b []byte) error {
	var res DtoUserLoginRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
