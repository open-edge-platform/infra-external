// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HpcgitlabLabsLenovoComLocBackendPkgNexusModelsCredential hpcgitlab labs lenovo com loc backend pkg nexus models credential
//
// swagger:model hpcgitlab_labs_lenovo_com_loc_backend_pkg_nexus_models.Credential
type HpcgitlabLabsLenovoComLocBackendPkgNexusModelsCredential struct {

	// approach
	Approach string `json:"approach,omitempty"`

	// credential policy
	CredentialPolicy *ModelsCredentialPolicy `json:"credentialPolicy,omitempty"`

	// kind
	Kind string `json:"kind,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this hpcgitlab labs lenovo com loc backend pkg nexus models credential
func (m *HpcgitlabLabsLenovoComLocBackendPkgNexusModelsCredential) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentialPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HpcgitlabLabsLenovoComLocBackendPkgNexusModelsCredential) validateCredentialPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.CredentialPolicy) { // not required
		return nil
	}

	if m.CredentialPolicy != nil {
		if err := m.CredentialPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentialPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentialPolicy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hpcgitlab labs lenovo com loc backend pkg nexus models credential based on the context it is used
func (m *HpcgitlabLabsLenovoComLocBackendPkgNexusModelsCredential) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentialPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HpcgitlabLabsLenovoComLocBackendPkgNexusModelsCredential) contextValidateCredentialPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.CredentialPolicy != nil {

		if swag.IsZero(m.CredentialPolicy) { // not required
			return nil
		}

		if err := m.CredentialPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentialPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentialPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HpcgitlabLabsLenovoComLocBackendPkgNexusModelsCredential) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HpcgitlabLabsLenovoComLocBackendPkgNexusModelsCredential) UnmarshalBinary(b []byte) error {
	var res HpcgitlabLabsLenovoComLocBackendPkgNexusModelsCredential
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
