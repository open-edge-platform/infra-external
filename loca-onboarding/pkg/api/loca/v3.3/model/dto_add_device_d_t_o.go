// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoAddDeviceDTO dto add device d t o
//
// swagger:model dto.AddDeviceDTO
type DtoAddDeviceDTO struct {

	// bmc credentials
	BmcCredentials []*DtoDeviceCredential `json:"bmcCredentials"`

	// ip
	IP string `json:"ip,omitempty"`

	// site
	Site string `json:"site,omitempty"`

	// sn
	Sn string `json:"sn,omitempty"`

	// uefi credentials
	UefiCredentials []*DtoDeviceCredential `json:"uefiCredentials"`
}

// Validate validates this dto add device d t o
func (m *DtoAddDeviceDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBmcCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUefiCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoAddDeviceDTO) validateBmcCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.BmcCredentials) { // not required
		return nil
	}

	for i := 0; i < len(m.BmcCredentials); i++ {
		if swag.IsZero(m.BmcCredentials[i]) { // not required
			continue
		}

		if m.BmcCredentials[i] != nil {
			if err := m.BmcCredentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bmcCredentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bmcCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoAddDeviceDTO) validateUefiCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.UefiCredentials) { // not required
		return nil
	}

	for i := 0; i < len(m.UefiCredentials); i++ {
		if swag.IsZero(m.UefiCredentials[i]) { // not required
			continue
		}

		if m.UefiCredentials[i] != nil {
			if err := m.UefiCredentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("uefiCredentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("uefiCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this dto add device d t o based on the context it is used
func (m *DtoAddDeviceDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBmcCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUefiCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoAddDeviceDTO) contextValidateBmcCredentials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BmcCredentials); i++ {

		if m.BmcCredentials[i] != nil {

			if swag.IsZero(m.BmcCredentials[i]) { // not required
				return nil
			}

			if err := m.BmcCredentials[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bmcCredentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bmcCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoAddDeviceDTO) contextValidateUefiCredentials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UefiCredentials); i++ {

		if m.UefiCredentials[i] != nil {

			if swag.IsZero(m.UefiCredentials[i]) { // not required
				return nil
			}

			if err := m.UefiCredentials[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("uefiCredentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("uefiCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DtoAddDeviceDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoAddDeviceDTO) UnmarshalBinary(b []byte) error {
	var res DtoAddDeviceDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
