// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoCreateTemplateRequest the template metadata
//
// swagger:model dto.CreateTemplateRequest
type DtoCreateTemplateRequest struct {

	// the description of the template
	Description string `json:"description,omitempty"`

	// the device profile of the template
	DeviceProfileID string `json:"deviceProfileID,omitempty"`

	// the device list of the template
	Devices []*DtoCreateUpdateTemplateDevice `json:"devices"`

	// the extra vars of the template(the key should be a string and the value can be any type)
	ExtraVars interface{} `json:"extraVars,omitempty"`

	// Kind               string                         `json:"kind" swaggerignore:"true"`               // The kind of the template (os/cloud)
	InstanceInfo struct {
		DtoTemplateInstanceInfo
	} `json:"instanceInfo,omitempty"`

	// The kind of the template (os/cloud)
	Kind string `json:"kind,omitempty"`

	// the name of the template
	Name string `json:"name,omitempty"`

	// the networking of the template
	Networking struct {
		DtoCreateUpdateTemplateNetworking
	} `json:"networking,omitempty"`
}

// Validate validates this dto create template request
func (m *DtoCreateTemplateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworking(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoCreateTemplateRequest) validateDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.Devices) { // not required
		return nil
	}

	for i := 0; i < len(m.Devices); i++ {
		if swag.IsZero(m.Devices[i]) { // not required
			continue
		}

		if m.Devices[i] != nil {
			if err := m.Devices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoCreateTemplateRequest) validateInstanceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceInfo) { // not required
		return nil
	}

	return nil
}

func (m *DtoCreateTemplateRequest) validateNetworking(formats strfmt.Registry) error {
	if swag.IsZero(m.Networking) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this dto create template request based on the context it is used
func (m *DtoCreateTemplateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstanceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworking(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoCreateTemplateRequest) contextValidateDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Devices); i++ {

		if m.Devices[i] != nil {

			if swag.IsZero(m.Devices[i]) { // not required
				return nil
			}

			if err := m.Devices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoCreateTemplateRequest) contextValidateInstanceInfo(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *DtoCreateTemplateRequest) contextValidateNetworking(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *DtoCreateTemplateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoCreateTemplateRequest) UnmarshalBinary(b []byte) error {
	var res DtoCreateTemplateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
