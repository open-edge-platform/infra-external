// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoSite dto site
//
// swagger:model dto.Site
type DtoSite struct {

	// address
	Address string `json:"address,omitempty"`

	// city
	City string `json:"city,omitempty"`

	// cloud services
	CloudServices []*DtoServiceAffinityItem `json:"cloudServices"`

	// cloud type
	CloudType string `json:"cloudType,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// custom services
	CustomServices []*DtoServiceAffinityItem `json:"customServices"`

	// description
	Description string `json:"description,omitempty"`

	// dns
	DNS []*DtoServiceAffinityItem `json:"dns"`

	// geo
	Geo string `json:"geo,omitempty"`

	// gps coordinates
	GpsCoordinates string `json:"gpsCoordinates,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// ipranges
	Ipranges []*DtoSiteIpranges `json:"ipranges"`

	// name
	Name string `json:"name,omitempty"`

	// ntp
	Ntp []*DtoServiceAffinityItem `json:"ntp"`

	// post code
	PostCode string `json:"postCode,omitempty"`

	// province
	Province string `json:"province,omitempty"`

	// proxy services
	ProxyServices []*DtoServiceAffinityItem `json:"proxyServices"`

	// site code
	SiteCode string `json:"siteCode,omitempty"`

	// time zone
	TimeZone string `json:"timeZone,omitempty"`
}

// Validate validates this dto site
func (m *DtoSite) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIpranges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoSite) validateCloudServices(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudServices) { // not required
		return nil
	}

	for i := 0; i < len(m.CloudServices); i++ {
		if swag.IsZero(m.CloudServices[i]) { // not required
			continue
		}

		if m.CloudServices[i] != nil {
			if err := m.CloudServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloudServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloudServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoSite) validateCustomServices(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomServices) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomServices); i++ {
		if swag.IsZero(m.CustomServices[i]) { // not required
			continue
		}

		if m.CustomServices[i] != nil {
			if err := m.CustomServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoSite) validateDNS(formats strfmt.Registry) error {
	if swag.IsZero(m.DNS) { // not required
		return nil
	}

	for i := 0; i < len(m.DNS); i++ {
		if swag.IsZero(m.DNS[i]) { // not required
			continue
		}

		if m.DNS[i] != nil {
			if err := m.DNS[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoSite) validateIpranges(formats strfmt.Registry) error {
	if swag.IsZero(m.Ipranges) { // not required
		return nil
	}

	for i := 0; i < len(m.Ipranges); i++ {
		if swag.IsZero(m.Ipranges[i]) { // not required
			continue
		}

		if m.Ipranges[i] != nil {
			if err := m.Ipranges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipranges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ipranges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoSite) validateNtp(formats strfmt.Registry) error {
	if swag.IsZero(m.Ntp) { // not required
		return nil
	}

	for i := 0; i < len(m.Ntp); i++ {
		if swag.IsZero(m.Ntp[i]) { // not required
			continue
		}

		if m.Ntp[i] != nil {
			if err := m.Ntp[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ntp" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ntp" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoSite) validateProxyServices(formats strfmt.Registry) error {
	if swag.IsZero(m.ProxyServices) { // not required
		return nil
	}

	for i := 0; i < len(m.ProxyServices); i++ {
		if swag.IsZero(m.ProxyServices[i]) { // not required
			continue
		}

		if m.ProxyServices[i] != nil {
			if err := m.ProxyServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("proxyServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("proxyServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this dto site based on the context it is used
func (m *DtoSite) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDNS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIpranges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNtp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProxyServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoSite) contextValidateCloudServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CloudServices); i++ {

		if m.CloudServices[i] != nil {

			if swag.IsZero(m.CloudServices[i]) { // not required
				return nil
			}

			if err := m.CloudServices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloudServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloudServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoSite) contextValidateCustomServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomServices); i++ {

		if m.CustomServices[i] != nil {

			if swag.IsZero(m.CustomServices[i]) { // not required
				return nil
			}

			if err := m.CustomServices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoSite) contextValidateDNS(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DNS); i++ {

		if m.DNS[i] != nil {

			if swag.IsZero(m.DNS[i]) { // not required
				return nil
			}

			if err := m.DNS[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoSite) contextValidateIpranges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ipranges); i++ {

		if m.Ipranges[i] != nil {

			if swag.IsZero(m.Ipranges[i]) { // not required
				return nil
			}

			if err := m.Ipranges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipranges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ipranges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoSite) contextValidateNtp(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ntp); i++ {

		if m.Ntp[i] != nil {

			if swag.IsZero(m.Ntp[i]) { // not required
				return nil
			}

			if err := m.Ntp[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ntp" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ntp" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoSite) contextValidateProxyServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProxyServices); i++ {

		if m.ProxyServices[i] != nil {

			if swag.IsZero(m.ProxyServices[i]) { // not required
				return nil
			}

			if err := m.ProxyServices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("proxyServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("proxyServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DtoSite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoSite) UnmarshalBinary(b []byte) error {
	var res DtoSite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
