// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DtoTemplate the template metadata
//
// swagger:model dto.Template
type DtoTemplate struct {

	// the alerts of the template
	Alerts []string `json:"alerts"`

	// the creation time of the template
	CreatedAt string `json:"created_at,omitempty"`

	// the description of the template
	Description string `json:"description,omitempty"`

	// the device profile of the template
	DeviceProfile struct {
		DtoDeviceProfile
	} `json:"deviceProfile,omitempty"`

	// the device list of the template
	Devices []*DtoTemplateDevice `json:"devices"`

	// the extra vars of the template(the key should be a string and the value can be any type)  //Sorin TBD.....
	ExtraVars map[string]interface{} `json:"extraVars,omitempty"`

	// extra vars vault internal secret path
	ExtraVarsVaultInternalSecretPath map[string]string `json:"extraVarsVaultInternalSecretPath,omitempty"`

	// the extra vars of the template with the display names
	ExtraVarsWithDisplayName map[string]DtoExtraVarItem `json:"extraVarsWithDisplayName,omitempty"`

	// the id of the template
	ID string `json:"id,omitempty"`

	// the instance info of the template
	InstanceInfo struct {
		DtoTemplateInstanceInfo
	} `json:"instanceInfo,omitempty"`

	// the instance list refers to this template
	Instances []string `json:"instances"`

	// The kind of the template (os/cloud)
	Kind string `json:"kind,omitempty"`

	// the name of the template
	Name string `json:"name,omitempty"`

	// the networking of the template
	Networking struct {
		DtoTemplateNetworking
	} `json:"networking,omitempty"`

	// the status of the template
	Status string `json:"status,omitempty"`

	// the updation time of the template
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this dto template
func (m *DtoTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraVarsWithDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworking(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoTemplate) validateDeviceProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceProfile) { // not required
		return nil
	}

	return nil
}

func (m *DtoTemplate) validateDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.Devices) { // not required
		return nil
	}

	for i := 0; i < len(m.Devices); i++ {
		if swag.IsZero(m.Devices[i]) { // not required
			continue
		}

		if m.Devices[i] != nil {
			if err := m.Devices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoTemplate) validateExtraVarsWithDisplayName(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtraVarsWithDisplayName) { // not required
		return nil
	}

	for k := range m.ExtraVarsWithDisplayName {

		if err := validate.Required("extraVarsWithDisplayName"+"."+k, "body", m.ExtraVarsWithDisplayName[k]); err != nil {
			return err
		}
		if val, ok := m.ExtraVarsWithDisplayName[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extraVarsWithDisplayName" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extraVarsWithDisplayName" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoTemplate) validateInstanceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceInfo) { // not required
		return nil
	}

	return nil
}

func (m *DtoTemplate) validateNetworking(formats strfmt.Registry) error {
	if swag.IsZero(m.Networking) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this dto template based on the context it is used
func (m *DtoTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeviceProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtraVarsWithDisplayName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstanceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworking(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoTemplate) contextValidateDeviceProfile(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *DtoTemplate) contextValidateDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Devices); i++ {

		if m.Devices[i] != nil {

			if swag.IsZero(m.Devices[i]) { // not required
				return nil
			}

			if err := m.Devices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoTemplate) contextValidateExtraVarsWithDisplayName(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.ExtraVarsWithDisplayName {

		if val, ok := m.ExtraVarsWithDisplayName[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DtoTemplate) contextValidateInstanceInfo(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *DtoTemplate) contextValidateNetworking(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *DtoTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoTemplate) UnmarshalBinary(b []byte) error {
	var res DtoTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
