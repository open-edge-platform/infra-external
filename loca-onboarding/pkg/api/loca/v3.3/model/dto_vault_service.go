// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoVaultService dto vault service
//
// swagger:model dto.VaultService
type DtoVaultService struct {

	// type Service struct -> Credentials
	Credentials []*HpcgitlabLabsLenovoComLocBackendCmdAPIModelsCredential `json:"credentials"`

	// type Service struct -> Description
	Description string `json:"description,omitempty"`

	// type Service struct -> Name
	Name string `json:"name,omitempty"`

	// not in type Service struct, logic bool
	NeedsUpdate bool `json:"needsUpdate,omitempty"`

	// type Service struct -> PlatformType
	PlatformType string `json:"platformType,omitempty"`

	// type Service struct -> Port
	Port int64 `json:"port,omitempty"`

	// type Service struct -> Protocol
	Protocol string `json:"protocol,omitempty"`

	// type Service struct -> ReadOnly
	ReadOnly bool `json:"readOnly,omitempty"`

	// type Service struct -> Role
	Role string `json:"role,omitempty"`

	// type Service struct -> Address
	ServiceAddress string `json:"serviceAddress,omitempty"`

	// type Service struct -> ServiceType
	ServiceType string `json:"serviceType,omitempty"`

	// type Service struct -> Status
	Status string `json:"status,omitempty"`

	// not in type Service struct but derived from above fields
	URL string `json:"url,omitempty"`

	// vault internal secret path
	VaultInternalSecretPath []string `json:"vaultInternalSecretPath"`

	// type Service struct -> VaultMountPath
	VaultMountPath string `json:"vaultMountPath,omitempty"`

	// vault s p templates
	VaultSPTemplates map[string]string `json:"vaultSPTemplates,omitempty"`

	// first part type Service struct -> VaultSecretPath
	VaultSecretPath string `json:"vaultSecretPath,omitempty"`

	// vault secret template
	VaultSecretTemplate map[string]string `json:"vaultSecretTemplate,omitempty"`

	// second part (teh rest) of type Service struct -> VaultSecretPath
	VaultUserPath string `json:"vaultUserPath,omitempty"`
}

// Validate validates this dto vault service
func (m *DtoVaultService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoVaultService) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	for i := 0; i < len(m.Credentials); i++ {
		if swag.IsZero(m.Credentials[i]) { // not required
			continue
		}

		if m.Credentials[i] != nil {
			if err := m.Credentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("credentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this dto vault service based on the context it is used
func (m *DtoVaultService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoVaultService) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Credentials); i++ {

		if m.Credentials[i] != nil {

			if swag.IsZero(m.Credentials[i]) { // not required
				return nil
			}

			if err := m.Credentials[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("credentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DtoVaultService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoVaultService) UnmarshalBinary(b []byte) error {
	var res DtoVaultService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
