// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoUserRefreshTokenResponse dto user refresh token response
//
// swagger:model dto.UserRefreshTokenResponse
type DtoUserRefreshTokenResponse struct {

	// data
	Data *DtoUserRefreshTokenResponseData `json:"data,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// status code
	StatusCode int64 `json:"statusCode,omitempty"`
}

// Validate validates this dto user refresh token response
func (m *DtoUserRefreshTokenResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoUserRefreshTokenResponse) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this dto user refresh token response based on the context it is used
func (m *DtoUserRefreshTokenResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoUserRefreshTokenResponse) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {

		if swag.IsZero(m.Data) { // not required
			return nil
		}

		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DtoUserRefreshTokenResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoUserRefreshTokenResponse) UnmarshalBinary(b []byte) error {
	var res DtoUserRefreshTokenResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DtoUserRefreshTokenResponseData dto user refresh token response data
//
// swagger:model DtoUserRefreshTokenResponseData
type DtoUserRefreshTokenResponseData struct {

	// access token
	AccessToken string `json:"access_token,omitempty"`

	// refresh token
	RefreshToken string `json:"refresh_token,omitempty"`

	// dto user refresh token response data
	DtoUserRefreshTokenResponseData map[string]string `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *DtoUserRefreshTokenResponseData) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// access token
		AccessToken string `json:"access_token,omitempty"`

		// refresh token
		RefreshToken string `json:"refresh_token,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv DtoUserRefreshTokenResponseData

	rcv.AccessToken = stage1.AccessToken
	rcv.RefreshToken = stage1.RefreshToken
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "access_token")
	delete(stage2, "refresh_token")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]string)
		for k, v := range stage2 {
			var toadd string
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.DtoUserRefreshTokenResponseData = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m DtoUserRefreshTokenResponseData) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// access token
		AccessToken string `json:"access_token,omitempty"`

		// refresh token
		RefreshToken string `json:"refresh_token,omitempty"`
	}

	stage1.AccessToken = m.AccessToken
	stage1.RefreshToken = m.RefreshToken

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.DtoUserRefreshTokenResponseData) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.DtoUserRefreshTokenResponseData)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this dto user refresh token response data
func (m *DtoUserRefreshTokenResponseData) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this dto user refresh token response data based on context it is used
func (m *DtoUserRefreshTokenResponseData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DtoUserRefreshTokenResponseData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoUserRefreshTokenResponseData) UnmarshalBinary(b []byte) error {
	var res DtoUserRefreshTokenResponseData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
