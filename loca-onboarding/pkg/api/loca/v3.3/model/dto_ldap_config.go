// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoLdapConfig dto ldap config
//
// swagger:model dto.LdapConfig
type DtoLdapConfig struct {

	// bind password
	BindPassword string `json:"bind_password,omitempty"`

	// bind username
	BindUsername string `json:"bind_username,omitempty"`

	// group filter
	GroupFilter string `json:"group_filter,omitempty"`

	// group search attribute
	GroupSearchAttribute []string `json:"group_search_attribute"`

	// id
	ID string `json:"id,omitempty"`

	// local role
	LocalRole string `json:"local_role,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// root dn
	RootDn string `json:"root_dn,omitempty"`

	// uris
	Uris []*DtoLdapURI `json:"uris"`

	// user filter
	UserFilter string `json:"user_filter,omitempty"`

	// user search attribute
	UserSearchAttribute string `json:"user_search_attribute,omitempty"`
}

// Validate validates this dto ldap config
func (m *DtoLdapConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUris(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoLdapConfig) validateUris(formats strfmt.Registry) error {
	if swag.IsZero(m.Uris) { // not required
		return nil
	}

	for i := 0; i < len(m.Uris); i++ {
		if swag.IsZero(m.Uris[i]) { // not required
			continue
		}

		if m.Uris[i] != nil {
			if err := m.Uris[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("uris" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("uris" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this dto ldap config based on the context it is used
func (m *DtoLdapConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUris(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoLdapConfig) contextValidateUris(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Uris); i++ {

		if m.Uris[i] != nil {

			if swag.IsZero(m.Uris[i]) { // not required
				return nil
			}

			if err := m.Uris[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("uris" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("uris" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DtoLdapConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoLdapConfig) UnmarshalBinary(b []byte) error {
	var res DtoLdapConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
