// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoNIC dto n i c
//
// swagger:model dto.NIC
type DtoNIC struct {

	// description
	Description string `json:"description,omitempty"`

	// ipaddress
	Ipaddress *DtoIpaddress `json:"ipaddress,omitempty"`

	// kind
	Kind string `json:"kind,omitempty"`

	// mac address
	MacAddress string `json:"macAddress,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// pci port
	PciPort string `json:"pciPort,omitempty"`

	// vlan
	Vlan string `json:"vlan,omitempty"`
}

// Validate validates this dto n i c
func (m *DtoNIC) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIpaddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoNIC) validateIpaddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Ipaddress) { // not required
		return nil
	}

	if m.Ipaddress != nil {
		if err := m.Ipaddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipaddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipaddress")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this dto n i c based on the context it is used
func (m *DtoNIC) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIpaddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoNIC) contextValidateIpaddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Ipaddress != nil {

		if swag.IsZero(m.Ipaddress) { // not required
			return nil
		}

		if err := m.Ipaddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipaddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipaddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DtoNIC) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoNIC) UnmarshalBinary(b []byte) error {
	var res DtoNIC
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
