// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for GetAMTFeaturesResponseOptInState.
const (
	GetAMTFeaturesResponseOptInStateN0 GetAMTFeaturesResponseOptInState = 0
	GetAMTFeaturesResponseOptInStateN1 GetAMTFeaturesResponseOptInState = 1
	GetAMTFeaturesResponseOptInStateN2 GetAMTFeaturesResponseOptInState = 2
	GetAMTFeaturesResponseOptInStateN3 GetAMTFeaturesResponseOptInState = 3
	GetAMTFeaturesResponseOptInStateN4 GetAMTFeaturesResponseOptInState = 4
	GetAMTFeaturesResponseOptInStateN5 GetAMTFeaturesResponseOptInState = 5
)

// Defines values for PowerActionRequestAction.
const (
	PowerActionRequestActionN10  PowerActionRequestAction = 10
	PowerActionRequestActionN100 PowerActionRequestAction = 100
	PowerActionRequestActionN101 PowerActionRequestAction = 101
	PowerActionRequestActionN104 PowerActionRequestAction = 104
	PowerActionRequestActionN12  PowerActionRequestAction = 12
	PowerActionRequestActionN14  PowerActionRequestAction = 14
	PowerActionRequestActionN2   PowerActionRequestAction = 2
	PowerActionRequestActionN200 PowerActionRequestAction = 200
	PowerActionRequestActionN201 PowerActionRequestAction = 201
	PowerActionRequestActionN202 PowerActionRequestAction = 202
	PowerActionRequestActionN203 PowerActionRequestAction = 203
	PowerActionRequestActionN300 PowerActionRequestAction = 300
	PowerActionRequestActionN301 PowerActionRequestAction = 301
	PowerActionRequestActionN4   PowerActionRequestAction = 4
	PowerActionRequestActionN400 PowerActionRequestAction = 400
	PowerActionRequestActionN401 PowerActionRequestAction = 401
	PowerActionRequestActionN5   PowerActionRequestAction = 5
	PowerActionRequestActionN7   PowerActionRequestAction = 7
	PowerActionRequestActionN8   PowerActionRequestAction = 8
)

// Defines values for SetAMTFeaturesRequestUserConsent.
const (
	All  SetAMTFeaturesRequestUserConsent = "all"
	Kvm  SetAMTFeaturesRequestUserConsent = "kvm"
	None SetAMTFeaturesRequestUserConsent = "none"
)

// AMTVersionResponse defines model for AMTVersionResponse.
type AMTVersionResponse struct {
	AMTSetupAndConfigurationService *struct {
		Response *struct {
			CreationClassName             *string `json:"CreationClassName,omitempty"`
			ElementName                   *string `json:"ElementName,omitempty"`
			EnabledState                  *int    `json:"EnabledState,omitempty"`
			Name                          *string `json:"Name,omitempty"`
			PasswordModel                 *int    `json:"PasswordModel,omitempty"`
			ProvisioningMode              *int    `json:"ProvisioningMode,omitempty"`
			ProvisioningServerOTP         *string `json:"ProvisioningServerOTP,omitempty"`
			ProvisioningState             *int    `json:"ProvisioningState,omitempty"`
			RequestedState                *int    `json:"RequestedState,omitempty"`
			SystemCreationClassName       *string `json:"SystemCreationClassName,omitempty"`
			SystemName                    *string `json:"SystemName,omitempty"`
			ZeroTouchConfigurationEnabled *bool   `json:"ZeroTouchConfigurationEnabled,omitempty"`
		} `json:"response,omitempty"`
		Responses *struct {
			Body *struct {
				CreationClassName             *string `json:"CreationClassName,omitempty"`
				ElementName                   *string `json:"ElementName,omitempty"`
				EnabledState                  *int    `json:"EnabledState,omitempty"`
				Name                          *string `json:"Name,omitempty"`
				PasswordModel                 *int    `json:"PasswordModel,omitempty"`
				ProvisioningMode              *int    `json:"ProvisioningMode,omitempty"`
				ProvisioningServerOTP         *string `json:"ProvisioningServerOTP,omitempty"`
				ProvisioningState             *int    `json:"ProvisioningState,omitempty"`
				RequestedState                *int    `json:"RequestedState,omitempty"`
				SystemCreationClassName       *string `json:"SystemCreationClassName,omitempty"`
				SystemName                    *string `json:"SystemName,omitempty"`
				ZeroTouchConfigurationEnabled *bool   `json:"ZeroTouchConfigurationEnabled,omitempty"`
			} `json:"Body,omitempty"`
			Header *struct {
				Action      *string `json:"Action,omitempty"`
				MessageID   *string `json:"MessageID,omitempty"`
				Method      *string `json:"Method,omitempty"`
				RelatesTo   *string `json:"RelatesTo,omitempty"`
				ResourceURI *string `json:"ResourceURI,omitempty"`
				To          *string `json:"To,omitempty"`
			} `json:"Header,omitempty"`
		} `json:"responses,omitempty"`
		Status *int `json:"status,omitempty"`
	} `json:"AMT_SetupAndConfigurationService,omitempty"`
	CIMSoftwareIdentity *struct {
		Responses *[]struct {
			InstanceID    *string `json:"InstanceID,omitempty"`
			IsEntity      *bool   `json:"IsEntity,omitempty"`
			VersionString *string `json:"VersionString,omitempty"`
		} `json:"responses,omitempty"`
		Status *int `json:"status,omitempty"`
	} `json:"CIM_SoftwareIdentity,omitempty"`
}

// AddDevice defines model for AddDevice.
type AddDevice struct {
	DeviceInfo *struct {
		CurrentMode *string `json:"currentMode,omitempty"`
		FwBuild     *string `json:"fwBuild,omitempty"`
		FwSku       *string `json:"fwSku,omitempty"`
		FwVersion   *string `json:"fwVersion,omitempty"`
		IpAddress   *string `json:"ipAddress,omitempty"`
	} `json:"deviceInfo,omitempty"`
	Guid     string   `json:"guid"`
	Hostname string   `json:"hostname"`
	Tags     []string `json:"tags"`
}

// AddDeviceResponse defines model for AddDeviceResponse.
type AddDeviceResponse struct {
	ConnectionStatus bool `json:"connectionStatus"`
	DeviceInfo       *struct {
		CurrentMode *string    `json:"currentMode,omitempty"`
		Features    *string    `json:"features,omitempty"`
		FwBuild     *string    `json:"fwBuild,omitempty"`
		FwSku       *string    `json:"fwSku,omitempty"`
		FwVersion   *string    `json:"fwVersion,omitempty"`
		IpAddress   *string    `json:"ipAddress,omitempty"`
		LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	} `json:"deviceInfo,omitempty"`
	DnsSuffix        string     `json:"dnsSuffix"`
	FriendlyName     string     `json:"friendlyName"`
	Guid             string     `json:"guid"`
	Hostname         string     `json:"hostname"`
	LastConnected    *time.Time `json:"lastConnected,omitempty"`
	LastDisconnected *time.Time `json:"lastDisconnected,omitempty"`
	LastSeen         *time.Time `json:"lastSeen,omitempty"`
	MpsInstance      string     `json:"mpsInstance"`
	Mpsusername      string     `json:"mpsusername"`
	Tags             []string   `json:"tags"`
	TenantID         string     `json:"tenantID"`
}

// AuditLogResponse defines model for AuditLogResponse.
type AuditLogResponse struct {
	AuditApp   *string `json:"AuditApp,omitempty"`
	AuditAppID *int    `json:"AuditAppID,omitempty"`
	Event      *string `json:"Event,omitempty"`
	EventID    *int    `json:"EventID,omitempty"`
	Ex         *struct {
		Data *[]int  `json:"data,omitempty"`
		Type *string `json:"type,omitempty"`
	} `json:"Ex,omitempty"`
	ExStr          *string `json:"ExStr,omitempty"`
	Initiator      *string `json:"Initiator,omitempty"`
	InitiatorType  *int    `json:"InitiatorType,omitempty"`
	MCLocationType *int    `json:"MCLocationType,omitempty"`
	NetAddress     *string `json:"NetAddress,omitempty"`
	Time           *string `json:"Time,omitempty"`
	Records        *string `json:"records,omitempty"`
	TotalCnt       *int    `json:"totalCnt,omitempty"`
}

// CiracertResponse defines model for CiracertResponse.
type CiracertResponse = interface{}

// DeactivateResponse defines model for DeactivateResponse.
type DeactivateResponse struct {
	Status *string `json:"status,omitempty"`
}

// DeleteAlarmErrorResponse defines model for DeleteAlarmErrorResponse.
type DeleteAlarmErrorResponse struct {
	// Error server error message
	Error *string `json:"error,omitempty"`

	// ErrorDescription contains device guid
	ErrorDescription *string `json:"errorDescription,omitempty"`

	// Success HTTP returncode
	Success *int `json:"success,omitempty"`
}

// DeleteErrorResponse defines model for DeleteErrorResponse.
type DeleteErrorResponse struct {
	// Error server error message
	Error *string `json:"error,omitempty"`

	// ErrorDescription contains device guid
	ErrorDescription *string `json:"errorDescription,omitempty"`

	// Success HTTP returncode
	Success *int `json:"success,omitempty"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success HTTP returncode
	Success *int `json:"success,omitempty"`
}

// Device defines model for Device.
type Device struct {
	ConnectionStatus *bool `json:"connectionStatus,omitempty"`
	DeviceInfo       *struct {
		CurrentMode *string    `json:"currentMode,omitempty"`
		Features    *string    `json:"features,omitempty"`
		FwBuild     *string    `json:"fwBuild,omitempty"`
		FwSku       *string    `json:"fwSku,omitempty"`
		FwVersion   *string    `json:"fwVersion,omitempty"`
		IpAddress   *string    `json:"ipAddress,omitempty"`
		LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	} `json:"deviceInfo,omitempty"`
	DnsSuffix        *string    `json:"dnsSuffix,omitempty"`
	FriendlyName     *string    `json:"friendlyName,omitempty"`
	Guid             *string    `json:"guid,omitempty"`
	Hostname         *string    `json:"hostname,omitempty"`
	LastConnected    *time.Time `json:"lastConnected,omitempty"`
	LastDisconnected *time.Time `json:"lastDisconnected,omitempty"`
	LastSeen         *time.Time `json:"lastSeen,omitempty"`
	MpsInstance      *string    `json:"mpsInstance,omitempty"`
	Mpsusername      *string    `json:"mpsusername,omitempty"`
	Tags             *[]string  `json:"tags,omitempty"`
	Tenantid         *string    `json:"tenantid,omitempty"`
}

// DisconnectErrorResponse defines model for DisconnectErrorResponse.
type DisconnectErrorResponse struct {
	// Error server error message
	Error *string `json:"error,omitempty"`

	// ErrorDescription contains device guid
	ErrorDescription *string `json:"errorDescription,omitempty"`

	// Success HTTP returncode
	Success *int `json:"success,omitempty"`
}

// DisconnectResponse defines model for DisconnectResponse.
type DisconnectResponse struct {
	// Description server response message containing guid
	Description *string `json:"description,omitempty"`

	// Success HTTP returncode
	Success *int `json:"success,omitempty"`
}

// EditDevice defines model for EditDevice.
type EditDevice struct {
	DeviceInfo *struct {
		CurrentMode *string `json:"currentMode,omitempty"`
		FwBuild     *string `json:"fwBuild,omitempty"`
		FwSku       *string `json:"fwSku,omitempty"`
		FwVersion   *string `json:"fwVersion,omitempty"`
		IpAddress   *string `json:"ipAddress,omitempty"`
	} `json:"deviceInfo,omitempty"`
	DnsSuffix    *string   `json:"dnsSuffix,omitempty"`
	FriendlyName *string   `json:"friendlyName,omitempty"`
	Guid         string    `json:"guid"`
	Hostname     *string   `json:"hostname,omitempty"`
	Tags         *[]string `json:"tags,omitempty"`
}

// EditDeviceResponse defines model for EditDeviceResponse.
type EditDeviceResponse struct {
	ConnectionStatus bool `json:"connectionStatus"`
	DeviceInfo       *struct {
		CurrentMode *string    `json:"currentMode,omitempty"`
		Features    *string    `json:"features,omitempty"`
		FwBuild     *string    `json:"fwBuild,omitempty"`
		FwSku       *string    `json:"fwSku,omitempty"`
		FwVersion   *string    `json:"fwVersion,omitempty"`
		IpAddress   *string    `json:"ipAddress,omitempty"`
		LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	} `json:"deviceInfo,omitempty"`
	DnsSuffix        string     `json:"dnsSuffix"`
	FriendlyName     string     `json:"friendlyName"`
	Guid             string     `json:"guid"`
	Hostname         string     `json:"hostname"`
	LastConnected    *time.Time `json:"lastConnected,omitempty"`
	LastDisconnected *time.Time `json:"lastDisconnected,omitempty"`
	LastSeen         *time.Time `json:"lastSeen,omitempty"`
	MpsInstance      string     `json:"mpsInstance"`
	Mpsusername      string     `json:"mpsusername"`
	Tags             []string   `json:"tags"`
	TenantID         string     `json:"tenantID"`
}

// EventLogResponse defines model for EventLogResponse.
type EventLogResponse struct {
	Desc            *string `json:"Desc,omitempty"`
	DeviceAddress   *int    `json:"DeviceAddress,omitempty"`
	Entity          *int    `json:"Entity,omitempty"`
	EntityInstance  *int    `json:"EntityInstance,omitempty"`
	EntityStr       *string `json:"EntityStr,omitempty"`
	EventData       *[]int  `json:"EventData,omitempty"`
	EventOffset     *int    `json:"EventOffset,omitempty"`
	EventSensorType *int    `json:"EventSensorType,omitempty"`
	EventSeverity   *int    `json:"EventSeverity,omitempty"`
	EventSourceType *int    `json:"EventSourceType,omitempty"`
	EventType       *int    `json:"EventType,omitempty"`
	SensorNumber    *int    `json:"SensorNumber,omitempty"`
	TimeStamp       *string `json:"TimeStamp,omitempty"`
}

// GeneralSettingsResponse defines model for GeneralSettingsResponse.
type GeneralSettingsResponse struct {
	Body *struct {
		AMTNetworkEnabled             *int    `json:"AMTNetworkEnabled,omitempty"`
		DDNSPeriodicUpdateInterval    *int    `json:"DDNSPeriodicUpdateInterval,omitempty"`
		DDNSTTL                       *int    `json:"DDNSTTL,omitempty"`
		DDNSUpdateByDHCPServerEnabled *bool   `json:"DDNSUpdateByDHCPServerEnabled,omitempty"`
		DDNSUpdateEnabled             *bool   `json:"DDNSUpdateEnabled,omitempty"`
		DHCPv6ConfigurationTimeout    *int    `json:"DHCPv6ConfigurationTimeout,omitempty"`
		DigestRealm                   *string `json:"DigestRealm,omitempty"`
		DomainName                    *string `json:"DomainName,omitempty"`
		ElementName                   *string `json:"ElementName,omitempty"`
		HostName                      *string `json:"HostName,omitempty"`
		HostOSFQDN                    *string `json:"HostOSFQDN,omitempty"`
		IdleWakeTimeout               *int    `json:"IdleWakeTimeout,omitempty"`
		InstanceID                    *string `json:"InstanceID,omitempty"`
		NetworkInterfaceEnabled       *bool   `json:"NetworkInterfaceEnabled,omitempty"`
		PingResponseEnabled           *bool   `json:"PingResponseEnabled,omitempty"`
		PowerSource                   *int    `json:"PowerSource,omitempty"`
		PreferredAddressFamily        *int    `json:"PreferredAddressFamily,omitempty"`
		PresenceNotificationInterval  *int    `json:"PresenceNotificationInterval,omitempty"`
		PrivacyLevel                  *int    `json:"PrivacyLevel,omitempty"`
		RmcpPingResponseEnabled       *bool   `json:"RmcpPingResponseEnabled,omitempty"`
		SharedFQDN                    *bool   `json:"SharedFQDN,omitempty"`
		WsmanOnlyMode                 *bool   `json:"WsmanOnlyMode,omitempty"`
	} `json:"Body,omitempty"`
	Header *struct {
		Action      *string `json:"Action,omitempty"`
		MessageID   *string `json:"MessageID,omitempty"`
		Method      *string `json:"Method,omitempty"`
		RelatesTo   *string `json:"RelatesTo,omitempty"`
		ResourceURI *string `json:"ResourceURI,omitempty"`
		To          *string `json:"To,omitempty"`
	} `json:"Header,omitempty"`
}

// GetAMTFeaturesResponse defines model for GetAMTFeaturesResponse.
type GetAMTFeaturesResponse struct {
	IDER        *bool                             `json:"IDER,omitempty"`
	KVM         *bool                             `json:"KVM,omitempty"`
	SOL         *bool                             `json:"SOL,omitempty"`
	OptInState  *GetAMTFeaturesResponseOptInState `json:"optInState,omitempty"`
	Redirection *bool                             `json:"redirection,omitempty"`
	UserConsent *string                           `json:"userConsent,omitempty"`
}

// GetAMTFeaturesResponseOptInState defines model for GetAMTFeaturesResponse.OptInState.
type GetAMTFeaturesResponseOptInState int

// GetAlarmClockResponse defines model for GetAlarmClockResponse.
type GetAlarmClockResponse struct {
	DeleteOnCompletion *bool   `json:"DeleteOnCompletion,omitempty"`
	ElementName        *string `json:"ElementName,omitempty"`
	InstanceID         *string `json:"InstanceID,omitempty"`
	Interval           *struct {
		Interval *string `json:"Interval,omitempty"`
	} `json:"Interval,omitempty"`
	StartTime *struct {
		DateTime *time.Time `json:"DateTime,omitempty"`
	} `json:"StartTime,omitempty"`
}

// HardwareInfoResponse defines model for HardwareInfoResponse.
type HardwareInfoResponse struct {
	CIMBIOSElement *struct {
		Response *struct {
			ElementName       *string `json:"ElementName,omitempty"`
			Manufacturer      *string `json:"Manufacturer,omitempty"`
			Name              *string `json:"Name,omitempty"`
			OperationalStatus *int    `json:"OperationalStatus,omitempty"`
			PrimaryBIOS       *bool   `json:"PrimaryBIOS,omitempty"`
			ReleaseDate       *struct {
				Datetime *string `json:"Datetime,omitempty"`
			} `json:"ReleaseDate,omitempty"`
			SoftwareElementID     *string `json:"SoftwareElementID,omitempty"`
			SoftwareElementState  *int    `json:"SoftwareElementState,omitempty"`
			TargetOperatingSystem *int    `json:"TargetOperatingSystem,omitempty"`
			Version               *string `json:"Version,omitempty"`
		} `json:"response,omitempty"`
		Responses *struct {
			Body *struct {
				ElementName       *string `json:"ElementName,omitempty"`
				Manufacturer      *string `json:"Manufacturer,omitempty"`
				Name              *string `json:"Name,omitempty"`
				OperationalStatus *int    `json:"OperationalStatus,omitempty"`
				PrimaryBIOS       *bool   `json:"PrimaryBIOS,omitempty"`
				ReleaseDate       *struct {
					Datetime *string `json:"Datetime,omitempty"`
				} `json:"ReleaseDate,omitempty"`
				SoftwareElementID     *string `json:"SoftwareElementID,omitempty"`
				SoftwareElementState  *int    `json:"SoftwareElementState,omitempty"`
				TargetOperatingSystem *int    `json:"TargetOperatingSystem,omitempty"`
				Version               *string `json:"Version,omitempty"`
			} `json:"Body,omitempty"`
			Header *struct {
				Action      *string `json:"Action,omitempty"`
				MessageID   *string `json:"MessageID,omitempty"`
				Method      *string `json:"Method,omitempty"`
				RelatesTo   *int    `json:"RelatesTo,omitempty"`
				ResourceURI *string `json:"ResourceURI,omitempty"`
				To          *string `json:"To,omitempty"`
			} `json:"Header,omitempty"`
		} `json:"responses,omitempty"`
		Status *int `json:"status,omitempty"`
	} `json:"CIM_BIOSElement,omitempty"`
	CIMCard *struct {
		Response *struct {
			CanBeFRUed        *bool   `json:"CanBeFRUed,omitempty"`
			CreationClassName *string `json:"CreationClassName,omitempty"`
			ElementName       *string `json:"ElementName,omitempty"`
			Manufacturer      *string `json:"Manufacturer,omitempty"`
			Model             *string `json:"Model,omitempty"`
			OperationalStatus *int    `json:"OperationalStatus,omitempty"`
			PackageType       *int    `json:"PackageType,omitempty"`
			SerialNumber      *string `json:"SerialNumber,omitempty"`
			Tag               *string `json:"Tag,omitempty"`
			Version           *string `json:"Version,omitempty"`
		} `json:"response,omitempty"`
		Responses *struct {
			Body *struct {
				CanBeFRUed        *bool   `json:"CanBeFRUed,omitempty"`
				CreationClassName *string `json:"CreationClassName,omitempty"`
				ElementName       *string `json:"ElementName,omitempty"`
				Manufacturer      *string `json:"Manufacturer,omitempty"`
				Model             *string `json:"Model,omitempty"`
				OperationalStatus *int    `json:"OperationalStatus,omitempty"`
				PackageType       *int    `json:"PackageType,omitempty"`
				SerialNumber      *string `json:"SerialNumber,omitempty"`
				Tag               *string `json:"Tag,omitempty"`
				Version           *string `json:"Version,omitempty"`
			} `json:"Body,omitempty"`
			Header *struct {
				Action      *string `json:"Action,omitempty"`
				MessageID   *string `json:"MessageID,omitempty"`
				Method      *string `json:"Method,omitempty"`
				RelatesTo   *int    `json:"RelatesTo,omitempty"`
				ResourceURI *string `json:"ResourceURI,omitempty"`
				To          *string `json:"To,omitempty"`
			} `json:"Header,omitempty"`
		} `json:"responses,omitempty"`
		Status *int `json:"status,omitempty"`
	} `json:"CIM_Card,omitempty"`
	CIMChassis *struct {
		Response *struct {
			ChassisPackageType *int    `json:"ChassisPackageType,omitempty"`
			CreationClassName  *string `json:"CreationClassName,omitempty"`
			ElementName        *string `json:"ElementName,omitempty"`
			Manufacturer       *string `json:"Manufacturer,omitempty"`
			Model              *string `json:"Model,omitempty"`
			OperationalStatus  *int    `json:"OperationalStatus,omitempty"`
			PackageType        *int    `json:"PackageType,omitempty"`
			SerialNumber       *string `json:"SerialNumber,omitempty"`
			Tag                *string `json:"Tag,omitempty"`
			Version            *string `json:"Version,omitempty"`
		} `json:"response,omitempty"`
		Responses *struct {
			Body *struct {
				ChassisPackageType *int    `json:"ChassisPackageType,omitempty"`
				CreationClassName  *string `json:"CreationClassName,omitempty"`
				ElementName        *string `json:"ElementName,omitempty"`
				Manufacturer       *string `json:"Manufacturer,omitempty"`
				Model              *string `json:"Model,omitempty"`
				OperationalStatus  *int    `json:"OperationalStatus,omitempty"`
				PackageType        *int    `json:"PackageType,omitempty"`
				SerialNumber       *string `json:"SerialNumber,omitempty"`
				Tag                *string `json:"Tag,omitempty"`
				Version            *string `json:"Version,omitempty"`
			} `json:"Body,omitempty"`
			Header *struct {
				Action      *string `json:"Action,omitempty"`
				MessageID   *string `json:"MessageID,omitempty"`
				Method      *string `json:"Method,omitempty"`
				RelatesTo   *int    `json:"RelatesTo,omitempty"`
				ResourceURI *string `json:"ResourceURI,omitempty"`
				To          *string `json:"To,omitempty"`
			} `json:"Header,omitempty"`
		} `json:"responses,omitempty"`
		Status *int `json:"status,omitempty"`
	} `json:"CIM_Chassis,omitempty"`
	CIMChip *struct {
		Responses *[]struct {
			BankLabel         *string `json:"BankLabel,omitempty"`
			CanBeFRUed        *bool   `json:"CanBeFRUed,omitempty"`
			Capacity          *int    `json:"Capacity,omitempty"`
			CreationClassName *string `json:"CreationClassName,omitempty"`
			ElementName       *string `json:"ElementName,omitempty"`
			FormFactor        *int    `json:"FormFactor,omitempty"`
			Manufacturer      *string `json:"Manufacturer,omitempty"`
			MemoryType        *int    `json:"MemoryType,omitempty"`
			OperationalStatus *int    `json:"OperationalStatus,omitempty"`
			PartNumber        *string `json:"PartNumber,omitempty"`
			SerialNumber      *string `json:"SerialNumber,omitempty"`
			Speed             *int    `json:"Speed,omitempty"`
			Tag               *string `json:"Tag,omitempty"`
			Version           *string `json:"Version,omitempty"`
		} `json:"responses,omitempty"`
		Status *int `json:"status,omitempty"`
	} `json:"CIM_Chip,omitempty"`
	CIMComputerSystemPackage *struct {
		Response *struct {
			Antecedent *struct {
				Address             *string `json:"Address,omitempty"`
				ReferenceParameters *struct {
					ResourceURI *string `json:"ResourceURI,omitempty"`
					SelectorSet *struct {
						Selector *struct {
							Name  *string `json:"@name,omitempty"`
							Value *string `json:"value,omitempty"`
						} `json:"Selector,omitempty"`
					} `json:"SelectorSet,omitempty"`
				} `json:"ReferenceParameters,omitempty"`
			} `json:"Antecedent,omitempty"`
			Dependent *struct {
				Address             *string `json:"Address,omitempty"`
				ReferenceParameters *struct {
					ResourceURI *string `json:"ResourceURI,omitempty"`
					SelectorSet *struct {
						Selector *struct {
							Name  *string `json:"@name,omitempty"`
							Value *string `json:"value,omitempty"`
						} `json:"Selector,omitempty"`
					} `json:"SelectorSet,omitempty"`
				} `json:"ReferenceParameters,omitempty"`
			} `json:"Dependent,omitempty"`
			PlatformGUID *string `json:"PlatformGUID,omitempty"`
		} `json:"response,omitempty"`
		Status *int `json:"status,omitempty"`
	} `json:"CIM_ComputerSystemPackage,omitempty"`
	CIMMediaAccessDevice *struct {
		Responses *[]struct {
			Capabilities            *[]int  `json:"Capabilities,omitempty"`
			CreationClassName       *string `json:"CreationClassName,omitempty"`
			DeviceID                *string `json:"DeviceID,omitempty"`
			ElementName             *string `json:"ElementName,omitempty"`
			EnabledDefault          *int    `json:"EnabledDefault,omitempty"`
			EnabledState            *int    `json:"EnabledState,omitempty"`
			MaxMediaSize            *int    `json:"MaxMediaSize,omitempty"`
			OperationalStatus       *int    `json:"OperationalStatus,omitempty"`
			RequestedState          *int    `json:"RequestedState,omitempty"`
			Security                *int    `json:"Security,omitempty"`
			SystemCreationClassName *string `json:"SystemCreationClassName,omitempty"`
			SystemName              *string `json:"SystemName,omitempty"`
		} `json:"responses,omitempty"`
		Status *int `json:"status,omitempty"`
	} `json:"CIM_MediaAccessDevice,omitempty"`
	CIMPhysicalMemory *struct {
		Responses *[]struct {
			BankLabel         *string `json:"BankLabel,omitempty"`
			Capacity          *int    `json:"Capacity,omitempty"`
			CreationClassName *string `json:"CreationClassName,omitempty"`
			ElementName       *string `json:"ElementName,omitempty"`
			FormFactor        *int    `json:"FormFactor,omitempty"`
			Manufacturer      *string `json:"Manufacturer,omitempty"`
			MemoryType        *int    `json:"MemoryType,omitempty"`
			PartNumber        *string `json:"PartNumber,omitempty"`
			SerialNumber      *string `json:"SerialNumber,omitempty"`
			Speed             *int    `json:"Speed,omitempty"`
			Tag               *int    `json:"Tag,omitempty"`
		} `json:"responses,omitempty"`
		Status *int `json:"status,omitempty"`
	} `json:"CIM_PhysicalMemory,omitempty"`
	CIMPhysicalPackage *struct {
		Responses *[]struct {
			CanBeFRUed         *bool   `json:"CanBeFRUed,omitempty"`
			ChassisPackageType *int    `json:"ChassisPackageType,omitempty"`
			CreationClassName  *string `json:"CreationClassName,omitempty"`
			ElementName        *string `json:"ElementName,omitempty"`
			Manufacturer       *string `json:"Manufacturer,omitempty"`
			Model              *string `json:"Model,omitempty"`
			OperationalStatus  *int    `json:"OperationalStatus,omitempty"`
			PackageType        *int    `json:"PackageType,omitempty"`
			SerialNumber       *string `json:"SerialNumber,omitempty"`
			Tag                *string `json:"Tag,omitempty"`
			Version            *string `json:"Version,omitempty"`
		} `json:"responses,omitempty"`
		Status *int `json:"status,omitempty"`
	} `json:"CIM_PhysicalPackage,omitempty"`
	CIMProcessor *struct {
		Responses *[]struct {
			CPUStatus               *int    `json:"CPUStatus,omitempty"`
			CreationClassName       *string `json:"CreationClassName,omitempty"`
			CurrentClockSpeed       *int    `json:"CurrentClockSpeed,omitempty"`
			DeviceID                *string `json:"DeviceID,omitempty"`
			ElementName             *string `json:"ElementName,omitempty"`
			EnabledState            *int    `json:"EnabledState,omitempty"`
			ExternalBusClockSpeed   *int    `json:"ExternalBusClockSpeed,omitempty"`
			Family                  *int    `json:"Family,omitempty"`
			HealthState             *int    `json:"HealthState,omitempty"`
			MaxClockSpeed           *int    `json:"MaxClockSpeed,omitempty"`
			OperationalStatus       *int    `json:"OperationalStatus,omitempty"`
			RequestedState          *int    `json:"RequestedState,omitempty"`
			Role                    *string `json:"Role,omitempty"`
			Stepping                *int    `json:"Stepping,omitempty"`
			SystemCreationClassName *string `json:"SystemCreationClassName,omitempty"`
			SystemName              *string `json:"SystemName,omitempty"`
			UpgradeMethod           *int    `json:"UpgradeMethod,omitempty"`
		} `json:"responses,omitempty"`
		Status *int `json:"status,omitempty"`
	} `json:"CIM_Processor,omitempty"`
	CIMSystemPackaging *struct {
		Responses *struct {
			Antecedent *struct {
				Address             *string `json:"Address,omitempty"`
				ReferenceParameters *struct {
					ResourceURI *string `json:"ResourceURI,omitempty"`
					SelectorSet *struct {
						Selector *struct {
							Name  *string `json:"@name,omitempty"`
							Value *string `json:"value,omitempty"`
						} `json:"Selector,omitempty"`
					} `json:"SelectorSet,omitempty"`
				} `json:"ReferenceParameters,omitempty"`
			} `json:"Antecedent,omitempty"`
			PlatformGUID *string `json:"PlatformGUID,omitempty"`
			Dependent    *struct {
				Address             *string `json:"Address,omitempty"`
				ReferenceParameters *struct {
					ResourceURI *string `json:"ResourceURI,omitempty"`
					SelectorSet *struct {
						Selector *struct {
							Name  *string `json:"@name,omitempty"`
							Value *string `json:"value,omitempty"`
						} `json:"Selector,omitempty"`
					} `json:"SelectorSet,omitempty"`
				} `json:"ReferenceParameters,omitempty"`
			} `json:"dependent,omitempty"`
		} `json:"responses,omitempty"`
		Status *int `json:"status,omitempty"`
	} `json:"CIM_SystemPackaging,omitempty"`
}

// HealthcheckResponse defines model for HealthcheckResponse.
type HealthcheckResponse struct {
	Db *struct {
		Name   *string `json:"name,omitempty"`
		Status *string `json:"status,omitempty"`
	} `json:"db,omitempty"`
	SecretStore *struct {
		Name   *string `json:"name,omitempty"`
		Status *struct {
			ClusterId                  *string `json:"cluster_id,omitempty"`
			ClusterName                *string `json:"cluster_name,omitempty"`
			Initialized                *bool   `json:"initialized,omitempty"`
			PerformanceStandby         *bool   `json:"performance_standby,omitempty"`
			ReplicationDrMode          *string `json:"replication_dr_mode,omitempty"`
			ReplicationPerformanceMode *string `json:"replication_performance_mode,omitempty"`
			Sealed                     *bool   `json:"sealed,omitempty"`
			ServerTimeUtc              *int    `json:"server_time_utc,omitempty"`
			Standby                    *bool   `json:"standby,omitempty"`
			Version                    *string `json:"version,omitempty"`
		} `json:"status,omitempty"`
	} `json:"secretStore,omitempty"`
}

// PowerActionRequest defines model for PowerActionRequest.
type PowerActionRequest struct {
	Action PowerActionRequestAction `json:"action"`
	UseSOL bool                     `json:"useSOL"`
}

// PowerActionRequestAction defines model for PowerActionRequest.Action.
type PowerActionRequestAction int

// PowerActionResponse defines model for PowerActionResponse.
type PowerActionResponse struct {
	ReturnValue    *int    `json:"returnValue,omitempty"`
	ReturnValueStr *string `json:"returnValueStr,omitempty"`
}

// PowerCapabilitiesResponse defines model for PowerCapabilitiesResponse.
type PowerCapabilitiesResponse struct {
	Hibernate           *int `json:"hibernate,omitempty"`
	PowerCycle          *int `json:"powerCycle,omitempty"`
	PowerDown           *int `json:"powerDown,omitempty"`
	PowerOnToIDERCDROM  *int `json:"powerOnToIDE-RCDROM,omitempty"`
	PowerOnToIDERFloppy *int `json:"powerOnToIDE-RFloppy,omitempty"`
	PowerOnToPXE        *int `json:"powerOnToPXE,omitempty"`
	PowerUp             *int `json:"powerUp,omitempty"`
	PowerUpToBIOS       *int `json:"powerUpToBIOS,omitempty"`
	Reset               *int `json:"reset,omitempty"`
	ResetToBIOS         *int `json:"resetToBIOS,omitempty"`
	ResetToIDERCDROM    *int `json:"resetToIDE-RCDROM,omitempty"`
	ResetToIDERFloppy   *int `json:"resetToIDE-RFloppy,omitempty"`
	ResetToPXE          *int `json:"resetToPXE,omitempty"`
	ResetToSecureErase  *int `json:"resetToSecureErase,omitempty"`
	Sleep               *int `json:"sleep,omitempty"`
	SoftOff             *int `json:"softOff,omitempty"`
	SoftReset           *int `json:"softReset,omitempty"`
}

// PowerStateResponse defines model for PowerStateResponse.
type PowerStateResponse struct {
	Powerstate *int `json:"powerstate,omitempty"`
}

// RedirectStatus defines model for RedirectStatus.
type RedirectStatus struct {
	IsIDERConnected *bool `json:"isIDERConnected,omitempty"`
	IsKVMConnected  *bool `json:"isKVMConnected,omitempty"`
	IsSOLConnected  *bool `json:"isSOLConnected,omitempty"`
}

// RefreshResponse defines model for RefreshResponse.
type RefreshResponse struct {
	// Success HTTP returncode
	Success *int `json:"success,omitempty"`
}

// SetAMTFeaturesRequest defines model for SetAMTFeaturesRequest.
type SetAMTFeaturesRequest struct {
	EnableAll   *bool                            `json:"enableAll,omitempty"`
	EnableIDER  bool                             `json:"enableIDER"`
	EnableKVM   bool                             `json:"enableKVM"`
	EnableSOL   bool                             `json:"enableSOL"`
	Redirection *bool                            `json:"redirection,omitempty"`
	UserConsent SetAMTFeaturesRequestUserConsent `json:"userConsent"`
}

// SetAMTFeaturesRequestUserConsent defines model for SetAMTFeaturesRequest.UserConsent.
type SetAMTFeaturesRequestUserConsent string

// SetAMTFeaturesResponse defines model for SetAMTFeaturesResponse.
type SetAMTFeaturesResponse = string

// SetAlarmClockRequest defines model for SetAlarmClockRequest.
type SetAlarmClockRequest struct {
	DeleteOnCompletion bool      `json:"DeleteOnCompletion"`
	ElementName        string    `json:"ElementName"`
	Interval           int       `json:"Interval"`
	StartTime          time.Time `json:"StartTime"`
}

// SetAlarmClockResponse defines model for SetAlarmClockResponse.
type SetAlarmClockResponse = string

// Stats defines model for Stats.
type Stats struct {
	ConnectedCount    *int `json:"connectedCount,omitempty"`
	DisconnectedCount *int `json:"disconnectedCount,omitempty"`
	TotalCount        *int `json:"totalCount,omitempty"`
}

// UserConsentRequest defines model for UserConsentRequest.
type UserConsentRequest struct {
	ConsentCode int `json:"consentCode"`
}

// UserConsentResponse defines model for UserConsentResponse.
type UserConsentResponse struct {
	Body *struct {
		ReturnValue    *int    `json:"ReturnValue,omitempty"`
		ReturnValueStr *string `json:"ReturnValueStr,omitempty"`
	} `json:"Body,omitempty"`
	Header *struct {
		Action      *string `json:"Action,omitempty"`
		MessageID   *string `json:"MessageID,omitempty"`
		Method      *string `json:"Method,omitempty"`
		RelatesTo   *string `json:"RelatesTo,omitempty"`
		ResourceURI *string `json:"ResourceURI,omitempty"`
		To          *string `json:"To,omitempty"`
	} `json:"Header,omitempty"`
}

// VersionResponse defines model for VersionResponse.
type VersionResponse struct {
	ServiceVersion string `json:"serviceVersion"`
}

// GetApiV1AmtLogAuditGuidParams defines parameters for GetApiV1AmtLogAuditGuid.
type GetApiV1AmtLogAuditGuidParams struct {
	// StartIndex number of items to skip
	StartIndex int `form:"startIndex" json:"startIndex"`
}

// PostApiV1AuthorizeJSONBody defines parameters for PostApiV1Authorize.
type PostApiV1AuthorizeJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// GetApiV1DevicesParams defines parameters for GetApiV1Devices.
type GetApiV1DevicesParams struct {
	// Count If set to true, return `totalCount` of devices with `data` array of devices
	Count *bool `form:"$count,omitempty" json:"$count,omitempty"`

	// Skip The number of items to skip before starting to collect the result set
	Skip *int `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Top The number of items to return
	Top *int `form:"$top,omitempty" json:"$top,omitempty"`

	// FriendlyName Device friendly name to query for. Maximum length 255
	FriendlyName *string `form:"friendlyName,omitempty" json:"friendlyName,omitempty"`

	// Hostname Device hostname to query for. Maximum length 255
	Hostname *string `form:"hostname,omitempty" json:"hostname,omitempty"`

	// Method Specify a conditional operator 'AND' or 'OR' to fetch the records with given tags .
	Method *string `form:"method,omitempty" json:"method,omitempty"`

	// Status Specify '0' to query for disconnected devices or specify '1' for connected devices. To return all devices, omit this query parameter.
	Status *int `form:"status,omitempty" json:"status,omitempty"`

	// Tags Comma-delimited list of tags to query for
	Tags *string `form:"tags,omitempty" json:"tags,omitempty"`
}

// DeleteApiV1DevicesGuidParams defines parameters for DeleteApiV1DevicesGuid.
type DeleteApiV1DevicesGuidParams struct {
	// IsSecretToBeDeleted Delete device information from both the Database **AND Secret Storage**. Caution: This will delete the stored device passwords in Secret Storage.
	IsSecretToBeDeleted *bool `form:"isSecretToBeDeleted,omitempty" json:"isSecretToBeDeleted,omitempty"`
}

// PostApiV1AmtAlarmOccurrencesGuidJSONRequestBody defines body for PostApiV1AmtAlarmOccurrencesGuid for application/json ContentType.
type PostApiV1AmtAlarmOccurrencesGuidJSONRequestBody = SetAlarmClockRequest

// PostApiV1AmtFeaturesGuidJSONRequestBody defines body for PostApiV1AmtFeaturesGuid for application/json ContentType.
type PostApiV1AmtFeaturesGuidJSONRequestBody = SetAMTFeaturesRequest

// PostApiV1AmtPowerActionGuidJSONRequestBody defines body for PostApiV1AmtPowerActionGuid for application/json ContentType.
type PostApiV1AmtPowerActionGuidJSONRequestBody = PowerActionRequest

// PostApiV1AmtPowerBootoptionsGuidJSONRequestBody defines body for PostApiV1AmtPowerBootoptionsGuid for application/json ContentType.
type PostApiV1AmtPowerBootoptionsGuidJSONRequestBody = PowerActionRequest

// PostApiV1AmtUserConsentCodeGuidJSONRequestBody defines body for PostApiV1AmtUserConsentCodeGuid for application/json ContentType.
type PostApiV1AmtUserConsentCodeGuidJSONRequestBody = UserConsentRequest

// PostApiV1AuthorizeJSONRequestBody defines body for PostApiV1Authorize for application/json ContentType.
type PostApiV1AuthorizeJSONRequestBody PostApiV1AuthorizeJSONBody

// PatchApiV1DevicesJSONRequestBody defines body for PatchApiV1Devices for application/json ContentType.
type PatchApiV1DevicesJSONRequestBody = EditDevice

// PostApiV1DevicesJSONRequestBody defines body for PostApiV1Devices for application/json ContentType.
type PostApiV1DevicesJSONRequestBody = AddDevice

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteApiV1AmtAlarmOccurrencesGuid request
	DeleteApiV1AmtAlarmOccurrencesGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AmtAlarmOccurrencesGuid request
	GetApiV1AmtAlarmOccurrencesGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1AmtAlarmOccurrencesGuidWithBody request with any body
	PostApiV1AmtAlarmOccurrencesGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1AmtAlarmOccurrencesGuid(ctx context.Context, guid string, body PostApiV1AmtAlarmOccurrencesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1AmtDeactivateGuid request
	DeleteApiV1AmtDeactivateGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AmtFeaturesGuid request
	GetApiV1AmtFeaturesGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1AmtFeaturesGuidWithBody request with any body
	PostApiV1AmtFeaturesGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1AmtFeaturesGuid(ctx context.Context, guid string, body PostApiV1AmtFeaturesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AmtGeneralSettingsGuid request
	GetApiV1AmtGeneralSettingsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AmtHardwareInfoGuid request
	GetApiV1AmtHardwareInfoGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AmtLogAuditGuid request
	GetApiV1AmtLogAuditGuid(ctx context.Context, guid string, params *GetApiV1AmtLogAuditGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AmtLogEventGuid request
	GetApiV1AmtLogEventGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1AmtPowerActionGuidWithBody request with any body
	PostApiV1AmtPowerActionGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1AmtPowerActionGuid(ctx context.Context, guid string, body PostApiV1AmtPowerActionGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1AmtPowerBootoptionsGuidWithBody request with any body
	PostApiV1AmtPowerBootoptionsGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1AmtPowerBootoptionsGuid(ctx context.Context, guid string, body PostApiV1AmtPowerBootoptionsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AmtPowerCapabilitiesGuid request
	GetApiV1AmtPowerCapabilitiesGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AmtPowerStateGuid request
	GetApiV1AmtPowerStateGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AmtUserConsentCodeCancelGuid request
	GetApiV1AmtUserConsentCodeCancelGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AmtUserConsentCodeGuid request
	GetApiV1AmtUserConsentCodeGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1AmtUserConsentCodeGuidWithBody request with any body
	PostApiV1AmtUserConsentCodeGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1AmtUserConsentCodeGuid(ctx context.Context, guid string, body PostApiV1AmtUserConsentCodeGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AmtVersionGuid request
	GetApiV1AmtVersionGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1AuthorizeWithBody request with any body
	PostApiV1AuthorizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Authorize(ctx context.Context, body PostApiV1AuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AuthorizeRedirectionGuid request
	GetApiV1AuthorizeRedirectionGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Ciracert request
	GetApiV1Ciracert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Devices request
	GetApiV1Devices(ctx context.Context, params *GetApiV1DevicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV1DevicesWithBody request with any body
	PatchApiV1DevicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV1Devices(ctx context.Context, body PatchApiV1DevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1DevicesWithBody request with any body
	PostApiV1DevicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Devices(ctx context.Context, body PostApiV1DevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1DevicesDisconnectGuid request
	DeleteApiV1DevicesDisconnectGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DevicesRedirectStatusGuid request
	GetApiV1DevicesRedirectStatusGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1DevicesRefreshGuid request
	DeleteApiV1DevicesRefreshGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DevicesStats request
	GetApiV1DevicesStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1DevicesGuid request
	DeleteApiV1DevicesGuid(ctx context.Context, guid string, params *DeleteApiV1DevicesGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DevicesGuid request
	GetApiV1DevicesGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Health request
	GetApiV1Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteApiV1AmtAlarmOccurrencesGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1AmtAlarmOccurrencesGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AmtAlarmOccurrencesGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AmtAlarmOccurrencesGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AmtAlarmOccurrencesGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AmtAlarmOccurrencesGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AmtAlarmOccurrencesGuid(ctx context.Context, guid string, body PostApiV1AmtAlarmOccurrencesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AmtAlarmOccurrencesGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1AmtDeactivateGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1AmtDeactivateGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AmtFeaturesGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AmtFeaturesGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AmtFeaturesGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AmtFeaturesGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AmtFeaturesGuid(ctx context.Context, guid string, body PostApiV1AmtFeaturesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AmtFeaturesGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AmtGeneralSettingsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AmtGeneralSettingsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AmtHardwareInfoGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AmtHardwareInfoGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AmtLogAuditGuid(ctx context.Context, guid string, params *GetApiV1AmtLogAuditGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AmtLogAuditGuidRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AmtLogEventGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AmtLogEventGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AmtPowerActionGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AmtPowerActionGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AmtPowerActionGuid(ctx context.Context, guid string, body PostApiV1AmtPowerActionGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AmtPowerActionGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AmtPowerBootoptionsGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AmtPowerBootoptionsGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AmtPowerBootoptionsGuid(ctx context.Context, guid string, body PostApiV1AmtPowerBootoptionsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AmtPowerBootoptionsGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AmtPowerCapabilitiesGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AmtPowerCapabilitiesGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AmtPowerStateGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AmtPowerStateGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AmtUserConsentCodeCancelGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AmtUserConsentCodeCancelGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AmtUserConsentCodeGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AmtUserConsentCodeGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AmtUserConsentCodeGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AmtUserConsentCodeGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AmtUserConsentCodeGuid(ctx context.Context, guid string, body PostApiV1AmtUserConsentCodeGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AmtUserConsentCodeGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AmtVersionGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AmtVersionGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AuthorizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AuthorizeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Authorize(ctx context.Context, body PostApiV1AuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AuthorizeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AuthorizeRedirectionGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AuthorizeRedirectionGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Ciracert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CiracertRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Devices(ctx context.Context, params *GetApiV1DevicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DevicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV1DevicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV1DevicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV1Devices(ctx context.Context, body PatchApiV1DevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV1DevicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DevicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DevicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Devices(ctx context.Context, body PostApiV1DevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DevicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1DevicesDisconnectGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1DevicesDisconnectGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DevicesRedirectStatusGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DevicesRedirectStatusGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1DevicesRefreshGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1DevicesRefreshGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DevicesStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DevicesStatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1DevicesGuid(ctx context.Context, guid string, params *DeleteApiV1DevicesGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1DevicesGuidRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DevicesGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DevicesGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1HealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteApiV1AmtAlarmOccurrencesGuidRequest generates requests for DeleteApiV1AmtAlarmOccurrencesGuid
func NewDeleteApiV1AmtAlarmOccurrencesGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/amt/alarmOccurrences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AmtAlarmOccurrencesGuidRequest generates requests for GetApiV1AmtAlarmOccurrencesGuid
func NewGetApiV1AmtAlarmOccurrencesGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/amt/alarmOccurrences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1AmtAlarmOccurrencesGuidRequest calls the generic PostApiV1AmtAlarmOccurrencesGuid builder with application/json body
func NewPostApiV1AmtAlarmOccurrencesGuidRequest(server string, guid string, body PostApiV1AmtAlarmOccurrencesGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1AmtAlarmOccurrencesGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPostApiV1AmtAlarmOccurrencesGuidRequestWithBody generates requests for PostApiV1AmtAlarmOccurrencesGuid with any type of body
func NewPostApiV1AmtAlarmOccurrencesGuidRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/amt/alarmOccurrences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1AmtDeactivateGuidRequest generates requests for DeleteApiV1AmtDeactivateGuid
func NewDeleteApiV1AmtDeactivateGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/amt/deactivate/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AmtFeaturesGuidRequest generates requests for GetApiV1AmtFeaturesGuid
func NewGetApiV1AmtFeaturesGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/amt/features/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1AmtFeaturesGuidRequest calls the generic PostApiV1AmtFeaturesGuid builder with application/json body
func NewPostApiV1AmtFeaturesGuidRequest(server string, guid string, body PostApiV1AmtFeaturesGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1AmtFeaturesGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPostApiV1AmtFeaturesGuidRequestWithBody generates requests for PostApiV1AmtFeaturesGuid with any type of body
func NewPostApiV1AmtFeaturesGuidRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/amt/features/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1AmtGeneralSettingsGuidRequest generates requests for GetApiV1AmtGeneralSettingsGuid
func NewGetApiV1AmtGeneralSettingsGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/amt/generalSettings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AmtHardwareInfoGuidRequest generates requests for GetApiV1AmtHardwareInfoGuid
func NewGetApiV1AmtHardwareInfoGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/amt/hardwareInfo/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AmtLogAuditGuidRequest generates requests for GetApiV1AmtLogAuditGuid
func NewGetApiV1AmtLogAuditGuidRequest(server string, guid string, params *GetApiV1AmtLogAuditGuidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/amt/log/audit/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startIndex", runtime.ParamLocationQuery, params.StartIndex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AmtLogEventGuidRequest generates requests for GetApiV1AmtLogEventGuid
func NewGetApiV1AmtLogEventGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/amt/log/event/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1AmtPowerActionGuidRequest calls the generic PostApiV1AmtPowerActionGuid builder with application/json body
func NewPostApiV1AmtPowerActionGuidRequest(server string, guid string, body PostApiV1AmtPowerActionGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1AmtPowerActionGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPostApiV1AmtPowerActionGuidRequestWithBody generates requests for PostApiV1AmtPowerActionGuid with any type of body
func NewPostApiV1AmtPowerActionGuidRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/amt/power/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1AmtPowerBootoptionsGuidRequest calls the generic PostApiV1AmtPowerBootoptionsGuid builder with application/json body
func NewPostApiV1AmtPowerBootoptionsGuidRequest(server string, guid string, body PostApiV1AmtPowerBootoptionsGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1AmtPowerBootoptionsGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPostApiV1AmtPowerBootoptionsGuidRequestWithBody generates requests for PostApiV1AmtPowerBootoptionsGuid with any type of body
func NewPostApiV1AmtPowerBootoptionsGuidRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/amt/power/bootoptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1AmtPowerCapabilitiesGuidRequest generates requests for GetApiV1AmtPowerCapabilitiesGuid
func NewGetApiV1AmtPowerCapabilitiesGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/amt/power/capabilities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AmtPowerStateGuidRequest generates requests for GetApiV1AmtPowerStateGuid
func NewGetApiV1AmtPowerStateGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/amt/power/state/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AmtUserConsentCodeCancelGuidRequest generates requests for GetApiV1AmtUserConsentCodeCancelGuid
func NewGetApiV1AmtUserConsentCodeCancelGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/amt/userConsentCode/cancel/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AmtUserConsentCodeGuidRequest generates requests for GetApiV1AmtUserConsentCodeGuid
func NewGetApiV1AmtUserConsentCodeGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/amt/userConsentCode/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1AmtUserConsentCodeGuidRequest calls the generic PostApiV1AmtUserConsentCodeGuid builder with application/json body
func NewPostApiV1AmtUserConsentCodeGuidRequest(server string, guid string, body PostApiV1AmtUserConsentCodeGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1AmtUserConsentCodeGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPostApiV1AmtUserConsentCodeGuidRequestWithBody generates requests for PostApiV1AmtUserConsentCodeGuid with any type of body
func NewPostApiV1AmtUserConsentCodeGuidRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/amt/userConsentCode/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1AmtVersionGuidRequest generates requests for GetApiV1AmtVersionGuid
func NewGetApiV1AmtVersionGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/amt/version/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1AuthorizeRequest calls the generic PostApiV1Authorize builder with application/json body
func NewPostApiV1AuthorizeRequest(server string, body PostApiV1AuthorizeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1AuthorizeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1AuthorizeRequestWithBody generates requests for PostApiV1Authorize with any type of body
func NewPostApiV1AuthorizeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1AuthorizeRedirectionGuidRequest generates requests for GetApiV1AuthorizeRedirectionGuid
func NewGetApiV1AuthorizeRedirectionGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/authorize/redirection/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1CiracertRequest generates requests for GetApiV1Ciracert
func NewGetApiV1CiracertRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/ciracert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DevicesRequest generates requests for GetApiV1Devices
func NewGetApiV1DevicesRequest(server string, params *GetApiV1DevicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/devices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FriendlyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "friendlyName", runtime.ParamLocationQuery, *params.FriendlyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hostname != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hostname", runtime.ParamLocationQuery, *params.Hostname); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Method != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "method", runtime.ParamLocationQuery, *params.Method); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV1DevicesRequest calls the generic PatchApiV1Devices builder with application/json body
func NewPatchApiV1DevicesRequest(server string, body PatchApiV1DevicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV1DevicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchApiV1DevicesRequestWithBody generates requests for PatchApiV1Devices with any type of body
func NewPatchApiV1DevicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/devices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1DevicesRequest calls the generic PostApiV1Devices builder with application/json body
func NewPostApiV1DevicesRequest(server string, body PostApiV1DevicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1DevicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1DevicesRequestWithBody generates requests for PostApiV1Devices with any type of body
func NewPostApiV1DevicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/devices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1DevicesDisconnectGuidRequest generates requests for DeleteApiV1DevicesDisconnectGuid
func NewDeleteApiV1DevicesDisconnectGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/devices/disconnect/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DevicesRedirectStatusGuidRequest generates requests for GetApiV1DevicesRedirectStatusGuid
func NewGetApiV1DevicesRedirectStatusGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/devices/redirectStatus/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1DevicesRefreshGuidRequest generates requests for DeleteApiV1DevicesRefreshGuid
func NewDeleteApiV1DevicesRefreshGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/devices/refresh/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DevicesStatsRequest generates requests for GetApiV1DevicesStats
func NewGetApiV1DevicesStatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/devices/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1DevicesGuidRequest generates requests for DeleteApiV1DevicesGuid
func NewDeleteApiV1DevicesGuidRequest(server string, guid string, params *DeleteApiV1DevicesGuidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IsSecretToBeDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isSecretToBeDeleted", runtime.ParamLocationQuery, *params.IsSecretToBeDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DevicesGuidRequest generates requests for GetApiV1DevicesGuid
func NewGetApiV1DevicesGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1HealthRequest generates requests for GetApiV1Health
func NewGetApiV1HealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteApiV1AmtAlarmOccurrencesGuidWithResponse request
	DeleteApiV1AmtAlarmOccurrencesGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteApiV1AmtAlarmOccurrencesGuidResponse, error)

	// GetApiV1AmtAlarmOccurrencesGuidWithResponse request
	GetApiV1AmtAlarmOccurrencesGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtAlarmOccurrencesGuidResponse, error)

	// PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse request with any body
	PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtAlarmOccurrencesGuidResponse, error)

	PostApiV1AmtAlarmOccurrencesGuidWithResponse(ctx context.Context, guid string, body PostApiV1AmtAlarmOccurrencesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtAlarmOccurrencesGuidResponse, error)

	// DeleteApiV1AmtDeactivateGuidWithResponse request
	DeleteApiV1AmtDeactivateGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteApiV1AmtDeactivateGuidResponse, error)

	// GetApiV1AmtFeaturesGuidWithResponse request
	GetApiV1AmtFeaturesGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtFeaturesGuidResponse, error)

	// PostApiV1AmtFeaturesGuidWithBodyWithResponse request with any body
	PostApiV1AmtFeaturesGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtFeaturesGuidResponse, error)

	PostApiV1AmtFeaturesGuidWithResponse(ctx context.Context, guid string, body PostApiV1AmtFeaturesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtFeaturesGuidResponse, error)

	// GetApiV1AmtGeneralSettingsGuidWithResponse request
	GetApiV1AmtGeneralSettingsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtGeneralSettingsGuidResponse, error)

	// GetApiV1AmtHardwareInfoGuidWithResponse request
	GetApiV1AmtHardwareInfoGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtHardwareInfoGuidResponse, error)

	// GetApiV1AmtLogAuditGuidWithResponse request
	GetApiV1AmtLogAuditGuidWithResponse(ctx context.Context, guid string, params *GetApiV1AmtLogAuditGuidParams, reqEditors ...RequestEditorFn) (*GetApiV1AmtLogAuditGuidResponse, error)

	// GetApiV1AmtLogEventGuidWithResponse request
	GetApiV1AmtLogEventGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtLogEventGuidResponse, error)

	// PostApiV1AmtPowerActionGuidWithBodyWithResponse request with any body
	PostApiV1AmtPowerActionGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtPowerActionGuidResponse, error)

	PostApiV1AmtPowerActionGuidWithResponse(ctx context.Context, guid string, body PostApiV1AmtPowerActionGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtPowerActionGuidResponse, error)

	// PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse request with any body
	PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtPowerBootoptionsGuidResponse, error)

	PostApiV1AmtPowerBootoptionsGuidWithResponse(ctx context.Context, guid string, body PostApiV1AmtPowerBootoptionsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtPowerBootoptionsGuidResponse, error)

	// GetApiV1AmtPowerCapabilitiesGuidWithResponse request
	GetApiV1AmtPowerCapabilitiesGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtPowerCapabilitiesGuidResponse, error)

	// GetApiV1AmtPowerStateGuidWithResponse request
	GetApiV1AmtPowerStateGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtPowerStateGuidResponse, error)

	// GetApiV1AmtUserConsentCodeCancelGuidWithResponse request
	GetApiV1AmtUserConsentCodeCancelGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtUserConsentCodeCancelGuidResponse, error)

	// GetApiV1AmtUserConsentCodeGuidWithResponse request
	GetApiV1AmtUserConsentCodeGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtUserConsentCodeGuidResponse, error)

	// PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse request with any body
	PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtUserConsentCodeGuidResponse, error)

	PostApiV1AmtUserConsentCodeGuidWithResponse(ctx context.Context, guid string, body PostApiV1AmtUserConsentCodeGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtUserConsentCodeGuidResponse, error)

	// GetApiV1AmtVersionGuidWithResponse request
	GetApiV1AmtVersionGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtVersionGuidResponse, error)

	// PostApiV1AuthorizeWithBodyWithResponse request with any body
	PostApiV1AuthorizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AuthorizeResponse, error)

	PostApiV1AuthorizeWithResponse(ctx context.Context, body PostApiV1AuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AuthorizeResponse, error)

	// GetApiV1AuthorizeRedirectionGuidWithResponse request
	GetApiV1AuthorizeRedirectionGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AuthorizeRedirectionGuidResponse, error)

	// GetApiV1CiracertWithResponse request
	GetApiV1CiracertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1CiracertResponse, error)

	// GetApiV1DevicesWithResponse request
	GetApiV1DevicesWithResponse(ctx context.Context, params *GetApiV1DevicesParams, reqEditors ...RequestEditorFn) (*GetApiV1DevicesResponse, error)

	// PatchApiV1DevicesWithBodyWithResponse request with any body
	PatchApiV1DevicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV1DevicesResponse, error)

	PatchApiV1DevicesWithResponse(ctx context.Context, body PatchApiV1DevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV1DevicesResponse, error)

	// PostApiV1DevicesWithBodyWithResponse request with any body
	PostApiV1DevicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DevicesResponse, error)

	PostApiV1DevicesWithResponse(ctx context.Context, body PostApiV1DevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DevicesResponse, error)

	// DeleteApiV1DevicesDisconnectGuidWithResponse request
	DeleteApiV1DevicesDisconnectGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteApiV1DevicesDisconnectGuidResponse, error)

	// GetApiV1DevicesRedirectStatusGuidWithResponse request
	GetApiV1DevicesRedirectStatusGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1DevicesRedirectStatusGuidResponse, error)

	// DeleteApiV1DevicesRefreshGuidWithResponse request
	DeleteApiV1DevicesRefreshGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteApiV1DevicesRefreshGuidResponse, error)

	// GetApiV1DevicesStatsWithResponse request
	GetApiV1DevicesStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1DevicesStatsResponse, error)

	// DeleteApiV1DevicesGuidWithResponse request
	DeleteApiV1DevicesGuidWithResponse(ctx context.Context, guid string, params *DeleteApiV1DevicesGuidParams, reqEditors ...RequestEditorFn) (*DeleteApiV1DevicesGuidResponse, error)

	// GetApiV1DevicesGuidWithResponse request
	GetApiV1DevicesGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1DevicesGuidResponse, error)

	// GetApiV1HealthWithResponse request
	GetApiV1HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1HealthResponse, error)

	// GetVersionWithResponse request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)
}

type DeleteApiV1AmtAlarmOccurrencesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeactivateResponse
	JSON404      *DeleteAlarmErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1AmtAlarmOccurrencesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1AmtAlarmOccurrencesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AmtAlarmOccurrencesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAlarmClockResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1AmtAlarmOccurrencesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AmtAlarmOccurrencesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1AmtAlarmOccurrencesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetAlarmClockResponse
}

// Status returns HTTPResponse.Status
func (r PostApiV1AmtAlarmOccurrencesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AmtAlarmOccurrencesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1AmtDeactivateGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeactivateResponse
	JSON404      *DeleteErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1AmtDeactivateGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1AmtDeactivateGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AmtFeaturesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAMTFeaturesResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1AmtFeaturesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AmtFeaturesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1AmtFeaturesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetAMTFeaturesResponse
}

// Status returns HTTPResponse.Status
func (r PostApiV1AmtFeaturesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AmtFeaturesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AmtGeneralSettingsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GeneralSettingsResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1AmtGeneralSettingsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AmtGeneralSettingsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AmtHardwareInfoGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HardwareInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1AmtHardwareInfoGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AmtHardwareInfoGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AmtLogAuditGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuditLogResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1AmtLogAuditGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AmtLogAuditGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AmtLogEventGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventLogResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1AmtLogEventGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AmtLogEventGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1AmtPowerActionGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PowerActionResponse
}

// Status returns HTTPResponse.Status
func (r PostApiV1AmtPowerActionGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AmtPowerActionGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1AmtPowerBootoptionsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PowerActionResponse
}

// Status returns HTTPResponse.Status
func (r PostApiV1AmtPowerBootoptionsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AmtPowerBootoptionsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AmtPowerCapabilitiesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PowerCapabilitiesResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1AmtPowerCapabilitiesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AmtPowerCapabilitiesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AmtPowerStateGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PowerStateResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1AmtPowerStateGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AmtPowerStateGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AmtUserConsentCodeCancelGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserConsentResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1AmtUserConsentCodeCancelGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AmtUserConsentCodeCancelGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AmtUserConsentCodeGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserConsentResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1AmtUserConsentCodeGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AmtUserConsentCodeGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1AmtUserConsentCodeGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserConsentResponse
}

// Status returns HTTPResponse.Status
func (r PostApiV1AmtUserConsentCodeGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AmtUserConsentCodeGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AmtVersionGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AMTVersionResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1AmtVersionGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AmtVersionGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1AuthorizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Token *string `json:"token,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1AuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AuthorizeRedirectionGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Token *string `json:"token,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1AuthorizeRedirectionGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AuthorizeRedirectionGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1CiracertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiracertResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1CiracertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CiracertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Device
}

// Status returns HTTPResponse.Status
func (r GetApiV1DevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV1DevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EditDeviceResponse
}

// Status returns HTTPResponse.Status
func (r PatchApiV1DevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV1DevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AddDeviceResponse
}

// Status returns HTTPResponse.Status
func (r PostApiV1DevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1DevicesDisconnectGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DisconnectResponse
	JSON404      *DisconnectErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1DevicesDisconnectGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1DevicesDisconnectGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DevicesRedirectStatusGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RedirectStatus
}

// Status returns HTTPResponse.Status
func (r GetApiV1DevicesRedirectStatusGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DevicesRedirectStatusGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1DevicesRefreshGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RefreshResponse
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1DevicesRefreshGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1DevicesRefreshGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DevicesStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Stats
}

// Status returns HTTPResponse.Status
func (r GetApiV1DevicesStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DevicesStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1DevicesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *DeleteResponse
	JSON404      *DeleteErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1DevicesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1DevicesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DevicesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Device
}

// Status returns HTTPResponse.Status
func (r GetApiV1DevicesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DevicesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1HealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthcheckResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1HealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1HealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionResponse
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteApiV1AmtAlarmOccurrencesGuidWithResponse request returning *DeleteApiV1AmtAlarmOccurrencesGuidResponse
func (c *ClientWithResponses) DeleteApiV1AmtAlarmOccurrencesGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteApiV1AmtAlarmOccurrencesGuidResponse, error) {
	rsp, err := c.DeleteApiV1AmtAlarmOccurrencesGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1AmtAlarmOccurrencesGuidResponse(rsp)
}

// GetApiV1AmtAlarmOccurrencesGuidWithResponse request returning *GetApiV1AmtAlarmOccurrencesGuidResponse
func (c *ClientWithResponses) GetApiV1AmtAlarmOccurrencesGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtAlarmOccurrencesGuidResponse, error) {
	rsp, err := c.GetApiV1AmtAlarmOccurrencesGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AmtAlarmOccurrencesGuidResponse(rsp)
}

// PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse request with arbitrary body returning *PostApiV1AmtAlarmOccurrencesGuidResponse
func (c *ClientWithResponses) PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtAlarmOccurrencesGuidResponse, error) {
	rsp, err := c.PostApiV1AmtAlarmOccurrencesGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AmtAlarmOccurrencesGuidResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1AmtAlarmOccurrencesGuidWithResponse(ctx context.Context, guid string, body PostApiV1AmtAlarmOccurrencesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtAlarmOccurrencesGuidResponse, error) {
	rsp, err := c.PostApiV1AmtAlarmOccurrencesGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AmtAlarmOccurrencesGuidResponse(rsp)
}

// DeleteApiV1AmtDeactivateGuidWithResponse request returning *DeleteApiV1AmtDeactivateGuidResponse
func (c *ClientWithResponses) DeleteApiV1AmtDeactivateGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteApiV1AmtDeactivateGuidResponse, error) {
	rsp, err := c.DeleteApiV1AmtDeactivateGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1AmtDeactivateGuidResponse(rsp)
}

// GetApiV1AmtFeaturesGuidWithResponse request returning *GetApiV1AmtFeaturesGuidResponse
func (c *ClientWithResponses) GetApiV1AmtFeaturesGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtFeaturesGuidResponse, error) {
	rsp, err := c.GetApiV1AmtFeaturesGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AmtFeaturesGuidResponse(rsp)
}

// PostApiV1AmtFeaturesGuidWithBodyWithResponse request with arbitrary body returning *PostApiV1AmtFeaturesGuidResponse
func (c *ClientWithResponses) PostApiV1AmtFeaturesGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtFeaturesGuidResponse, error) {
	rsp, err := c.PostApiV1AmtFeaturesGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AmtFeaturesGuidResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1AmtFeaturesGuidWithResponse(ctx context.Context, guid string, body PostApiV1AmtFeaturesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtFeaturesGuidResponse, error) {
	rsp, err := c.PostApiV1AmtFeaturesGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AmtFeaturesGuidResponse(rsp)
}

// GetApiV1AmtGeneralSettingsGuidWithResponse request returning *GetApiV1AmtGeneralSettingsGuidResponse
func (c *ClientWithResponses) GetApiV1AmtGeneralSettingsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtGeneralSettingsGuidResponse, error) {
	rsp, err := c.GetApiV1AmtGeneralSettingsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AmtGeneralSettingsGuidResponse(rsp)
}

// GetApiV1AmtHardwareInfoGuidWithResponse request returning *GetApiV1AmtHardwareInfoGuidResponse
func (c *ClientWithResponses) GetApiV1AmtHardwareInfoGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtHardwareInfoGuidResponse, error) {
	rsp, err := c.GetApiV1AmtHardwareInfoGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AmtHardwareInfoGuidResponse(rsp)
}

// GetApiV1AmtLogAuditGuidWithResponse request returning *GetApiV1AmtLogAuditGuidResponse
func (c *ClientWithResponses) GetApiV1AmtLogAuditGuidWithResponse(ctx context.Context, guid string, params *GetApiV1AmtLogAuditGuidParams, reqEditors ...RequestEditorFn) (*GetApiV1AmtLogAuditGuidResponse, error) {
	rsp, err := c.GetApiV1AmtLogAuditGuid(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AmtLogAuditGuidResponse(rsp)
}

// GetApiV1AmtLogEventGuidWithResponse request returning *GetApiV1AmtLogEventGuidResponse
func (c *ClientWithResponses) GetApiV1AmtLogEventGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtLogEventGuidResponse, error) {
	rsp, err := c.GetApiV1AmtLogEventGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AmtLogEventGuidResponse(rsp)
}

// PostApiV1AmtPowerActionGuidWithBodyWithResponse request with arbitrary body returning *PostApiV1AmtPowerActionGuidResponse
func (c *ClientWithResponses) PostApiV1AmtPowerActionGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtPowerActionGuidResponse, error) {
	rsp, err := c.PostApiV1AmtPowerActionGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AmtPowerActionGuidResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1AmtPowerActionGuidWithResponse(ctx context.Context, guid string, body PostApiV1AmtPowerActionGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtPowerActionGuidResponse, error) {
	rsp, err := c.PostApiV1AmtPowerActionGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AmtPowerActionGuidResponse(rsp)
}

// PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse request with arbitrary body returning *PostApiV1AmtPowerBootoptionsGuidResponse
func (c *ClientWithResponses) PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtPowerBootoptionsGuidResponse, error) {
	rsp, err := c.PostApiV1AmtPowerBootoptionsGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AmtPowerBootoptionsGuidResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1AmtPowerBootoptionsGuidWithResponse(ctx context.Context, guid string, body PostApiV1AmtPowerBootoptionsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtPowerBootoptionsGuidResponse, error) {
	rsp, err := c.PostApiV1AmtPowerBootoptionsGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AmtPowerBootoptionsGuidResponse(rsp)
}

// GetApiV1AmtPowerCapabilitiesGuidWithResponse request returning *GetApiV1AmtPowerCapabilitiesGuidResponse
func (c *ClientWithResponses) GetApiV1AmtPowerCapabilitiesGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtPowerCapabilitiesGuidResponse, error) {
	rsp, err := c.GetApiV1AmtPowerCapabilitiesGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AmtPowerCapabilitiesGuidResponse(rsp)
}

// GetApiV1AmtPowerStateGuidWithResponse request returning *GetApiV1AmtPowerStateGuidResponse
func (c *ClientWithResponses) GetApiV1AmtPowerStateGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtPowerStateGuidResponse, error) {
	rsp, err := c.GetApiV1AmtPowerStateGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AmtPowerStateGuidResponse(rsp)
}

// GetApiV1AmtUserConsentCodeCancelGuidWithResponse request returning *GetApiV1AmtUserConsentCodeCancelGuidResponse
func (c *ClientWithResponses) GetApiV1AmtUserConsentCodeCancelGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtUserConsentCodeCancelGuidResponse, error) {
	rsp, err := c.GetApiV1AmtUserConsentCodeCancelGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AmtUserConsentCodeCancelGuidResponse(rsp)
}

// GetApiV1AmtUserConsentCodeGuidWithResponse request returning *GetApiV1AmtUserConsentCodeGuidResponse
func (c *ClientWithResponses) GetApiV1AmtUserConsentCodeGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtUserConsentCodeGuidResponse, error) {
	rsp, err := c.GetApiV1AmtUserConsentCodeGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AmtUserConsentCodeGuidResponse(rsp)
}

// PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse request with arbitrary body returning *PostApiV1AmtUserConsentCodeGuidResponse
func (c *ClientWithResponses) PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtUserConsentCodeGuidResponse, error) {
	rsp, err := c.PostApiV1AmtUserConsentCodeGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AmtUserConsentCodeGuidResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1AmtUserConsentCodeGuidWithResponse(ctx context.Context, guid string, body PostApiV1AmtUserConsentCodeGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtUserConsentCodeGuidResponse, error) {
	rsp, err := c.PostApiV1AmtUserConsentCodeGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AmtUserConsentCodeGuidResponse(rsp)
}

// GetApiV1AmtVersionGuidWithResponse request returning *GetApiV1AmtVersionGuidResponse
func (c *ClientWithResponses) GetApiV1AmtVersionGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtVersionGuidResponse, error) {
	rsp, err := c.GetApiV1AmtVersionGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AmtVersionGuidResponse(rsp)
}

// PostApiV1AuthorizeWithBodyWithResponse request with arbitrary body returning *PostApiV1AuthorizeResponse
func (c *ClientWithResponses) PostApiV1AuthorizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AuthorizeResponse, error) {
	rsp, err := c.PostApiV1AuthorizeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AuthorizeResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1AuthorizeWithResponse(ctx context.Context, body PostApiV1AuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AuthorizeResponse, error) {
	rsp, err := c.PostApiV1Authorize(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AuthorizeResponse(rsp)
}

// GetApiV1AuthorizeRedirectionGuidWithResponse request returning *GetApiV1AuthorizeRedirectionGuidResponse
func (c *ClientWithResponses) GetApiV1AuthorizeRedirectionGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AuthorizeRedirectionGuidResponse, error) {
	rsp, err := c.GetApiV1AuthorizeRedirectionGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AuthorizeRedirectionGuidResponse(rsp)
}

// GetApiV1CiracertWithResponse request returning *GetApiV1CiracertResponse
func (c *ClientWithResponses) GetApiV1CiracertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1CiracertResponse, error) {
	rsp, err := c.GetApiV1Ciracert(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CiracertResponse(rsp)
}

// GetApiV1DevicesWithResponse request returning *GetApiV1DevicesResponse
func (c *ClientWithResponses) GetApiV1DevicesWithResponse(ctx context.Context, params *GetApiV1DevicesParams, reqEditors ...RequestEditorFn) (*GetApiV1DevicesResponse, error) {
	rsp, err := c.GetApiV1Devices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DevicesResponse(rsp)
}

// PatchApiV1DevicesWithBodyWithResponse request with arbitrary body returning *PatchApiV1DevicesResponse
func (c *ClientWithResponses) PatchApiV1DevicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV1DevicesResponse, error) {
	rsp, err := c.PatchApiV1DevicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV1DevicesResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV1DevicesWithResponse(ctx context.Context, body PatchApiV1DevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV1DevicesResponse, error) {
	rsp, err := c.PatchApiV1Devices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV1DevicesResponse(rsp)
}

// PostApiV1DevicesWithBodyWithResponse request with arbitrary body returning *PostApiV1DevicesResponse
func (c *ClientWithResponses) PostApiV1DevicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DevicesResponse, error) {
	rsp, err := c.PostApiV1DevicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DevicesResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1DevicesWithResponse(ctx context.Context, body PostApiV1DevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DevicesResponse, error) {
	rsp, err := c.PostApiV1Devices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DevicesResponse(rsp)
}

// DeleteApiV1DevicesDisconnectGuidWithResponse request returning *DeleteApiV1DevicesDisconnectGuidResponse
func (c *ClientWithResponses) DeleteApiV1DevicesDisconnectGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteApiV1DevicesDisconnectGuidResponse, error) {
	rsp, err := c.DeleteApiV1DevicesDisconnectGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1DevicesDisconnectGuidResponse(rsp)
}

// GetApiV1DevicesRedirectStatusGuidWithResponse request returning *GetApiV1DevicesRedirectStatusGuidResponse
func (c *ClientWithResponses) GetApiV1DevicesRedirectStatusGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1DevicesRedirectStatusGuidResponse, error) {
	rsp, err := c.GetApiV1DevicesRedirectStatusGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DevicesRedirectStatusGuidResponse(rsp)
}

// DeleteApiV1DevicesRefreshGuidWithResponse request returning *DeleteApiV1DevicesRefreshGuidResponse
func (c *ClientWithResponses) DeleteApiV1DevicesRefreshGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteApiV1DevicesRefreshGuidResponse, error) {
	rsp, err := c.DeleteApiV1DevicesRefreshGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1DevicesRefreshGuidResponse(rsp)
}

// GetApiV1DevicesStatsWithResponse request returning *GetApiV1DevicesStatsResponse
func (c *ClientWithResponses) GetApiV1DevicesStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1DevicesStatsResponse, error) {
	rsp, err := c.GetApiV1DevicesStats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DevicesStatsResponse(rsp)
}

// DeleteApiV1DevicesGuidWithResponse request returning *DeleteApiV1DevicesGuidResponse
func (c *ClientWithResponses) DeleteApiV1DevicesGuidWithResponse(ctx context.Context, guid string, params *DeleteApiV1DevicesGuidParams, reqEditors ...RequestEditorFn) (*DeleteApiV1DevicesGuidResponse, error) {
	rsp, err := c.DeleteApiV1DevicesGuid(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1DevicesGuidResponse(rsp)
}

// GetApiV1DevicesGuidWithResponse request returning *GetApiV1DevicesGuidResponse
func (c *ClientWithResponses) GetApiV1DevicesGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1DevicesGuidResponse, error) {
	rsp, err := c.GetApiV1DevicesGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DevicesGuidResponse(rsp)
}

// GetApiV1HealthWithResponse request returning *GetApiV1HealthResponse
func (c *ClientWithResponses) GetApiV1HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1HealthResponse, error) {
	rsp, err := c.GetApiV1Health(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1HealthResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// ParseDeleteApiV1AmtAlarmOccurrencesGuidResponse parses an HTTP response from a DeleteApiV1AmtAlarmOccurrencesGuidWithResponse call
func ParseDeleteApiV1AmtAlarmOccurrencesGuidResponse(rsp *http.Response) (*DeleteApiV1AmtAlarmOccurrencesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1AmtAlarmOccurrencesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeactivateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest DeleteAlarmErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetApiV1AmtAlarmOccurrencesGuidResponse parses an HTTP response from a GetApiV1AmtAlarmOccurrencesGuidWithResponse call
func ParseGetApiV1AmtAlarmOccurrencesGuidResponse(rsp *http.Response) (*GetApiV1AmtAlarmOccurrencesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AmtAlarmOccurrencesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAlarmClockResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1AmtAlarmOccurrencesGuidResponse parses an HTTP response from a PostApiV1AmtAlarmOccurrencesGuidWithResponse call
func ParsePostApiV1AmtAlarmOccurrencesGuidResponse(rsp *http.Response) (*PostApiV1AmtAlarmOccurrencesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AmtAlarmOccurrencesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetAlarmClockResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1AmtDeactivateGuidResponse parses an HTTP response from a DeleteApiV1AmtDeactivateGuidWithResponse call
func ParseDeleteApiV1AmtDeactivateGuidResponse(rsp *http.Response) (*DeleteApiV1AmtDeactivateGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1AmtDeactivateGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeactivateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest DeleteErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetApiV1AmtFeaturesGuidResponse parses an HTTP response from a GetApiV1AmtFeaturesGuidWithResponse call
func ParseGetApiV1AmtFeaturesGuidResponse(rsp *http.Response) (*GetApiV1AmtFeaturesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AmtFeaturesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAMTFeaturesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1AmtFeaturesGuidResponse parses an HTTP response from a PostApiV1AmtFeaturesGuidWithResponse call
func ParsePostApiV1AmtFeaturesGuidResponse(rsp *http.Response) (*PostApiV1AmtFeaturesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AmtFeaturesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetAMTFeaturesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1AmtGeneralSettingsGuidResponse parses an HTTP response from a GetApiV1AmtGeneralSettingsGuidWithResponse call
func ParseGetApiV1AmtGeneralSettingsGuidResponse(rsp *http.Response) (*GetApiV1AmtGeneralSettingsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AmtGeneralSettingsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GeneralSettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1AmtHardwareInfoGuidResponse parses an HTTP response from a GetApiV1AmtHardwareInfoGuidWithResponse call
func ParseGetApiV1AmtHardwareInfoGuidResponse(rsp *http.Response) (*GetApiV1AmtHardwareInfoGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AmtHardwareInfoGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HardwareInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1AmtLogAuditGuidResponse parses an HTTP response from a GetApiV1AmtLogAuditGuidWithResponse call
func ParseGetApiV1AmtLogAuditGuidResponse(rsp *http.Response) (*GetApiV1AmtLogAuditGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AmtLogAuditGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuditLogResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1AmtLogEventGuidResponse parses an HTTP response from a GetApiV1AmtLogEventGuidWithResponse call
func ParseGetApiV1AmtLogEventGuidResponse(rsp *http.Response) (*GetApiV1AmtLogEventGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AmtLogEventGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventLogResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1AmtPowerActionGuidResponse parses an HTTP response from a PostApiV1AmtPowerActionGuidWithResponse call
func ParsePostApiV1AmtPowerActionGuidResponse(rsp *http.Response) (*PostApiV1AmtPowerActionGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AmtPowerActionGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PowerActionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1AmtPowerBootoptionsGuidResponse parses an HTTP response from a PostApiV1AmtPowerBootoptionsGuidWithResponse call
func ParsePostApiV1AmtPowerBootoptionsGuidResponse(rsp *http.Response) (*PostApiV1AmtPowerBootoptionsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AmtPowerBootoptionsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PowerActionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1AmtPowerCapabilitiesGuidResponse parses an HTTP response from a GetApiV1AmtPowerCapabilitiesGuidWithResponse call
func ParseGetApiV1AmtPowerCapabilitiesGuidResponse(rsp *http.Response) (*GetApiV1AmtPowerCapabilitiesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AmtPowerCapabilitiesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PowerCapabilitiesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1AmtPowerStateGuidResponse parses an HTTP response from a GetApiV1AmtPowerStateGuidWithResponse call
func ParseGetApiV1AmtPowerStateGuidResponse(rsp *http.Response) (*GetApiV1AmtPowerStateGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AmtPowerStateGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PowerStateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1AmtUserConsentCodeCancelGuidResponse parses an HTTP response from a GetApiV1AmtUserConsentCodeCancelGuidWithResponse call
func ParseGetApiV1AmtUserConsentCodeCancelGuidResponse(rsp *http.Response) (*GetApiV1AmtUserConsentCodeCancelGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AmtUserConsentCodeCancelGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserConsentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1AmtUserConsentCodeGuidResponse parses an HTTP response from a GetApiV1AmtUserConsentCodeGuidWithResponse call
func ParseGetApiV1AmtUserConsentCodeGuidResponse(rsp *http.Response) (*GetApiV1AmtUserConsentCodeGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AmtUserConsentCodeGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserConsentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1AmtUserConsentCodeGuidResponse parses an HTTP response from a PostApiV1AmtUserConsentCodeGuidWithResponse call
func ParsePostApiV1AmtUserConsentCodeGuidResponse(rsp *http.Response) (*PostApiV1AmtUserConsentCodeGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AmtUserConsentCodeGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserConsentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1AmtVersionGuidResponse parses an HTTP response from a GetApiV1AmtVersionGuidWithResponse call
func ParseGetApiV1AmtVersionGuidResponse(rsp *http.Response) (*GetApiV1AmtVersionGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AmtVersionGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AMTVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1AuthorizeResponse parses an HTTP response from a PostApiV1AuthorizeWithResponse call
func ParsePostApiV1AuthorizeResponse(rsp *http.Response) (*PostApiV1AuthorizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Token *string `json:"token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1AuthorizeRedirectionGuidResponse parses an HTTP response from a GetApiV1AuthorizeRedirectionGuidWithResponse call
func ParseGetApiV1AuthorizeRedirectionGuidResponse(rsp *http.Response) (*GetApiV1AuthorizeRedirectionGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AuthorizeRedirectionGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Token *string `json:"token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1CiracertResponse parses an HTTP response from a GetApiV1CiracertWithResponse call
func ParseGetApiV1CiracertResponse(rsp *http.Response) (*GetApiV1CiracertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CiracertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiracertResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1DevicesResponse parses an HTTP response from a GetApiV1DevicesWithResponse call
func ParseGetApiV1DevicesResponse(rsp *http.Response) (*GetApiV1DevicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Device
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchApiV1DevicesResponse parses an HTTP response from a PatchApiV1DevicesWithResponse call
func ParsePatchApiV1DevicesResponse(rsp *http.Response) (*PatchApiV1DevicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV1DevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EditDeviceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1DevicesResponse parses an HTTP response from a PostApiV1DevicesWithResponse call
func ParsePostApiV1DevicesResponse(rsp *http.Response) (*PostApiV1DevicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AddDeviceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1DevicesDisconnectGuidResponse parses an HTTP response from a DeleteApiV1DevicesDisconnectGuidWithResponse call
func ParseDeleteApiV1DevicesDisconnectGuidResponse(rsp *http.Response) (*DeleteApiV1DevicesDisconnectGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1DevicesDisconnectGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DisconnectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest DisconnectErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetApiV1DevicesRedirectStatusGuidResponse parses an HTTP response from a GetApiV1DevicesRedirectStatusGuidWithResponse call
func ParseGetApiV1DevicesRedirectStatusGuidResponse(rsp *http.Response) (*GetApiV1DevicesRedirectStatusGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DevicesRedirectStatusGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RedirectStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1DevicesRefreshGuidResponse parses an HTTP response from a DeleteApiV1DevicesRefreshGuidWithResponse call
func ParseDeleteApiV1DevicesRefreshGuidResponse(rsp *http.Response) (*DeleteApiV1DevicesRefreshGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1DevicesRefreshGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RefreshResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1DevicesStatsResponse parses an HTTP response from a GetApiV1DevicesStatsWithResponse call
func ParseGetApiV1DevicesStatsResponse(rsp *http.Response) (*GetApiV1DevicesStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DevicesStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Stats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1DevicesGuidResponse parses an HTTP response from a DeleteApiV1DevicesGuidWithResponse call
func ParseDeleteApiV1DevicesGuidResponse(rsp *http.Response) (*DeleteApiV1DevicesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1DevicesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest DeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest DeleteErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetApiV1DevicesGuidResponse parses an HTTP response from a GetApiV1DevicesGuidWithResponse call
func ParseGetApiV1DevicesGuidResponse(rsp *http.Response) (*GetApiV1DevicesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DevicesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Device
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1HealthResponse parses an HTTP response from a GetApiV1HealthWithResponse call
func ParseGetApiV1HealthResponse(rsp *http.Response) (*GetApiV1HealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1HealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthcheckResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
