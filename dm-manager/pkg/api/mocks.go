// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package api

import (
	"context"
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewMockClientWithResponsesInterface creates a new instance of MockClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type MockClientWithResponsesInterface struct {
	mock.Mock
}

type MockClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterface_Expecter {
	return &MockClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// DeleteApiV1AmtAlarmOccurrencesGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) DeleteApiV1AmtAlarmOccurrencesGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteApiV1AmtAlarmOccurrencesGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteApiV1AmtAlarmOccurrencesGuidWithResponse")
	}

	var r0 *DeleteApiV1AmtAlarmOccurrencesGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*DeleteApiV1AmtAlarmOccurrencesGuidResponse, error)); ok {
		return returnFunc(ctx, guid, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *DeleteApiV1AmtAlarmOccurrencesGuidResponse); ok {
		r0 = returnFunc(ctx, guid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteApiV1AmtAlarmOccurrencesGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_DeleteApiV1AmtAlarmOccurrencesGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApiV1AmtAlarmOccurrencesGuidWithResponse'
type MockClientWithResponsesInterface_DeleteApiV1AmtAlarmOccurrencesGuidWithResponse_Call struct {
	*mock.Call
}

// DeleteApiV1AmtAlarmOccurrencesGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) DeleteApiV1AmtAlarmOccurrencesGuidWithResponse(ctx interface{}, guid interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteApiV1AmtAlarmOccurrencesGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteApiV1AmtAlarmOccurrencesGuidWithResponse_Call{Call: _e.mock.On("DeleteApiV1AmtAlarmOccurrencesGuidWithResponse",
		append([]interface{}{ctx, guid}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteApiV1AmtAlarmOccurrencesGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_DeleteApiV1AmtAlarmOccurrencesGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteApiV1AmtAlarmOccurrencesGuidWithResponse_Call) Return(deleteApiV1AmtAlarmOccurrencesGuidResponse *DeleteApiV1AmtAlarmOccurrencesGuidResponse, err error) *MockClientWithResponsesInterface_DeleteApiV1AmtAlarmOccurrencesGuidWithResponse_Call {
	_c.Call.Return(deleteApiV1AmtAlarmOccurrencesGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteApiV1AmtAlarmOccurrencesGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteApiV1AmtAlarmOccurrencesGuidResponse, error)) *MockClientWithResponsesInterface_DeleteApiV1AmtAlarmOccurrencesGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteApiV1AmtDeactivateGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) DeleteApiV1AmtDeactivateGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteApiV1AmtDeactivateGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteApiV1AmtDeactivateGuidWithResponse")
	}

	var r0 *DeleteApiV1AmtDeactivateGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*DeleteApiV1AmtDeactivateGuidResponse, error)); ok {
		return returnFunc(ctx, guid, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *DeleteApiV1AmtDeactivateGuidResponse); ok {
		r0 = returnFunc(ctx, guid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteApiV1AmtDeactivateGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_DeleteApiV1AmtDeactivateGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApiV1AmtDeactivateGuidWithResponse'
type MockClientWithResponsesInterface_DeleteApiV1AmtDeactivateGuidWithResponse_Call struct {
	*mock.Call
}

// DeleteApiV1AmtDeactivateGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) DeleteApiV1AmtDeactivateGuidWithResponse(ctx interface{}, guid interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteApiV1AmtDeactivateGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteApiV1AmtDeactivateGuidWithResponse_Call{Call: _e.mock.On("DeleteApiV1AmtDeactivateGuidWithResponse",
		append([]interface{}{ctx, guid}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteApiV1AmtDeactivateGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_DeleteApiV1AmtDeactivateGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteApiV1AmtDeactivateGuidWithResponse_Call) Return(deleteApiV1AmtDeactivateGuidResponse *DeleteApiV1AmtDeactivateGuidResponse, err error) *MockClientWithResponsesInterface_DeleteApiV1AmtDeactivateGuidWithResponse_Call {
	_c.Call.Return(deleteApiV1AmtDeactivateGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteApiV1AmtDeactivateGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteApiV1AmtDeactivateGuidResponse, error)) *MockClientWithResponsesInterface_DeleteApiV1AmtDeactivateGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteApiV1DevicesDisconnectGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) DeleteApiV1DevicesDisconnectGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteApiV1DevicesDisconnectGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteApiV1DevicesDisconnectGuidWithResponse")
	}

	var r0 *DeleteApiV1DevicesDisconnectGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*DeleteApiV1DevicesDisconnectGuidResponse, error)); ok {
		return returnFunc(ctx, guid, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *DeleteApiV1DevicesDisconnectGuidResponse); ok {
		r0 = returnFunc(ctx, guid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteApiV1DevicesDisconnectGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_DeleteApiV1DevicesDisconnectGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApiV1DevicesDisconnectGuidWithResponse'
type MockClientWithResponsesInterface_DeleteApiV1DevicesDisconnectGuidWithResponse_Call struct {
	*mock.Call
}

// DeleteApiV1DevicesDisconnectGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) DeleteApiV1DevicesDisconnectGuidWithResponse(ctx interface{}, guid interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteApiV1DevicesDisconnectGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteApiV1DevicesDisconnectGuidWithResponse_Call{Call: _e.mock.On("DeleteApiV1DevicesDisconnectGuidWithResponse",
		append([]interface{}{ctx, guid}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteApiV1DevicesDisconnectGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_DeleteApiV1DevicesDisconnectGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteApiV1DevicesDisconnectGuidWithResponse_Call) Return(deleteApiV1DevicesDisconnectGuidResponse *DeleteApiV1DevicesDisconnectGuidResponse, err error) *MockClientWithResponsesInterface_DeleteApiV1DevicesDisconnectGuidWithResponse_Call {
	_c.Call.Return(deleteApiV1DevicesDisconnectGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteApiV1DevicesDisconnectGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteApiV1DevicesDisconnectGuidResponse, error)) *MockClientWithResponsesInterface_DeleteApiV1DevicesDisconnectGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteApiV1DevicesGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) DeleteApiV1DevicesGuidWithResponse(ctx context.Context, guid string, params *DeleteApiV1DevicesGuidParams, reqEditors ...RequestEditorFn) (*DeleteApiV1DevicesGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, params, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteApiV1DevicesGuidWithResponse")
	}

	var r0 *DeleteApiV1DevicesGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *DeleteApiV1DevicesGuidParams, ...RequestEditorFn) (*DeleteApiV1DevicesGuidResponse, error)); ok {
		return returnFunc(ctx, guid, params, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *DeleteApiV1DevicesGuidParams, ...RequestEditorFn) *DeleteApiV1DevicesGuidResponse); ok {
		r0 = returnFunc(ctx, guid, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteApiV1DevicesGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *DeleteApiV1DevicesGuidParams, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_DeleteApiV1DevicesGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApiV1DevicesGuidWithResponse'
type MockClientWithResponsesInterface_DeleteApiV1DevicesGuidWithResponse_Call struct {
	*mock.Call
}

// DeleteApiV1DevicesGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - params
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) DeleteApiV1DevicesGuidWithResponse(ctx interface{}, guid interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteApiV1DevicesGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteApiV1DevicesGuidWithResponse_Call{Call: _e.mock.On("DeleteApiV1DevicesGuidWithResponse",
		append([]interface{}{ctx, guid, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteApiV1DevicesGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, params *DeleteApiV1DevicesGuidParams, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_DeleteApiV1DevicesGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(*DeleteApiV1DevicesGuidParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteApiV1DevicesGuidWithResponse_Call) Return(deleteApiV1DevicesGuidResponse *DeleteApiV1DevicesGuidResponse, err error) *MockClientWithResponsesInterface_DeleteApiV1DevicesGuidWithResponse_Call {
	_c.Call.Return(deleteApiV1DevicesGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteApiV1DevicesGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, params *DeleteApiV1DevicesGuidParams, reqEditors ...RequestEditorFn) (*DeleteApiV1DevicesGuidResponse, error)) *MockClientWithResponsesInterface_DeleteApiV1DevicesGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteApiV1DevicesRefreshGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) DeleteApiV1DevicesRefreshGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteApiV1DevicesRefreshGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteApiV1DevicesRefreshGuidWithResponse")
	}

	var r0 *DeleteApiV1DevicesRefreshGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*DeleteApiV1DevicesRefreshGuidResponse, error)); ok {
		return returnFunc(ctx, guid, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *DeleteApiV1DevicesRefreshGuidResponse); ok {
		r0 = returnFunc(ctx, guid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteApiV1DevicesRefreshGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_DeleteApiV1DevicesRefreshGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApiV1DevicesRefreshGuidWithResponse'
type MockClientWithResponsesInterface_DeleteApiV1DevicesRefreshGuidWithResponse_Call struct {
	*mock.Call
}

// DeleteApiV1DevicesRefreshGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) DeleteApiV1DevicesRefreshGuidWithResponse(ctx interface{}, guid interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteApiV1DevicesRefreshGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteApiV1DevicesRefreshGuidWithResponse_Call{Call: _e.mock.On("DeleteApiV1DevicesRefreshGuidWithResponse",
		append([]interface{}{ctx, guid}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteApiV1DevicesRefreshGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_DeleteApiV1DevicesRefreshGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteApiV1DevicesRefreshGuidWithResponse_Call) Return(deleteApiV1DevicesRefreshGuidResponse *DeleteApiV1DevicesRefreshGuidResponse, err error) *MockClientWithResponsesInterface_DeleteApiV1DevicesRefreshGuidWithResponse_Call {
	_c.Call.Return(deleteApiV1DevicesRefreshGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteApiV1DevicesRefreshGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteApiV1DevicesRefreshGuidResponse, error)) *MockClientWithResponsesInterface_DeleteApiV1DevicesRefreshGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV1AmtAlarmOccurrencesGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetApiV1AmtAlarmOccurrencesGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtAlarmOccurrencesGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetApiV1AmtAlarmOccurrencesGuidWithResponse")
	}

	var r0 *GetApiV1AmtAlarmOccurrencesGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetApiV1AmtAlarmOccurrencesGuidResponse, error)); ok {
		return returnFunc(ctx, guid, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetApiV1AmtAlarmOccurrencesGuidResponse); ok {
		r0 = returnFunc(ctx, guid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetApiV1AmtAlarmOccurrencesGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetApiV1AmtAlarmOccurrencesGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1AmtAlarmOccurrencesGuidWithResponse'
type MockClientWithResponsesInterface_GetApiV1AmtAlarmOccurrencesGuidWithResponse_Call struct {
	*mock.Call
}

// GetApiV1AmtAlarmOccurrencesGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetApiV1AmtAlarmOccurrencesGuidWithResponse(ctx interface{}, guid interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetApiV1AmtAlarmOccurrencesGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_GetApiV1AmtAlarmOccurrencesGuidWithResponse_Call{Call: _e.mock.On("GetApiV1AmtAlarmOccurrencesGuidWithResponse",
		append([]interface{}{ctx, guid}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtAlarmOccurrencesGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetApiV1AmtAlarmOccurrencesGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtAlarmOccurrencesGuidWithResponse_Call) Return(getApiV1AmtAlarmOccurrencesGuidResponse *GetApiV1AmtAlarmOccurrencesGuidResponse, err error) *MockClientWithResponsesInterface_GetApiV1AmtAlarmOccurrencesGuidWithResponse_Call {
	_c.Call.Return(getApiV1AmtAlarmOccurrencesGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtAlarmOccurrencesGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtAlarmOccurrencesGuidResponse, error)) *MockClientWithResponsesInterface_GetApiV1AmtAlarmOccurrencesGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV1AmtFeaturesGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetApiV1AmtFeaturesGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtFeaturesGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetApiV1AmtFeaturesGuidWithResponse")
	}

	var r0 *GetApiV1AmtFeaturesGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetApiV1AmtFeaturesGuidResponse, error)); ok {
		return returnFunc(ctx, guid, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetApiV1AmtFeaturesGuidResponse); ok {
		r0 = returnFunc(ctx, guid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetApiV1AmtFeaturesGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetApiV1AmtFeaturesGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1AmtFeaturesGuidWithResponse'
type MockClientWithResponsesInterface_GetApiV1AmtFeaturesGuidWithResponse_Call struct {
	*mock.Call
}

// GetApiV1AmtFeaturesGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetApiV1AmtFeaturesGuidWithResponse(ctx interface{}, guid interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetApiV1AmtFeaturesGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_GetApiV1AmtFeaturesGuidWithResponse_Call{Call: _e.mock.On("GetApiV1AmtFeaturesGuidWithResponse",
		append([]interface{}{ctx, guid}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtFeaturesGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetApiV1AmtFeaturesGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtFeaturesGuidWithResponse_Call) Return(getApiV1AmtFeaturesGuidResponse *GetApiV1AmtFeaturesGuidResponse, err error) *MockClientWithResponsesInterface_GetApiV1AmtFeaturesGuidWithResponse_Call {
	_c.Call.Return(getApiV1AmtFeaturesGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtFeaturesGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtFeaturesGuidResponse, error)) *MockClientWithResponsesInterface_GetApiV1AmtFeaturesGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV1AmtGeneralSettingsGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetApiV1AmtGeneralSettingsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtGeneralSettingsGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetApiV1AmtGeneralSettingsGuidWithResponse")
	}

	var r0 *GetApiV1AmtGeneralSettingsGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetApiV1AmtGeneralSettingsGuidResponse, error)); ok {
		return returnFunc(ctx, guid, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetApiV1AmtGeneralSettingsGuidResponse); ok {
		r0 = returnFunc(ctx, guid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetApiV1AmtGeneralSettingsGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetApiV1AmtGeneralSettingsGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1AmtGeneralSettingsGuidWithResponse'
type MockClientWithResponsesInterface_GetApiV1AmtGeneralSettingsGuidWithResponse_Call struct {
	*mock.Call
}

// GetApiV1AmtGeneralSettingsGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetApiV1AmtGeneralSettingsGuidWithResponse(ctx interface{}, guid interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetApiV1AmtGeneralSettingsGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_GetApiV1AmtGeneralSettingsGuidWithResponse_Call{Call: _e.mock.On("GetApiV1AmtGeneralSettingsGuidWithResponse",
		append([]interface{}{ctx, guid}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtGeneralSettingsGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetApiV1AmtGeneralSettingsGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtGeneralSettingsGuidWithResponse_Call) Return(getApiV1AmtGeneralSettingsGuidResponse *GetApiV1AmtGeneralSettingsGuidResponse, err error) *MockClientWithResponsesInterface_GetApiV1AmtGeneralSettingsGuidWithResponse_Call {
	_c.Call.Return(getApiV1AmtGeneralSettingsGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtGeneralSettingsGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtGeneralSettingsGuidResponse, error)) *MockClientWithResponsesInterface_GetApiV1AmtGeneralSettingsGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV1AmtHardwareInfoGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetApiV1AmtHardwareInfoGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtHardwareInfoGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetApiV1AmtHardwareInfoGuidWithResponse")
	}

	var r0 *GetApiV1AmtHardwareInfoGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetApiV1AmtHardwareInfoGuidResponse, error)); ok {
		return returnFunc(ctx, guid, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetApiV1AmtHardwareInfoGuidResponse); ok {
		r0 = returnFunc(ctx, guid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetApiV1AmtHardwareInfoGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetApiV1AmtHardwareInfoGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1AmtHardwareInfoGuidWithResponse'
type MockClientWithResponsesInterface_GetApiV1AmtHardwareInfoGuidWithResponse_Call struct {
	*mock.Call
}

// GetApiV1AmtHardwareInfoGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetApiV1AmtHardwareInfoGuidWithResponse(ctx interface{}, guid interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetApiV1AmtHardwareInfoGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_GetApiV1AmtHardwareInfoGuidWithResponse_Call{Call: _e.mock.On("GetApiV1AmtHardwareInfoGuidWithResponse",
		append([]interface{}{ctx, guid}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtHardwareInfoGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetApiV1AmtHardwareInfoGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtHardwareInfoGuidWithResponse_Call) Return(getApiV1AmtHardwareInfoGuidResponse *GetApiV1AmtHardwareInfoGuidResponse, err error) *MockClientWithResponsesInterface_GetApiV1AmtHardwareInfoGuidWithResponse_Call {
	_c.Call.Return(getApiV1AmtHardwareInfoGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtHardwareInfoGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtHardwareInfoGuidResponse, error)) *MockClientWithResponsesInterface_GetApiV1AmtHardwareInfoGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV1AmtLogAuditGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetApiV1AmtLogAuditGuidWithResponse(ctx context.Context, guid string, params *GetApiV1AmtLogAuditGuidParams, reqEditors ...RequestEditorFn) (*GetApiV1AmtLogAuditGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, params, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetApiV1AmtLogAuditGuidWithResponse")
	}

	var r0 *GetApiV1AmtLogAuditGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *GetApiV1AmtLogAuditGuidParams, ...RequestEditorFn) (*GetApiV1AmtLogAuditGuidResponse, error)); ok {
		return returnFunc(ctx, guid, params, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *GetApiV1AmtLogAuditGuidParams, ...RequestEditorFn) *GetApiV1AmtLogAuditGuidResponse); ok {
		r0 = returnFunc(ctx, guid, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetApiV1AmtLogAuditGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *GetApiV1AmtLogAuditGuidParams, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetApiV1AmtLogAuditGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1AmtLogAuditGuidWithResponse'
type MockClientWithResponsesInterface_GetApiV1AmtLogAuditGuidWithResponse_Call struct {
	*mock.Call
}

// GetApiV1AmtLogAuditGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - params
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetApiV1AmtLogAuditGuidWithResponse(ctx interface{}, guid interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetApiV1AmtLogAuditGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_GetApiV1AmtLogAuditGuidWithResponse_Call{Call: _e.mock.On("GetApiV1AmtLogAuditGuidWithResponse",
		append([]interface{}{ctx, guid, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtLogAuditGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, params *GetApiV1AmtLogAuditGuidParams, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetApiV1AmtLogAuditGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(*GetApiV1AmtLogAuditGuidParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtLogAuditGuidWithResponse_Call) Return(getApiV1AmtLogAuditGuidResponse *GetApiV1AmtLogAuditGuidResponse, err error) *MockClientWithResponsesInterface_GetApiV1AmtLogAuditGuidWithResponse_Call {
	_c.Call.Return(getApiV1AmtLogAuditGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtLogAuditGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, params *GetApiV1AmtLogAuditGuidParams, reqEditors ...RequestEditorFn) (*GetApiV1AmtLogAuditGuidResponse, error)) *MockClientWithResponsesInterface_GetApiV1AmtLogAuditGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV1AmtLogEventGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetApiV1AmtLogEventGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtLogEventGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetApiV1AmtLogEventGuidWithResponse")
	}

	var r0 *GetApiV1AmtLogEventGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetApiV1AmtLogEventGuidResponse, error)); ok {
		return returnFunc(ctx, guid, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetApiV1AmtLogEventGuidResponse); ok {
		r0 = returnFunc(ctx, guid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetApiV1AmtLogEventGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetApiV1AmtLogEventGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1AmtLogEventGuidWithResponse'
type MockClientWithResponsesInterface_GetApiV1AmtLogEventGuidWithResponse_Call struct {
	*mock.Call
}

// GetApiV1AmtLogEventGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetApiV1AmtLogEventGuidWithResponse(ctx interface{}, guid interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetApiV1AmtLogEventGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_GetApiV1AmtLogEventGuidWithResponse_Call{Call: _e.mock.On("GetApiV1AmtLogEventGuidWithResponse",
		append([]interface{}{ctx, guid}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtLogEventGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetApiV1AmtLogEventGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtLogEventGuidWithResponse_Call) Return(getApiV1AmtLogEventGuidResponse *GetApiV1AmtLogEventGuidResponse, err error) *MockClientWithResponsesInterface_GetApiV1AmtLogEventGuidWithResponse_Call {
	_c.Call.Return(getApiV1AmtLogEventGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtLogEventGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtLogEventGuidResponse, error)) *MockClientWithResponsesInterface_GetApiV1AmtLogEventGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV1AmtPowerCapabilitiesGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetApiV1AmtPowerCapabilitiesGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtPowerCapabilitiesGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetApiV1AmtPowerCapabilitiesGuidWithResponse")
	}

	var r0 *GetApiV1AmtPowerCapabilitiesGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetApiV1AmtPowerCapabilitiesGuidResponse, error)); ok {
		return returnFunc(ctx, guid, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetApiV1AmtPowerCapabilitiesGuidResponse); ok {
		r0 = returnFunc(ctx, guid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetApiV1AmtPowerCapabilitiesGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetApiV1AmtPowerCapabilitiesGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1AmtPowerCapabilitiesGuidWithResponse'
type MockClientWithResponsesInterface_GetApiV1AmtPowerCapabilitiesGuidWithResponse_Call struct {
	*mock.Call
}

// GetApiV1AmtPowerCapabilitiesGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetApiV1AmtPowerCapabilitiesGuidWithResponse(ctx interface{}, guid interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetApiV1AmtPowerCapabilitiesGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_GetApiV1AmtPowerCapabilitiesGuidWithResponse_Call{Call: _e.mock.On("GetApiV1AmtPowerCapabilitiesGuidWithResponse",
		append([]interface{}{ctx, guid}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtPowerCapabilitiesGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetApiV1AmtPowerCapabilitiesGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtPowerCapabilitiesGuidWithResponse_Call) Return(getApiV1AmtPowerCapabilitiesGuidResponse *GetApiV1AmtPowerCapabilitiesGuidResponse, err error) *MockClientWithResponsesInterface_GetApiV1AmtPowerCapabilitiesGuidWithResponse_Call {
	_c.Call.Return(getApiV1AmtPowerCapabilitiesGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtPowerCapabilitiesGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtPowerCapabilitiesGuidResponse, error)) *MockClientWithResponsesInterface_GetApiV1AmtPowerCapabilitiesGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV1AmtPowerStateGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetApiV1AmtPowerStateGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtPowerStateGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetApiV1AmtPowerStateGuidWithResponse")
	}

	var r0 *GetApiV1AmtPowerStateGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetApiV1AmtPowerStateGuidResponse, error)); ok {
		return returnFunc(ctx, guid, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetApiV1AmtPowerStateGuidResponse); ok {
		r0 = returnFunc(ctx, guid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetApiV1AmtPowerStateGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetApiV1AmtPowerStateGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1AmtPowerStateGuidWithResponse'
type MockClientWithResponsesInterface_GetApiV1AmtPowerStateGuidWithResponse_Call struct {
	*mock.Call
}

// GetApiV1AmtPowerStateGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetApiV1AmtPowerStateGuidWithResponse(ctx interface{}, guid interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetApiV1AmtPowerStateGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_GetApiV1AmtPowerStateGuidWithResponse_Call{Call: _e.mock.On("GetApiV1AmtPowerStateGuidWithResponse",
		append([]interface{}{ctx, guid}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtPowerStateGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetApiV1AmtPowerStateGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtPowerStateGuidWithResponse_Call) Return(getApiV1AmtPowerStateGuidResponse *GetApiV1AmtPowerStateGuidResponse, err error) *MockClientWithResponsesInterface_GetApiV1AmtPowerStateGuidWithResponse_Call {
	_c.Call.Return(getApiV1AmtPowerStateGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtPowerStateGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtPowerStateGuidResponse, error)) *MockClientWithResponsesInterface_GetApiV1AmtPowerStateGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV1AmtUserConsentCodeCancelGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetApiV1AmtUserConsentCodeCancelGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtUserConsentCodeCancelGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetApiV1AmtUserConsentCodeCancelGuidWithResponse")
	}

	var r0 *GetApiV1AmtUserConsentCodeCancelGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetApiV1AmtUserConsentCodeCancelGuidResponse, error)); ok {
		return returnFunc(ctx, guid, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetApiV1AmtUserConsentCodeCancelGuidResponse); ok {
		r0 = returnFunc(ctx, guid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetApiV1AmtUserConsentCodeCancelGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeCancelGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1AmtUserConsentCodeCancelGuidWithResponse'
type MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeCancelGuidWithResponse_Call struct {
	*mock.Call
}

// GetApiV1AmtUserConsentCodeCancelGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetApiV1AmtUserConsentCodeCancelGuidWithResponse(ctx interface{}, guid interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeCancelGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeCancelGuidWithResponse_Call{Call: _e.mock.On("GetApiV1AmtUserConsentCodeCancelGuidWithResponse",
		append([]interface{}{ctx, guid}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeCancelGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeCancelGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeCancelGuidWithResponse_Call) Return(getApiV1AmtUserConsentCodeCancelGuidResponse *GetApiV1AmtUserConsentCodeCancelGuidResponse, err error) *MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeCancelGuidWithResponse_Call {
	_c.Call.Return(getApiV1AmtUserConsentCodeCancelGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeCancelGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtUserConsentCodeCancelGuidResponse, error)) *MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeCancelGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV1AmtUserConsentCodeGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetApiV1AmtUserConsentCodeGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtUserConsentCodeGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetApiV1AmtUserConsentCodeGuidWithResponse")
	}

	var r0 *GetApiV1AmtUserConsentCodeGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetApiV1AmtUserConsentCodeGuidResponse, error)); ok {
		return returnFunc(ctx, guid, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetApiV1AmtUserConsentCodeGuidResponse); ok {
		r0 = returnFunc(ctx, guid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetApiV1AmtUserConsentCodeGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1AmtUserConsentCodeGuidWithResponse'
type MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeGuidWithResponse_Call struct {
	*mock.Call
}

// GetApiV1AmtUserConsentCodeGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetApiV1AmtUserConsentCodeGuidWithResponse(ctx interface{}, guid interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeGuidWithResponse_Call{Call: _e.mock.On("GetApiV1AmtUserConsentCodeGuidWithResponse",
		append([]interface{}{ctx, guid}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeGuidWithResponse_Call) Return(getApiV1AmtUserConsentCodeGuidResponse *GetApiV1AmtUserConsentCodeGuidResponse, err error) *MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeGuidWithResponse_Call {
	_c.Call.Return(getApiV1AmtUserConsentCodeGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtUserConsentCodeGuidResponse, error)) *MockClientWithResponsesInterface_GetApiV1AmtUserConsentCodeGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV1AmtVersionGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetApiV1AmtVersionGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtVersionGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetApiV1AmtVersionGuidWithResponse")
	}

	var r0 *GetApiV1AmtVersionGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetApiV1AmtVersionGuidResponse, error)); ok {
		return returnFunc(ctx, guid, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetApiV1AmtVersionGuidResponse); ok {
		r0 = returnFunc(ctx, guid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetApiV1AmtVersionGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetApiV1AmtVersionGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1AmtVersionGuidWithResponse'
type MockClientWithResponsesInterface_GetApiV1AmtVersionGuidWithResponse_Call struct {
	*mock.Call
}

// GetApiV1AmtVersionGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetApiV1AmtVersionGuidWithResponse(ctx interface{}, guid interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetApiV1AmtVersionGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_GetApiV1AmtVersionGuidWithResponse_Call{Call: _e.mock.On("GetApiV1AmtVersionGuidWithResponse",
		append([]interface{}{ctx, guid}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtVersionGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetApiV1AmtVersionGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtVersionGuidWithResponse_Call) Return(getApiV1AmtVersionGuidResponse *GetApiV1AmtVersionGuidResponse, err error) *MockClientWithResponsesInterface_GetApiV1AmtVersionGuidWithResponse_Call {
	_c.Call.Return(getApiV1AmtVersionGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AmtVersionGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AmtVersionGuidResponse, error)) *MockClientWithResponsesInterface_GetApiV1AmtVersionGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV1AuthorizeRedirectionGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetApiV1AuthorizeRedirectionGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AuthorizeRedirectionGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetApiV1AuthorizeRedirectionGuidWithResponse")
	}

	var r0 *GetApiV1AuthorizeRedirectionGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetApiV1AuthorizeRedirectionGuidResponse, error)); ok {
		return returnFunc(ctx, guid, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetApiV1AuthorizeRedirectionGuidResponse); ok {
		r0 = returnFunc(ctx, guid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetApiV1AuthorizeRedirectionGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetApiV1AuthorizeRedirectionGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1AuthorizeRedirectionGuidWithResponse'
type MockClientWithResponsesInterface_GetApiV1AuthorizeRedirectionGuidWithResponse_Call struct {
	*mock.Call
}

// GetApiV1AuthorizeRedirectionGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetApiV1AuthorizeRedirectionGuidWithResponse(ctx interface{}, guid interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetApiV1AuthorizeRedirectionGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_GetApiV1AuthorizeRedirectionGuidWithResponse_Call{Call: _e.mock.On("GetApiV1AuthorizeRedirectionGuidWithResponse",
		append([]interface{}{ctx, guid}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetApiV1AuthorizeRedirectionGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetApiV1AuthorizeRedirectionGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AuthorizeRedirectionGuidWithResponse_Call) Return(getApiV1AuthorizeRedirectionGuidResponse *GetApiV1AuthorizeRedirectionGuidResponse, err error) *MockClientWithResponsesInterface_GetApiV1AuthorizeRedirectionGuidWithResponse_Call {
	_c.Call.Return(getApiV1AuthorizeRedirectionGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AuthorizeRedirectionGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1AuthorizeRedirectionGuidResponse, error)) *MockClientWithResponsesInterface_GetApiV1AuthorizeRedirectionGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV1CiracertWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetApiV1CiracertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1CiracertResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetApiV1CiracertWithResponse")
	}

	var r0 *GetApiV1CiracertResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...RequestEditorFn) (*GetApiV1CiracertResponse, error)); ok {
		return returnFunc(ctx, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...RequestEditorFn) *GetApiV1CiracertResponse); ok {
		r0 = returnFunc(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetApiV1CiracertResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetApiV1CiracertWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1CiracertWithResponse'
type MockClientWithResponsesInterface_GetApiV1CiracertWithResponse_Call struct {
	*mock.Call
}

// GetApiV1CiracertWithResponse is a helper method to define mock.On call
//   - ctx
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetApiV1CiracertWithResponse(ctx interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetApiV1CiracertWithResponse_Call {
	return &MockClientWithResponsesInterface_GetApiV1CiracertWithResponse_Call{Call: _e.mock.On("GetApiV1CiracertWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetApiV1CiracertWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetApiV1CiracertWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]RequestEditorFn)
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1CiracertWithResponse_Call) Return(getApiV1CiracertResponse *GetApiV1CiracertResponse, err error) *MockClientWithResponsesInterface_GetApiV1CiracertWithResponse_Call {
	_c.Call.Return(getApiV1CiracertResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1CiracertWithResponse_Call) RunAndReturn(run func(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1CiracertResponse, error)) *MockClientWithResponsesInterface_GetApiV1CiracertWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV1DevicesGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetApiV1DevicesGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1DevicesGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetApiV1DevicesGuidWithResponse")
	}

	var r0 *GetApiV1DevicesGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetApiV1DevicesGuidResponse, error)); ok {
		return returnFunc(ctx, guid, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetApiV1DevicesGuidResponse); ok {
		r0 = returnFunc(ctx, guid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetApiV1DevicesGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetApiV1DevicesGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1DevicesGuidWithResponse'
type MockClientWithResponsesInterface_GetApiV1DevicesGuidWithResponse_Call struct {
	*mock.Call
}

// GetApiV1DevicesGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetApiV1DevicesGuidWithResponse(ctx interface{}, guid interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetApiV1DevicesGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_GetApiV1DevicesGuidWithResponse_Call{Call: _e.mock.On("GetApiV1DevicesGuidWithResponse",
		append([]interface{}{ctx, guid}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetApiV1DevicesGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetApiV1DevicesGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1DevicesGuidWithResponse_Call) Return(getApiV1DevicesGuidResponse *GetApiV1DevicesGuidResponse, err error) *MockClientWithResponsesInterface_GetApiV1DevicesGuidWithResponse_Call {
	_c.Call.Return(getApiV1DevicesGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1DevicesGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1DevicesGuidResponse, error)) *MockClientWithResponsesInterface_GetApiV1DevicesGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV1DevicesRedirectStatusGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetApiV1DevicesRedirectStatusGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1DevicesRedirectStatusGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetApiV1DevicesRedirectStatusGuidWithResponse")
	}

	var r0 *GetApiV1DevicesRedirectStatusGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetApiV1DevicesRedirectStatusGuidResponse, error)); ok {
		return returnFunc(ctx, guid, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetApiV1DevicesRedirectStatusGuidResponse); ok {
		r0 = returnFunc(ctx, guid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetApiV1DevicesRedirectStatusGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetApiV1DevicesRedirectStatusGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1DevicesRedirectStatusGuidWithResponse'
type MockClientWithResponsesInterface_GetApiV1DevicesRedirectStatusGuidWithResponse_Call struct {
	*mock.Call
}

// GetApiV1DevicesRedirectStatusGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetApiV1DevicesRedirectStatusGuidWithResponse(ctx interface{}, guid interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetApiV1DevicesRedirectStatusGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_GetApiV1DevicesRedirectStatusGuidWithResponse_Call{Call: _e.mock.On("GetApiV1DevicesRedirectStatusGuidWithResponse",
		append([]interface{}{ctx, guid}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetApiV1DevicesRedirectStatusGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetApiV1DevicesRedirectStatusGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1DevicesRedirectStatusGuidWithResponse_Call) Return(getApiV1DevicesRedirectStatusGuidResponse *GetApiV1DevicesRedirectStatusGuidResponse, err error) *MockClientWithResponsesInterface_GetApiV1DevicesRedirectStatusGuidWithResponse_Call {
	_c.Call.Return(getApiV1DevicesRedirectStatusGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1DevicesRedirectStatusGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetApiV1DevicesRedirectStatusGuidResponse, error)) *MockClientWithResponsesInterface_GetApiV1DevicesRedirectStatusGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV1DevicesStatsWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetApiV1DevicesStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1DevicesStatsResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetApiV1DevicesStatsWithResponse")
	}

	var r0 *GetApiV1DevicesStatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...RequestEditorFn) (*GetApiV1DevicesStatsResponse, error)); ok {
		return returnFunc(ctx, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...RequestEditorFn) *GetApiV1DevicesStatsResponse); ok {
		r0 = returnFunc(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetApiV1DevicesStatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetApiV1DevicesStatsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1DevicesStatsWithResponse'
type MockClientWithResponsesInterface_GetApiV1DevicesStatsWithResponse_Call struct {
	*mock.Call
}

// GetApiV1DevicesStatsWithResponse is a helper method to define mock.On call
//   - ctx
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetApiV1DevicesStatsWithResponse(ctx interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetApiV1DevicesStatsWithResponse_Call {
	return &MockClientWithResponsesInterface_GetApiV1DevicesStatsWithResponse_Call{Call: _e.mock.On("GetApiV1DevicesStatsWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetApiV1DevicesStatsWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetApiV1DevicesStatsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]RequestEditorFn)
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1DevicesStatsWithResponse_Call) Return(getApiV1DevicesStatsResponse *GetApiV1DevicesStatsResponse, err error) *MockClientWithResponsesInterface_GetApiV1DevicesStatsWithResponse_Call {
	_c.Call.Return(getApiV1DevicesStatsResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1DevicesStatsWithResponse_Call) RunAndReturn(run func(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1DevicesStatsResponse, error)) *MockClientWithResponsesInterface_GetApiV1DevicesStatsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV1DevicesWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetApiV1DevicesWithResponse(ctx context.Context, params *GetApiV1DevicesParams, reqEditors ...RequestEditorFn) (*GetApiV1DevicesResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, params, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetApiV1DevicesWithResponse")
	}

	var r0 *GetApiV1DevicesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetApiV1DevicesParams, ...RequestEditorFn) (*GetApiV1DevicesResponse, error)); ok {
		return returnFunc(ctx, params, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetApiV1DevicesParams, ...RequestEditorFn) *GetApiV1DevicesResponse); ok {
		r0 = returnFunc(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetApiV1DevicesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetApiV1DevicesParams, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetApiV1DevicesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1DevicesWithResponse'
type MockClientWithResponsesInterface_GetApiV1DevicesWithResponse_Call struct {
	*mock.Call
}

// GetApiV1DevicesWithResponse is a helper method to define mock.On call
//   - ctx
//   - params
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetApiV1DevicesWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetApiV1DevicesWithResponse_Call {
	return &MockClientWithResponsesInterface_GetApiV1DevicesWithResponse_Call{Call: _e.mock.On("GetApiV1DevicesWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetApiV1DevicesWithResponse_Call) Run(run func(ctx context.Context, params *GetApiV1DevicesParams, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetApiV1DevicesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(*GetApiV1DevicesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1DevicesWithResponse_Call) Return(getApiV1DevicesResponse *GetApiV1DevicesResponse, err error) *MockClientWithResponsesInterface_GetApiV1DevicesWithResponse_Call {
	_c.Call.Return(getApiV1DevicesResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1DevicesWithResponse_Call) RunAndReturn(run func(ctx context.Context, params *GetApiV1DevicesParams, reqEditors ...RequestEditorFn) (*GetApiV1DevicesResponse, error)) *MockClientWithResponsesInterface_GetApiV1DevicesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV1HealthWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetApiV1HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1HealthResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetApiV1HealthWithResponse")
	}

	var r0 *GetApiV1HealthResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...RequestEditorFn) (*GetApiV1HealthResponse, error)); ok {
		return returnFunc(ctx, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...RequestEditorFn) *GetApiV1HealthResponse); ok {
		r0 = returnFunc(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetApiV1HealthResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetApiV1HealthWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1HealthWithResponse'
type MockClientWithResponsesInterface_GetApiV1HealthWithResponse_Call struct {
	*mock.Call
}

// GetApiV1HealthWithResponse is a helper method to define mock.On call
//   - ctx
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetApiV1HealthWithResponse(ctx interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetApiV1HealthWithResponse_Call {
	return &MockClientWithResponsesInterface_GetApiV1HealthWithResponse_Call{Call: _e.mock.On("GetApiV1HealthWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetApiV1HealthWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetApiV1HealthWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]RequestEditorFn)
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1HealthWithResponse_Call) Return(getApiV1HealthResponse *GetApiV1HealthResponse, err error) *MockClientWithResponsesInterface_GetApiV1HealthWithResponse_Call {
	_c.Call.Return(getApiV1HealthResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1HealthWithResponse_Call) RunAndReturn(run func(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1HealthResponse, error)) *MockClientWithResponsesInterface_GetApiV1HealthWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersionWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetVersionWithResponse")
	}

	var r0 *GetVersionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...RequestEditorFn) (*GetVersionResponse, error)); ok {
		return returnFunc(ctx, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...RequestEditorFn) *GetVersionResponse); ok {
		r0 = returnFunc(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetVersionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetVersionWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersionWithResponse'
type MockClientWithResponsesInterface_GetVersionWithResponse_Call struct {
	*mock.Call
}

// GetVersionWithResponse is a helper method to define mock.On call
//   - ctx
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetVersionWithResponse(ctx interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetVersionWithResponse_Call {
	return &MockClientWithResponsesInterface_GetVersionWithResponse_Call{Call: _e.mock.On("GetVersionWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetVersionWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetVersionWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]RequestEditorFn)
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetVersionWithResponse_Call) Return(getVersionResponse *GetVersionResponse, err error) *MockClientWithResponsesInterface_GetVersionWithResponse_Call {
	_c.Call.Return(getVersionResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetVersionWithResponse_Call) RunAndReturn(run func(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)) *MockClientWithResponsesInterface_GetVersionWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PatchApiV1DevicesWithBodyWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) PatchApiV1DevicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV1DevicesResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, contentType, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, contentType, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PatchApiV1DevicesWithBodyWithResponse")
	}

	var r0 *PatchApiV1DevicesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) (*PatchApiV1DevicesResponse, error)); ok {
		return returnFunc(ctx, contentType, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) *PatchApiV1DevicesResponse); ok {
		r0 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PatchApiV1DevicesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_PatchApiV1DevicesWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchApiV1DevicesWithBodyWithResponse'
type MockClientWithResponsesInterface_PatchApiV1DevicesWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchApiV1DevicesWithBodyWithResponse is a helper method to define mock.On call
//   - ctx
//   - contentType
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) PatchApiV1DevicesWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PatchApiV1DevicesWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_PatchApiV1DevicesWithBodyWithResponse_Call{Call: _e.mock.On("PatchApiV1DevicesWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PatchApiV1DevicesWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_PatchApiV1DevicesWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PatchApiV1DevicesWithBodyWithResponse_Call) Return(patchApiV1DevicesResponse *PatchApiV1DevicesResponse, err error) *MockClientWithResponsesInterface_PatchApiV1DevicesWithBodyWithResponse_Call {
	_c.Call.Return(patchApiV1DevicesResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_PatchApiV1DevicesWithBodyWithResponse_Call) RunAndReturn(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV1DevicesResponse, error)) *MockClientWithResponsesInterface_PatchApiV1DevicesWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PatchApiV1DevicesWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) PatchApiV1DevicesWithResponse(ctx context.Context, body PatchApiV1DevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV1DevicesResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PatchApiV1DevicesWithResponse")
	}

	var r0 *PatchApiV1DevicesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, PatchApiV1DevicesJSONRequestBody, ...RequestEditorFn) (*PatchApiV1DevicesResponse, error)); ok {
		return returnFunc(ctx, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, PatchApiV1DevicesJSONRequestBody, ...RequestEditorFn) *PatchApiV1DevicesResponse); ok {
		r0 = returnFunc(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PatchApiV1DevicesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, PatchApiV1DevicesJSONRequestBody, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_PatchApiV1DevicesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchApiV1DevicesWithResponse'
type MockClientWithResponsesInterface_PatchApiV1DevicesWithResponse_Call struct {
	*mock.Call
}

// PatchApiV1DevicesWithResponse is a helper method to define mock.On call
//   - ctx
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) PatchApiV1DevicesWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PatchApiV1DevicesWithResponse_Call {
	return &MockClientWithResponsesInterface_PatchApiV1DevicesWithResponse_Call{Call: _e.mock.On("PatchApiV1DevicesWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PatchApiV1DevicesWithResponse_Call) Run(run func(ctx context.Context, body PatchApiV1DevicesJSONRequestBody, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_PatchApiV1DevicesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(PatchApiV1DevicesJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PatchApiV1DevicesWithResponse_Call) Return(patchApiV1DevicesResponse *PatchApiV1DevicesResponse, err error) *MockClientWithResponsesInterface_PatchApiV1DevicesWithResponse_Call {
	_c.Call.Return(patchApiV1DevicesResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_PatchApiV1DevicesWithResponse_Call) RunAndReturn(run func(ctx context.Context, body PatchApiV1DevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV1DevicesResponse, error)) *MockClientWithResponsesInterface_PatchApiV1DevicesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtAlarmOccurrencesGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, contentType, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid, contentType, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse")
	}

	var r0 *PostApiV1AmtAlarmOccurrencesGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) (*PostApiV1AmtAlarmOccurrencesGuidResponse, error)); ok {
		return returnFunc(ctx, guid, contentType, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) *PostApiV1AmtAlarmOccurrencesGuidResponse); ok {
		r0 = returnFunc(ctx, guid, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PostApiV1AmtAlarmOccurrencesGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse'
type MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - contentType
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse(ctx interface{}, guid interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse_Call{Call: _e.mock.On("PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse",
		append([]interface{}{ctx, guid, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse_Call) Run(run func(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[4].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse_Call) Return(postApiV1AmtAlarmOccurrencesGuidResponse *PostApiV1AmtAlarmOccurrencesGuidResponse, err error) *MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse_Call {
	_c.Call.Return(postApiV1AmtAlarmOccurrencesGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtAlarmOccurrencesGuidResponse, error)) *MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostApiV1AmtAlarmOccurrencesGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) PostApiV1AmtAlarmOccurrencesGuidWithResponse(ctx context.Context, guid string, body PostApiV1AmtAlarmOccurrencesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtAlarmOccurrencesGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PostApiV1AmtAlarmOccurrencesGuidWithResponse")
	}

	var r0 *PostApiV1AmtAlarmOccurrencesGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, PostApiV1AmtAlarmOccurrencesGuidJSONRequestBody, ...RequestEditorFn) (*PostApiV1AmtAlarmOccurrencesGuidResponse, error)); ok {
		return returnFunc(ctx, guid, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, PostApiV1AmtAlarmOccurrencesGuidJSONRequestBody, ...RequestEditorFn) *PostApiV1AmtAlarmOccurrencesGuidResponse); ok {
		r0 = returnFunc(ctx, guid, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PostApiV1AmtAlarmOccurrencesGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, PostApiV1AmtAlarmOccurrencesGuidJSONRequestBody, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostApiV1AmtAlarmOccurrencesGuidWithResponse'
type MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithResponse_Call struct {
	*mock.Call
}

// PostApiV1AmtAlarmOccurrencesGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) PostApiV1AmtAlarmOccurrencesGuidWithResponse(ctx interface{}, guid interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithResponse_Call{Call: _e.mock.On("PostApiV1AmtAlarmOccurrencesGuidWithResponse",
		append([]interface{}{ctx, guid, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, body PostApiV1AmtAlarmOccurrencesGuidJSONRequestBody, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(PostApiV1AmtAlarmOccurrencesGuidJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithResponse_Call) Return(postApiV1AmtAlarmOccurrencesGuidResponse *PostApiV1AmtAlarmOccurrencesGuidResponse, err error) *MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithResponse_Call {
	_c.Call.Return(postApiV1AmtAlarmOccurrencesGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, body PostApiV1AmtAlarmOccurrencesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtAlarmOccurrencesGuidResponse, error)) *MockClientWithResponsesInterface_PostApiV1AmtAlarmOccurrencesGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostApiV1AmtFeaturesGuidWithBodyWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) PostApiV1AmtFeaturesGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtFeaturesGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, contentType, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid, contentType, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PostApiV1AmtFeaturesGuidWithBodyWithResponse")
	}

	var r0 *PostApiV1AmtFeaturesGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) (*PostApiV1AmtFeaturesGuidResponse, error)); ok {
		return returnFunc(ctx, guid, contentType, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) *PostApiV1AmtFeaturesGuidResponse); ok {
		r0 = returnFunc(ctx, guid, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PostApiV1AmtFeaturesGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostApiV1AmtFeaturesGuidWithBodyWithResponse'
type MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostApiV1AmtFeaturesGuidWithBodyWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - contentType
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) PostApiV1AmtFeaturesGuidWithBodyWithResponse(ctx interface{}, guid interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithBodyWithResponse_Call{Call: _e.mock.On("PostApiV1AmtFeaturesGuidWithBodyWithResponse",
		append([]interface{}{ctx, guid, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithBodyWithResponse_Call) Run(run func(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[4].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithBodyWithResponse_Call) Return(postApiV1AmtFeaturesGuidResponse *PostApiV1AmtFeaturesGuidResponse, err error) *MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithBodyWithResponse_Call {
	_c.Call.Return(postApiV1AmtFeaturesGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithBodyWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtFeaturesGuidResponse, error)) *MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostApiV1AmtFeaturesGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) PostApiV1AmtFeaturesGuidWithResponse(ctx context.Context, guid string, body PostApiV1AmtFeaturesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtFeaturesGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PostApiV1AmtFeaturesGuidWithResponse")
	}

	var r0 *PostApiV1AmtFeaturesGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, PostApiV1AmtFeaturesGuidJSONRequestBody, ...RequestEditorFn) (*PostApiV1AmtFeaturesGuidResponse, error)); ok {
		return returnFunc(ctx, guid, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, PostApiV1AmtFeaturesGuidJSONRequestBody, ...RequestEditorFn) *PostApiV1AmtFeaturesGuidResponse); ok {
		r0 = returnFunc(ctx, guid, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PostApiV1AmtFeaturesGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, PostApiV1AmtFeaturesGuidJSONRequestBody, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostApiV1AmtFeaturesGuidWithResponse'
type MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithResponse_Call struct {
	*mock.Call
}

// PostApiV1AmtFeaturesGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) PostApiV1AmtFeaturesGuidWithResponse(ctx interface{}, guid interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithResponse_Call{Call: _e.mock.On("PostApiV1AmtFeaturesGuidWithResponse",
		append([]interface{}{ctx, guid, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, body PostApiV1AmtFeaturesGuidJSONRequestBody, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(PostApiV1AmtFeaturesGuidJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithResponse_Call) Return(postApiV1AmtFeaturesGuidResponse *PostApiV1AmtFeaturesGuidResponse, err error) *MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithResponse_Call {
	_c.Call.Return(postApiV1AmtFeaturesGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, body PostApiV1AmtFeaturesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtFeaturesGuidResponse, error)) *MockClientWithResponsesInterface_PostApiV1AmtFeaturesGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostApiV1AmtPowerActionGuidWithBodyWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) PostApiV1AmtPowerActionGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtPowerActionGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, contentType, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid, contentType, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PostApiV1AmtPowerActionGuidWithBodyWithResponse")
	}

	var r0 *PostApiV1AmtPowerActionGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) (*PostApiV1AmtPowerActionGuidResponse, error)); ok {
		return returnFunc(ctx, guid, contentType, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) *PostApiV1AmtPowerActionGuidResponse); ok {
		r0 = returnFunc(ctx, guid, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PostApiV1AmtPowerActionGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostApiV1AmtPowerActionGuidWithBodyWithResponse'
type MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostApiV1AmtPowerActionGuidWithBodyWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - contentType
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) PostApiV1AmtPowerActionGuidWithBodyWithResponse(ctx interface{}, guid interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithBodyWithResponse_Call{Call: _e.mock.On("PostApiV1AmtPowerActionGuidWithBodyWithResponse",
		append([]interface{}{ctx, guid, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithBodyWithResponse_Call) Run(run func(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[4].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithBodyWithResponse_Call) Return(postApiV1AmtPowerActionGuidResponse *PostApiV1AmtPowerActionGuidResponse, err error) *MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithBodyWithResponse_Call {
	_c.Call.Return(postApiV1AmtPowerActionGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithBodyWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtPowerActionGuidResponse, error)) *MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostApiV1AmtPowerActionGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) PostApiV1AmtPowerActionGuidWithResponse(ctx context.Context, guid string, body PostApiV1AmtPowerActionGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtPowerActionGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PostApiV1AmtPowerActionGuidWithResponse")
	}

	var r0 *PostApiV1AmtPowerActionGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, PostApiV1AmtPowerActionGuidJSONRequestBody, ...RequestEditorFn) (*PostApiV1AmtPowerActionGuidResponse, error)); ok {
		return returnFunc(ctx, guid, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, PostApiV1AmtPowerActionGuidJSONRequestBody, ...RequestEditorFn) *PostApiV1AmtPowerActionGuidResponse); ok {
		r0 = returnFunc(ctx, guid, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PostApiV1AmtPowerActionGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, PostApiV1AmtPowerActionGuidJSONRequestBody, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostApiV1AmtPowerActionGuidWithResponse'
type MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithResponse_Call struct {
	*mock.Call
}

// PostApiV1AmtPowerActionGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) PostApiV1AmtPowerActionGuidWithResponse(ctx interface{}, guid interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithResponse_Call{Call: _e.mock.On("PostApiV1AmtPowerActionGuidWithResponse",
		append([]interface{}{ctx, guid, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, body PostApiV1AmtPowerActionGuidJSONRequestBody, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(PostApiV1AmtPowerActionGuidJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithResponse_Call) Return(postApiV1AmtPowerActionGuidResponse *PostApiV1AmtPowerActionGuidResponse, err error) *MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithResponse_Call {
	_c.Call.Return(postApiV1AmtPowerActionGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, body PostApiV1AmtPowerActionGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtPowerActionGuidResponse, error)) *MockClientWithResponsesInterface_PostApiV1AmtPowerActionGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtPowerBootoptionsGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, contentType, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid, contentType, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse")
	}

	var r0 *PostApiV1AmtPowerBootoptionsGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) (*PostApiV1AmtPowerBootoptionsGuidResponse, error)); ok {
		return returnFunc(ctx, guid, contentType, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) *PostApiV1AmtPowerBootoptionsGuidResponse); ok {
		r0 = returnFunc(ctx, guid, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PostApiV1AmtPowerBootoptionsGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse'
type MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - contentType
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse(ctx interface{}, guid interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse_Call{Call: _e.mock.On("PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse",
		append([]interface{}{ctx, guid, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse_Call) Run(run func(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[4].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse_Call) Return(postApiV1AmtPowerBootoptionsGuidResponse *PostApiV1AmtPowerBootoptionsGuidResponse, err error) *MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse_Call {
	_c.Call.Return(postApiV1AmtPowerBootoptionsGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtPowerBootoptionsGuidResponse, error)) *MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostApiV1AmtPowerBootoptionsGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) PostApiV1AmtPowerBootoptionsGuidWithResponse(ctx context.Context, guid string, body PostApiV1AmtPowerBootoptionsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtPowerBootoptionsGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PostApiV1AmtPowerBootoptionsGuidWithResponse")
	}

	var r0 *PostApiV1AmtPowerBootoptionsGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, PostApiV1AmtPowerBootoptionsGuidJSONRequestBody, ...RequestEditorFn) (*PostApiV1AmtPowerBootoptionsGuidResponse, error)); ok {
		return returnFunc(ctx, guid, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, PostApiV1AmtPowerBootoptionsGuidJSONRequestBody, ...RequestEditorFn) *PostApiV1AmtPowerBootoptionsGuidResponse); ok {
		r0 = returnFunc(ctx, guid, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PostApiV1AmtPowerBootoptionsGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, PostApiV1AmtPowerBootoptionsGuidJSONRequestBody, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostApiV1AmtPowerBootoptionsGuidWithResponse'
type MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithResponse_Call struct {
	*mock.Call
}

// PostApiV1AmtPowerBootoptionsGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) PostApiV1AmtPowerBootoptionsGuidWithResponse(ctx interface{}, guid interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithResponse_Call{Call: _e.mock.On("PostApiV1AmtPowerBootoptionsGuidWithResponse",
		append([]interface{}{ctx, guid, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, body PostApiV1AmtPowerBootoptionsGuidJSONRequestBody, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(PostApiV1AmtPowerBootoptionsGuidJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithResponse_Call) Return(postApiV1AmtPowerBootoptionsGuidResponse *PostApiV1AmtPowerBootoptionsGuidResponse, err error) *MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithResponse_Call {
	_c.Call.Return(postApiV1AmtPowerBootoptionsGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, body PostApiV1AmtPowerBootoptionsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtPowerBootoptionsGuidResponse, error)) *MockClientWithResponsesInterface_PostApiV1AmtPowerBootoptionsGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtUserConsentCodeGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, contentType, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid, contentType, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse")
	}

	var r0 *PostApiV1AmtUserConsentCodeGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) (*PostApiV1AmtUserConsentCodeGuidResponse, error)); ok {
		return returnFunc(ctx, guid, contentType, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) *PostApiV1AmtUserConsentCodeGuidResponse); ok {
		r0 = returnFunc(ctx, guid, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PostApiV1AmtUserConsentCodeGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse'
type MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - contentType
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse(ctx interface{}, guid interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse_Call{Call: _e.mock.On("PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse",
		append([]interface{}{ctx, guid, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse_Call) Run(run func(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[4].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse_Call) Return(postApiV1AmtUserConsentCodeGuidResponse *PostApiV1AmtUserConsentCodeGuidResponse, err error) *MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse_Call {
	_c.Call.Return(postApiV1AmtUserConsentCodeGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AmtUserConsentCodeGuidResponse, error)) *MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostApiV1AmtUserConsentCodeGuidWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) PostApiV1AmtUserConsentCodeGuidWithResponse(ctx context.Context, guid string, body PostApiV1AmtUserConsentCodeGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtUserConsentCodeGuidResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, guid, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, guid, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PostApiV1AmtUserConsentCodeGuidWithResponse")
	}

	var r0 *PostApiV1AmtUserConsentCodeGuidResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, PostApiV1AmtUserConsentCodeGuidJSONRequestBody, ...RequestEditorFn) (*PostApiV1AmtUserConsentCodeGuidResponse, error)); ok {
		return returnFunc(ctx, guid, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, PostApiV1AmtUserConsentCodeGuidJSONRequestBody, ...RequestEditorFn) *PostApiV1AmtUserConsentCodeGuidResponse); ok {
		r0 = returnFunc(ctx, guid, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PostApiV1AmtUserConsentCodeGuidResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, PostApiV1AmtUserConsentCodeGuidJSONRequestBody, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, guid, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostApiV1AmtUserConsentCodeGuidWithResponse'
type MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithResponse_Call struct {
	*mock.Call
}

// PostApiV1AmtUserConsentCodeGuidWithResponse is a helper method to define mock.On call
//   - ctx
//   - guid
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) PostApiV1AmtUserConsentCodeGuidWithResponse(ctx interface{}, guid interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithResponse_Call {
	return &MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithResponse_Call{Call: _e.mock.On("PostApiV1AmtUserConsentCodeGuidWithResponse",
		append([]interface{}{ctx, guid, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithResponse_Call) Run(run func(ctx context.Context, guid string, body PostApiV1AmtUserConsentCodeGuidJSONRequestBody, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(PostApiV1AmtUserConsentCodeGuidJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithResponse_Call) Return(postApiV1AmtUserConsentCodeGuidResponse *PostApiV1AmtUserConsentCodeGuidResponse, err error) *MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithResponse_Call {
	_c.Call.Return(postApiV1AmtUserConsentCodeGuidResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithResponse_Call) RunAndReturn(run func(ctx context.Context, guid string, body PostApiV1AmtUserConsentCodeGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AmtUserConsentCodeGuidResponse, error)) *MockClientWithResponsesInterface_PostApiV1AmtUserConsentCodeGuidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostApiV1AuthorizeWithBodyWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) PostApiV1AuthorizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AuthorizeResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, contentType, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, contentType, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PostApiV1AuthorizeWithBodyWithResponse")
	}

	var r0 *PostApiV1AuthorizeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) (*PostApiV1AuthorizeResponse, error)); ok {
		return returnFunc(ctx, contentType, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) *PostApiV1AuthorizeResponse); ok {
		r0 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PostApiV1AuthorizeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_PostApiV1AuthorizeWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostApiV1AuthorizeWithBodyWithResponse'
type MockClientWithResponsesInterface_PostApiV1AuthorizeWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostApiV1AuthorizeWithBodyWithResponse is a helper method to define mock.On call
//   - ctx
//   - contentType
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) PostApiV1AuthorizeWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PostApiV1AuthorizeWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_PostApiV1AuthorizeWithBodyWithResponse_Call{Call: _e.mock.On("PostApiV1AuthorizeWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PostApiV1AuthorizeWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_PostApiV1AuthorizeWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AuthorizeWithBodyWithResponse_Call) Return(postApiV1AuthorizeResponse *PostApiV1AuthorizeResponse, err error) *MockClientWithResponsesInterface_PostApiV1AuthorizeWithBodyWithResponse_Call {
	_c.Call.Return(postApiV1AuthorizeResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AuthorizeWithBodyWithResponse_Call) RunAndReturn(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AuthorizeResponse, error)) *MockClientWithResponsesInterface_PostApiV1AuthorizeWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostApiV1AuthorizeWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) PostApiV1AuthorizeWithResponse(ctx context.Context, body PostApiV1AuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AuthorizeResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PostApiV1AuthorizeWithResponse")
	}

	var r0 *PostApiV1AuthorizeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostApiV1AuthorizeJSONRequestBody, ...RequestEditorFn) (*PostApiV1AuthorizeResponse, error)); ok {
		return returnFunc(ctx, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostApiV1AuthorizeJSONRequestBody, ...RequestEditorFn) *PostApiV1AuthorizeResponse); ok {
		r0 = returnFunc(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PostApiV1AuthorizeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, PostApiV1AuthorizeJSONRequestBody, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_PostApiV1AuthorizeWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostApiV1AuthorizeWithResponse'
type MockClientWithResponsesInterface_PostApiV1AuthorizeWithResponse_Call struct {
	*mock.Call
}

// PostApiV1AuthorizeWithResponse is a helper method to define mock.On call
//   - ctx
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) PostApiV1AuthorizeWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PostApiV1AuthorizeWithResponse_Call {
	return &MockClientWithResponsesInterface_PostApiV1AuthorizeWithResponse_Call{Call: _e.mock.On("PostApiV1AuthorizeWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PostApiV1AuthorizeWithResponse_Call) Run(run func(ctx context.Context, body PostApiV1AuthorizeJSONRequestBody, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_PostApiV1AuthorizeWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(PostApiV1AuthorizeJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AuthorizeWithResponse_Call) Return(postApiV1AuthorizeResponse *PostApiV1AuthorizeResponse, err error) *MockClientWithResponsesInterface_PostApiV1AuthorizeWithResponse_Call {
	_c.Call.Return(postApiV1AuthorizeResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1AuthorizeWithResponse_Call) RunAndReturn(run func(ctx context.Context, body PostApiV1AuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AuthorizeResponse, error)) *MockClientWithResponsesInterface_PostApiV1AuthorizeWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostApiV1DevicesWithBodyWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) PostApiV1DevicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DevicesResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, contentType, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, contentType, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PostApiV1DevicesWithBodyWithResponse")
	}

	var r0 *PostApiV1DevicesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) (*PostApiV1DevicesResponse, error)); ok {
		return returnFunc(ctx, contentType, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) *PostApiV1DevicesResponse); ok {
		r0 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PostApiV1DevicesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_PostApiV1DevicesWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostApiV1DevicesWithBodyWithResponse'
type MockClientWithResponsesInterface_PostApiV1DevicesWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostApiV1DevicesWithBodyWithResponse is a helper method to define mock.On call
//   - ctx
//   - contentType
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) PostApiV1DevicesWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PostApiV1DevicesWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_PostApiV1DevicesWithBodyWithResponse_Call{Call: _e.mock.On("PostApiV1DevicesWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PostApiV1DevicesWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_PostApiV1DevicesWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1DevicesWithBodyWithResponse_Call) Return(postApiV1DevicesResponse *PostApiV1DevicesResponse, err error) *MockClientWithResponsesInterface_PostApiV1DevicesWithBodyWithResponse_Call {
	_c.Call.Return(postApiV1DevicesResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1DevicesWithBodyWithResponse_Call) RunAndReturn(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DevicesResponse, error)) *MockClientWithResponsesInterface_PostApiV1DevicesWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostApiV1DevicesWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) PostApiV1DevicesWithResponse(ctx context.Context, body PostApiV1DevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DevicesResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PostApiV1DevicesWithResponse")
	}

	var r0 *PostApiV1DevicesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostApiV1DevicesJSONRequestBody, ...RequestEditorFn) (*PostApiV1DevicesResponse, error)); ok {
		return returnFunc(ctx, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostApiV1DevicesJSONRequestBody, ...RequestEditorFn) *PostApiV1DevicesResponse); ok {
		r0 = returnFunc(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PostApiV1DevicesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, PostApiV1DevicesJSONRequestBody, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_PostApiV1DevicesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostApiV1DevicesWithResponse'
type MockClientWithResponsesInterface_PostApiV1DevicesWithResponse_Call struct {
	*mock.Call
}

// PostApiV1DevicesWithResponse is a helper method to define mock.On call
//   - ctx
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) PostApiV1DevicesWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PostApiV1DevicesWithResponse_Call {
	return &MockClientWithResponsesInterface_PostApiV1DevicesWithResponse_Call{Call: _e.mock.On("PostApiV1DevicesWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PostApiV1DevicesWithResponse_Call) Run(run func(ctx context.Context, body PostApiV1DevicesJSONRequestBody, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_PostApiV1DevicesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(PostApiV1DevicesJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1DevicesWithResponse_Call) Return(postApiV1DevicesResponse *PostApiV1DevicesResponse, err error) *MockClientWithResponsesInterface_PostApiV1DevicesWithResponse_Call {
	_c.Call.Return(postApiV1DevicesResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_PostApiV1DevicesWithResponse_Call) RunAndReturn(run func(ctx context.Context, body PostApiV1DevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DevicesResponse, error)) *MockClientWithResponsesInterface_PostApiV1DevicesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}
