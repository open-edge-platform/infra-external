// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dm-manager.proto

package dm_manager

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AMTStatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AMTStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AMTStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AMTStatusRequestMultiError, or nil if none found.
func (m *AMTStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AMTStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HostId

	// no validation rules for Status

	// no validation rules for Version

	if len(errors) > 0 {
		return AMTStatusRequestMultiError(errors)
	}

	return nil
}

// AMTStatusRequestMultiError is an error wrapping multiple validation errors
// returned by AMTStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type AMTStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AMTStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AMTStatusRequestMultiError) AllErrors() []error { return m }

// AMTStatusRequestValidationError is the validation error returned by
// AMTStatusRequest.Validate if the designated constraints aren't met.
type AMTStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AMTStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AMTStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AMTStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AMTStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AMTStatusRequestValidationError) ErrorName() string { return "AMTStatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e AMTStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAMTStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AMTStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AMTStatusRequestValidationError{}

// Validate checks the field values on AMTStatusResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AMTStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AMTStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AMTStatusResponseMultiError, or nil if none found.
func (m *AMTStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AMTStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AMTStatusResponseMultiError(errors)
	}

	return nil
}

// AMTStatusResponseMultiError is an error wrapping multiple validation errors
// returned by AMTStatusResponse.ValidateAll() if the designated constraints
// aren't met.
type AMTStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AMTStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AMTStatusResponseMultiError) AllErrors() []error { return m }

// AMTStatusResponseValidationError is the validation error returned by
// AMTStatusResponse.Validate if the designated constraints aren't met.
type AMTStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AMTStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AMTStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AMTStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AMTStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AMTStatusResponseValidationError) ErrorName() string {
	return "AMTStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AMTStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAMTStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AMTStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AMTStatusResponseValidationError{}

// Validate checks the field values on ActivationRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ActivationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivationRequestMultiError, or nil if none found.
func (m *ActivationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HostId

	if len(errors) > 0 {
		return ActivationRequestMultiError(errors)
	}

	return nil
}

// ActivationRequestMultiError is an error wrapping multiple validation errors
// returned by ActivationRequest.ValidateAll() if the designated constraints
// aren't met.
type ActivationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivationRequestMultiError) AllErrors() []error { return m }

// ActivationRequestValidationError is the validation error returned by
// ActivationRequest.Validate if the designated constraints aren't met.
type ActivationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivationRequestValidationError) ErrorName() string {
	return "ActivationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActivationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivationRequestValidationError{}

// Validate checks the field values on ActivationDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActivationDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivationDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivationDetailsResponseMultiError, or nil if none found.
func (m *ActivationDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivationDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HostId

	// no validation rules for Operation

	// no validation rules for ProfileName

	// no validation rules for ActionPassword

	if len(errors) > 0 {
		return ActivationDetailsResponseMultiError(errors)
	}

	return nil
}

// ActivationDetailsResponseMultiError is an error wrapping multiple validation
// errors returned by ActivationDetailsResponse.ValidateAll() if the
// designated constraints aren't met.
type ActivationDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivationDetailsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivationDetailsResponseMultiError) AllErrors() []error { return m }

// ActivationDetailsResponseValidationError is the validation error returned by
// ActivationDetailsResponse.Validate if the designated constraints aren't met.
type ActivationDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivationDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivationDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivationDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivationDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivationDetailsResponseValidationError) ErrorName() string {
	return "ActivationDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ActivationDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivationDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivationDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivationDetailsResponseValidationError{}

// Validate checks the field values on ActivationResultRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActivationResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivationResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivationResultRequestMultiError, or nil if none found.
func (m *ActivationResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivationResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HostId

	// no validation rules for ActivationStatus

	// no validation rules for Message

	if len(errors) > 0 {
		return ActivationResultRequestMultiError(errors)
	}

	return nil
}

// ActivationResultRequestMultiError is an error wrapping multiple validation
// errors returned by ActivationResultRequest.ValidateAll() if the designated
// constraints aren't met.
type ActivationResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivationResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivationResultRequestMultiError) AllErrors() []error { return m }

// ActivationResultRequestValidationError is the validation error returned by
// ActivationResultRequest.Validate if the designated constraints aren't met.
type ActivationResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivationResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivationResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivationResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivationResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivationResultRequestValidationError) ErrorName() string {
	return "ActivationResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActivationResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivationResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivationResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivationResultRequestValidationError{}

// Validate checks the field values on ActivationResultResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActivationResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivationResultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivationResultResponseMultiError, or nil if none found.
func (m *ActivationResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivationResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ActivationResultResponseMultiError(errors)
	}

	return nil
}

// ActivationResultResponseMultiError is an error wrapping multiple validation
// errors returned by ActivationResultResponse.ValidateAll() if the designated
// constraints aren't met.
type ActivationResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivationResultResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivationResultResponseMultiError) AllErrors() []error { return m }

// ActivationResultResponseValidationError is the validation error returned by
// ActivationResultResponse.Validate if the designated constraints aren't met.
type ActivationResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivationResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivationResultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivationResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivationResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivationResultResponseValidationError) ErrorName() string {
	return "ActivationResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ActivationResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivationResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivationResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivationResultResponseValidationError{}
