// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: dm-manager.proto

package dm_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeviceManagement_ReportAMTStatus_FullMethodName       = "/device_management.DeviceManagement/ReportAMTStatus"
	DeviceManagement_SendActivationRequest_FullMethodName = "/device_management.DeviceManagement/SendActivationRequest"
)

// DeviceManagementClient is the client API for DeviceManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for Device Management.
type DeviceManagementClient interface {
	// PMA reports AMT status to dm manager.
	ReportAMTStatus(ctx context.Context, in *AMTStatusRequest, opts ...grpc.CallOption) (*AMTStatusResponse, error)
	// DM manager sends activation request to PMA.
	SendActivationRequest(ctx context.Context, in *ActivationRequest, opts ...grpc.CallOption) (*ActivationResponse, error)
}

type deviceManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceManagementClient(cc grpc.ClientConnInterface) DeviceManagementClient {
	return &deviceManagementClient{cc}
}

func (c *deviceManagementClient) ReportAMTStatus(ctx context.Context, in *AMTStatusRequest, opts ...grpc.CallOption) (*AMTStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AMTStatusResponse)
	err := c.cc.Invoke(ctx, DeviceManagement_ReportAMTStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) SendActivationRequest(ctx context.Context, in *ActivationRequest, opts ...grpc.CallOption) (*ActivationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivationResponse)
	err := c.cc.Invoke(ctx, DeviceManagement_SendActivationRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceManagementServer is the server API for DeviceManagement service.
// All implementations must embed UnimplementedDeviceManagementServer
// for forward compatibility.
//
// Service for Device Management.
type DeviceManagementServer interface {
	// PMA reports AMT status to dm manager.
	ReportAMTStatus(context.Context, *AMTStatusRequest) (*AMTStatusResponse, error)
	// DM manager sends activation request to PMA.
	SendActivationRequest(context.Context, *ActivationRequest) (*ActivationResponse, error)
	mustEmbedUnimplementedDeviceManagementServer()
}

// UnimplementedDeviceManagementServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeviceManagementServer struct{}

func (UnimplementedDeviceManagementServer) ReportAMTStatus(context.Context, *AMTStatusRequest) (*AMTStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportAMTStatus not implemented")
}
func (UnimplementedDeviceManagementServer) SendActivationRequest(context.Context, *ActivationRequest) (*ActivationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendActivationRequest not implemented")
}
func (UnimplementedDeviceManagementServer) mustEmbedUnimplementedDeviceManagementServer() {}
func (UnimplementedDeviceManagementServer) testEmbeddedByValue()                          {}

// UnsafeDeviceManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceManagementServer will
// result in compilation errors.
type UnsafeDeviceManagementServer interface {
	mustEmbedUnimplementedDeviceManagementServer()
}

func RegisterDeviceManagementServer(s grpc.ServiceRegistrar, srv DeviceManagementServer) {
	// If the following call pancis, it indicates UnimplementedDeviceManagementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeviceManagement_ServiceDesc, srv)
}

func _DeviceManagement_ReportAMTStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AMTStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).ReportAMTStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManagement_ReportAMTStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).ReportAMTStatus(ctx, req.(*AMTStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_SendActivationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).SendActivationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManagement_SendActivationRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).SendActivationRequest(ctx, req.(*ActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceManagement_ServiceDesc is the grpc.ServiceDesc for DeviceManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device_management.DeviceManagement",
	HandlerType: (*DeviceManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportAMTStatus",
			Handler:    _DeviceManagement_ReportAMTStatus_Handler,
		},
		{
			MethodName: "SendActivationRequest",
			Handler:    _DeviceManagement_SendActivationRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dm-manager.proto",
}
