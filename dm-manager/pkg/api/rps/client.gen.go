// Package rps provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package rps

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for IEEE8021xConfigPATCHAuthenticationProtocol.
const (
	IEEE8021xConfigPATCHAuthenticationProtocolN0  IEEE8021xConfigPATCHAuthenticationProtocol = 0
	IEEE8021xConfigPATCHAuthenticationProtocolN10 IEEE8021xConfigPATCHAuthenticationProtocol = 10
	IEEE8021xConfigPATCHAuthenticationProtocolN3  IEEE8021xConfigPATCHAuthenticationProtocol = 3
	IEEE8021xConfigPATCHAuthenticationProtocolN5  IEEE8021xConfigPATCHAuthenticationProtocol = 5
)

// Defines values for IEEE8021xConfigPOSTAuthenticationProtocol.
const (
	IEEE8021xConfigPOSTAuthenticationProtocolN0  IEEE8021xConfigPOSTAuthenticationProtocol = 0
	IEEE8021xConfigPOSTAuthenticationProtocolN10 IEEE8021xConfigPOSTAuthenticationProtocol = 10
	IEEE8021xConfigPOSTAuthenticationProtocolN2  IEEE8021xConfigPOSTAuthenticationProtocol = 2
	IEEE8021xConfigPOSTAuthenticationProtocolN3  IEEE8021xConfigPOSTAuthenticationProtocol = 3
	IEEE8021xConfigPOSTAuthenticationProtocolN5  IEEE8021xConfigPOSTAuthenticationProtocol = 5
)

// Defines values for IEEE8021xConfigResponseAuthenticationProtocol.
const (
	IEEE8021xConfigResponseAuthenticationProtocolN0  IEEE8021xConfigResponseAuthenticationProtocol = 0
	IEEE8021xConfigResponseAuthenticationProtocolN10 IEEE8021xConfigResponseAuthenticationProtocol = 10
	IEEE8021xConfigResponseAuthenticationProtocolN2  IEEE8021xConfigResponseAuthenticationProtocol = 2
	IEEE8021xConfigResponseAuthenticationProtocolN3  IEEE8021xConfigResponseAuthenticationProtocol = 3
	IEEE8021xConfigResponseAuthenticationProtocolN5  IEEE8021xConfigResponseAuthenticationProtocol = 5
)

// Defines values for ProfilePATCHTlsMode.
const (
	ProfilePATCHTlsModeN1 ProfilePATCHTlsMode = 1
	ProfilePATCHTlsModeN2 ProfilePATCHTlsMode = 2
)

// Defines values for ProfilePATCHUserConsent.
const (
	ProfilePATCHUserConsentAll  ProfilePATCHUserConsent = "All"
	ProfilePATCHUserConsentKVM  ProfilePATCHUserConsent = "KVM"
	ProfilePATCHUserConsentNone ProfilePATCHUserConsent = "None"
)

// Defines values for ProfilePOSTTlsMode.
const (
	ProfilePOSTTlsModeN1 ProfilePOSTTlsMode = 1
	ProfilePOSTTlsModeN2 ProfilePOSTTlsMode = 2
)

// Defines values for ProfilePOSTUserConsent.
const (
	ProfilePOSTUserConsentAll  ProfilePOSTUserConsent = "All"
	ProfilePOSTUserConsentKVM  ProfilePOSTUserConsent = "KVM"
	ProfilePOSTUserConsentNone ProfilePOSTUserConsent = "None"
)

// Defines values for WirelessConfigPATCHLinkPolicy.
const (
	WirelessConfigPATCHLinkPolicyN1   WirelessConfigPATCHLinkPolicy = 1
	WirelessConfigPATCHLinkPolicyN14  WirelessConfigPATCHLinkPolicy = 14
	WirelessConfigPATCHLinkPolicyN16  WirelessConfigPATCHLinkPolicy = 16
	WirelessConfigPATCHLinkPolicyN224 WirelessConfigPATCHLinkPolicy = 224
)

// Defines values for WirelessConfigPOSTLinkPolicy.
const (
	N1   WirelessConfigPOSTLinkPolicy = 1
	N14  WirelessConfigPOSTLinkPolicy = 14
	N16  WirelessConfigPOSTLinkPolicy = 16
	N224 WirelessConfigPOSTLinkPolicy = 224
)

// APIResponse defines model for APIResponse.
type APIResponse struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// CIRAConfigPATCH defines model for CIRAConfigPATCH.
type CIRAConfigPATCH struct {
	AuthMethod          int32   `json:"authMethod"`
	CommonName          string  `json:"commonName"`
	ConfigName          string  `json:"configName"`
	MpsPort             int32   `json:"mpsPort"`
	MpsRootCertificate  []byte  `json:"mpsRootCertificate"`
	MpsServerAddress    string  `json:"mpsServerAddress"`
	Password            *string `json:"password,omitempty"`
	ProxyDetails        string  `json:"proxyDetails"`
	RegeneratePassword  bool    `json:"regeneratePassword"`
	ServerAddressFormat int32   `json:"serverAddressFormat"`
	Username            string  `json:"username"`
	Version             string  `json:"version"`
}

// CIRAConfigPOST defines model for CIRAConfigPOST.
type CIRAConfigPOST struct {
	AuthMethod          int32   `json:"authMethod"`
	CommonName          string  `json:"commonName"`
	ConfigName          string  `json:"configName"`
	MpsPort             int32   `json:"mpsPort"`
	MpsRootCertificate  []byte  `json:"mpsRootCertificate"`
	MpsServerAddress    string  `json:"mpsServerAddress"`
	Password            *string `json:"password,omitempty"`
	ProxyDetails        string  `json:"proxyDetails"`
	ServerAddressFormat int32   `json:"serverAddressFormat"`
	Username            string  `json:"username"`
}

// CIRAConfigResponse defines model for CIRAConfigResponse.
type CIRAConfigResponse struct {
	AuthMethod          int32   `json:"authMethod"`
	CommonName          string  `json:"commonName"`
	ConfigName          string  `json:"configName"`
	MpsPort             int32   `json:"mpsPort"`
	MpsRootCertificate  []byte  `json:"mpsRootCertificate"`
	MpsServerAddress    string  `json:"mpsServerAddress"`
	ProxyDetails        string  `json:"proxyDetails"`
	ServerAddressFormat int32   `json:"serverAddressFormat"`
	TenantId            *string `json:"tenantId,omitempty"`
	Username            string  `json:"username"`
	Version             *string `json:"version,omitempty"`
}

// CountCIRAResponse defines model for CountCIRAResponse.
type CountCIRAResponse struct {
	Data       *[]CIRAConfigResponse `json:"data,omitempty"`
	TotalCount *int                  `json:"totalCount,omitempty"`
}

// CountDomainResponse defines model for CountDomainResponse.
type CountDomainResponse struct {
	Data       *[]DomainResponse `json:"data,omitempty"`
	TotalCount *int              `json:"totalCount,omitempty"`
}

// CountIEEE8021xResponse defines model for CountIEEE8021xResponse.
type CountIEEE8021xResponse struct {
	Data       *[]IEEE8021xConfigResponse `json:"data,omitempty"`
	TotalCount *int                       `json:"totalCount,omitempty"`
}

// CountProfileResponse defines model for CountProfileResponse.
type CountProfileResponse struct {
	Data       *[]ProfileResponse `json:"data,omitempty"`
	TotalCount *int               `json:"totalCount,omitempty"`
}

// CountWirelessResponse defines model for CountWirelessResponse.
type CountWirelessResponse struct {
	Data       *[]WirelessConfigResponse `json:"data,omitempty"`
	TotalCount *int                      `json:"totalCount,omitempty"`
}

// DomainPATCH defines model for DomainPATCH.
type DomainPATCH struct {
	DomainSuffix                  string `json:"domainSuffix"`
	ProfileName                   string `json:"profileName"`
	ProvisioningCert              []byte `json:"provisioningCert"`
	ProvisioningCertPassword      string `json:"provisioningCertPassword"`
	ProvisioningCertStorageFormat string `json:"provisioningCertStorageFormat"`
	Version                       string `json:"version"`
}

// DomainPOST defines model for DomainPOST.
type DomainPOST struct {
	DomainSuffix                  string `json:"domainSuffix"`
	ProfileName                   string `json:"profileName"`
	ProvisioningCert              []byte `json:"provisioningCert"`
	ProvisioningCertPassword      string `json:"provisioningCertPassword"`
	ProvisioningCertStorageFormat string `json:"provisioningCertStorageFormat"`
}

// DomainResponse defines model for DomainResponse.
type DomainResponse struct {
	DomainSuffix                  string    `json:"domainSuffix"`
	ExpirationDate                time.Time `json:"expirationDate"`
	ProfileName                   string    `json:"profileName"`
	ProvisioningCertStorageFormat string    `json:"provisioningCertStorageFormat"`
	TenantId                      string    `json:"tenantId"`
	Version                       string    `json:"version"`
}

// HealthcheckResponse defines model for HealthcheckResponse.
type HealthcheckResponse struct {
	Db *struct {
		Name   *string `json:"name,omitempty"`
		Status *string `json:"status,omitempty"`
	} `json:"db,omitempty"`
	SecretStore *struct {
		Name   *string `json:"name,omitempty"`
		Status *struct {
			ClusterId                  *string `json:"cluster_id,omitempty"`
			ClusterName                *string `json:"cluster_name,omitempty"`
			Initialized                *bool   `json:"initialized,omitempty"`
			PerformanceStandby         *bool   `json:"performance_standby,omitempty"`
			ReplicationDrMode          *string `json:"replication_dr_mode,omitempty"`
			ReplicationPerformanceMode *string `json:"replication_performance_mode,omitempty"`
			Sealed                     *bool   `json:"sealed,omitempty"`
			ServerTimeUtc              *int    `json:"server_time_utc,omitempty"`
			Standby                    *bool   `json:"standby,omitempty"`
			Version                    *string `json:"version,omitempty"`
		} `json:"status,omitempty"`
	} `json:"secretStore,omitempty"`
}

// IEEE8021xConfigPATCH defines model for IEEE8021xConfigPATCH.
type IEEE8021xConfigPATCH struct {
	AuthenticationProtocol []IEEE8021xConfigPATCHAuthenticationProtocol `json:"authenticationProtocol"`
	ProfileName            string                                       `json:"profileName"`
	PxeTimeout             *int                                         `json:"pxeTimeout,omitempty"`
	TenantId               *string                                      `json:"tenantId,omitempty"`
	Version                string                                       `json:"version"`
	WiredInterface         bool                                         `json:"wiredInterface"`
}

// IEEE8021xConfigPATCHAuthenticationProtocol defines model for IEEE8021xConfigPATCH.AuthenticationProtocol.
type IEEE8021xConfigPATCHAuthenticationProtocol int

// IEEE8021xConfigPOST defines model for IEEE8021xConfigPOST.
type IEEE8021xConfigPOST struct {
	AuthenticationProtocol []IEEE8021xConfigPOSTAuthenticationProtocol `json:"authenticationProtocol"`
	ProfileName            string                                      `json:"profileName"`
	PxeTimeout             *int                                        `json:"pxeTimeout,omitempty"`
	TenantId               *string                                     `json:"tenantId,omitempty"`
	Version                *string                                     `json:"version,omitempty"`
	WiredInterface         bool                                        `json:"wiredInterface"`
}

// IEEE8021xConfigPOSTAuthenticationProtocol defines model for IEEE8021xConfigPOST.AuthenticationProtocol.
type IEEE8021xConfigPOSTAuthenticationProtocol int

// IEEE8021xConfigResponse defines model for IEEE8021xConfigResponse.
type IEEE8021xConfigResponse struct {
	AuthenticationProtocol []IEEE8021xConfigResponseAuthenticationProtocol `json:"authenticationProtocol"`
	ProfileName            string                                          `json:"profileName"`
	PxeTimeout             int                                             `json:"pxeTimeout"`
	TenantId               string                                          `json:"tenantId"`
	Version                string                                          `json:"version"`
	WiredInterface         bool                                            `json:"wiredInterface"`
}

// IEEE8021xConfigResponseAuthenticationProtocol defines model for IEEE8021xConfigResponse.AuthenticationProtocol.
type IEEE8021xConfigResponseAuthenticationProtocol int

// ProfilePATCH defines model for ProfilePATCH.
type ProfilePATCH struct {
	Activation                 string   `json:"activation"`
	AmtPassword                *string  `json:"amtPassword,omitempty"`
	CiraConfigName             string   `json:"ciraConfigName"`
	DhcpEnabled                bool     `json:"dhcpEnabled"`
	GenerateRandomMEBxPassword bool     `json:"generateRandomMEBxPassword"`
	GenerateRandomPassword     bool     `json:"generateRandomPassword"`
	IderEnabled                bool     `json:"iderEnabled"`
	Ieee8021xProfile           *string  `json:"ieee8021xProfile,omitempty"`
	IpSyncEnabled              *bool    `json:"ipSyncEnabled,omitempty"`
	KvmEnabled                 bool     `json:"kvmEnabled"`
	LocalWifiSyncEnabled       *bool    `json:"localWifiSyncEnabled,omitempty"`
	MebxPassword               *string  `json:"mebxPassword,omitempty"`
	ProfileName                string   `json:"profileName"`
	SolEnabled                 bool     `json:"solEnabled"`
	Tags                       []string `json:"tags"`

	// TlsMode Server Authentication Only (1), Server and Non-TLS Authentication (2)
	TlsMode             ProfilePATCHTlsMode `json:"tlsMode"`
	TlsSigningAuthority *string             `json:"tlsSigningAuthority,omitempty"`

	// UserConsent User Consent must be one of None, All, KVM. It should be 'All' in client control mode
	UserConsent ProfilePATCHUserConsent  `json:"userConsent"`
	Version     string                   `json:"version"`
	WifiConfigs []map[string]interface{} `json:"wifiConfigs"`
}

// ProfilePATCHTlsMode Server Authentication Only (1), Server and Non-TLS Authentication (2)
type ProfilePATCHTlsMode float32

// ProfilePATCHUserConsent User Consent must be one of None, All, KVM. It should be 'All' in client control mode
type ProfilePATCHUserConsent string

// ProfilePOST defines model for ProfilePOST.
type ProfilePOST struct {
	Activation                 string   `json:"activation"`
	AmtPassword                *string  `json:"amtPassword,omitempty"`
	CiraConfigName             *string  `json:"ciraConfigName,omitempty"`
	DhcpEnabled                bool     `json:"dhcpEnabled"`
	GenerateRandomMEBxPassword bool     `json:"generateRandomMEBxPassword"`
	GenerateRandomPassword     bool     `json:"generateRandomPassword"`
	IderEnabled                *bool    `json:"iderEnabled,omitempty"`
	Ieee8021xProfile           *string  `json:"ieee8021xProfile,omitempty"`
	IpSyncEnabled              *bool    `json:"ipSyncEnabled,omitempty"`
	KvmEnabled                 *bool    `json:"kvmEnabled,omitempty"`
	LocalWifiSyncEnabled       *bool    `json:"localWifiSyncEnabled,omitempty"`
	MebxPassword               *string  `json:"mebxPassword,omitempty"`
	NetworkConfigName          *string  `json:"networkConfigName,omitempty"`
	ProfileName                string   `json:"profileName"`
	SolEnabled                 *bool    `json:"solEnabled,omitempty"`
	Tags                       []string `json:"tags"`

	// TlsMode Server Authentication Only (1), Server and Non-TLS Authentication (2)
	TlsMode             *ProfilePOSTTlsMode `json:"tlsMode,omitempty"`
	TlsSigningAuthority string              `json:"tlsSigningAuthority"`

	// UserConsent User Consent must be one of None, All, KVM. It should be 'All' in client control mode
	UserConsent *ProfilePOSTUserConsent   `json:"userConsent,omitempty"`
	WifiConfigs *[]map[string]interface{} `json:"wifiConfigs,omitempty"`
}

// ProfilePOSTTlsMode Server Authentication Only (1), Server and Non-TLS Authentication (2)
type ProfilePOSTTlsMode float32

// ProfilePOSTUserConsent User Consent must be one of None, All, KVM. It should be 'All' in client control mode
type ProfilePOSTUserConsent string

// ProfileResponse defines model for ProfileResponse.
type ProfileResponse struct {
	Activation                 string   `json:"activation"`
	CiraConfigName             string   `json:"ciraConfigName"`
	DhcpEnabled                bool     `json:"dhcpEnabled"`
	GenerateRandomMEBxPassword bool     `json:"generateRandomMEBxPassword"`
	GenerateRandomPassword     bool     `json:"generateRandomPassword"`
	IderEnabled                bool     `json:"iderEnabled"`
	Ieee8021xProfile           string   `json:"ieee8021xProfile"`
	IpSyncEnabled              *bool    `json:"ipSyncEnabled,omitempty"`
	KvmEnabled                 bool     `json:"kvmEnabled"`
	LocalWifiSyncEnabled       *bool    `json:"localWifiSyncEnabled,omitempty"`
	ProfileName                string   `json:"profileName"`
	SolEnabled                 bool     `json:"solEnabled"`
	Tags                       []string `json:"tags"`
	TenantId                   *string  `json:"tenantId,omitempty"`

	// TlsMode Server Authentication Only(1), Server and Non-TLS Authentication (2), Mutual TLS only (3), Mutual and Non-TLS authentication (4)
	TlsMode             float32 `json:"tlsMode"`
	TlsSigningAuthority string  `json:"tlsSigningAuthority"`

	// UserConsent User Consenst must be one of None, All, KVM. It must be 'All' in client control mode
	UserConsent string                   `json:"userConsent"`
	Version     *string                  `json:"version,omitempty"`
	WifiConfigs []map[string]interface{} `json:"wifiConfigs"`
}

// VersionResponse defines model for VersionResponse.
type VersionResponse struct {
	ProtocolVersion string `json:"protocolVersion"`
	ServiceVersion  string `json:"serviceVersion"`
}

// WirelessConfigPATCH defines model for WirelessConfigPATCH.
type WirelessConfigPATCH struct {
	AuthenticationMethod int                             `json:"authenticationMethod"`
	EncryptionMethod     int                             `json:"encryptionMethod"`
	Ieee8021xProfile     *string                         `json:"ieee8021xProfile,omitempty"`
	LinkPolicy           []WirelessConfigPATCHLinkPolicy `json:"linkPolicy"`
	ProfileName          string                          `json:"profileName"`
	PskPassphrase        *string                         `json:"pskPassphrase,omitempty"`
	Ssid                 string                          `json:"ssid"`
	Version              string                          `json:"version"`
}

// WirelessConfigPATCHLinkPolicy defines model for WirelessConfigPATCH.LinkPolicy.
type WirelessConfigPATCHLinkPolicy int

// WirelessConfigPOST defines model for WirelessConfigPOST.
type WirelessConfigPOST struct {
	AuthenticationMethod int                            `json:"authenticationMethod"`
	EncryptionMethod     int                            `json:"encryptionMethod"`
	Ieee8021xProfile     *string                        `json:"ieee8021xProfile,omitempty"`
	LinkPolicy           []WirelessConfigPOSTLinkPolicy `json:"linkPolicy"`
	ProfileName          string                         `json:"profileName"`
	PskPassphrase        *string                        `json:"pskPassphrase,omitempty"`
	Ssid                 string                         `json:"ssid"`
}

// WirelessConfigPOSTLinkPolicy defines model for WirelessConfigPOST.LinkPolicy.
type WirelessConfigPOSTLinkPolicy int

// WirelessConfigResponse defines model for WirelessConfigResponse.
type WirelessConfigResponse struct {
	AuthenticationMethod int     `json:"authenticationMethod"`
	EncryptionMethod     int     `json:"encryptionMethod"`
	Ieee8021xProfile     *string `json:"ieee8021xProfile,omitempty"`
	LinkPolicy           []int   `json:"linkPolicy"`
	ProfileName          string  `json:"profileName"`
	PskValue             string  `json:"pskValue"`
	Ssid                 string  `json:"ssid"`
	TenantId             *string `json:"tenantId,omitempty"`
	TotalCount           *string `json:"total_count,omitempty"`
	Version              *string `json:"version,omitempty"`
}

// GetAllCIRAConfigsParams defines parameters for GetAllCIRAConfigs.
type GetAllCIRAConfigsParams struct {
	// Skip The number of items to skip before starting to collect the result set
	Skip *int `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Top The numbers of items to return
	Top *int `form:"$top,omitempty" json:"$top,omitempty"`

	// Count The total number of CIRA configs
	Count *bool `form:"$count,omitempty" json:"$count,omitempty"`
}

// GetAllDomainsParams defines parameters for GetAllDomains.
type GetAllDomainsParams struct {
	// Skip The number of items to skip before starting to collect the result set
	Skip *int `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Top The numbers of items to return
	Top *int `form:"$top,omitempty" json:"$top,omitempty"`

	// Count The total number of domains
	Count *bool `form:"$count,omitempty" json:"$count,omitempty"`
}

// GetAll8021xConfigsParams defines parameters for GetAll8021xConfigs.
type GetAll8021xConfigsParams struct {
	// Skip The number of items to skip before starting to collect the result set
	Skip *int `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Top The numbers of items to return
	Top *int `form:"$top,omitempty" json:"$top,omitempty"`

	// Count The total number of ieee8021xconfigs
	Count *bool `form:"$count,omitempty" json:"$count,omitempty"`
}

// GetAllProfilesParams defines parameters for GetAllProfiles.
type GetAllProfilesParams struct {
	// Skip The number of items to skip before starting to collect the result set
	Skip *int `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Top The numbers of items to return
	Top *int `form:"$top,omitempty" json:"$top,omitempty"`

	// Count The total number of profiles
	Count *bool `form:"$count,omitempty" json:"$count,omitempty"`
}

// GetAllWirelessConfigsParams defines parameters for GetAllWirelessConfigs.
type GetAllWirelessConfigsParams struct {
	// Skip The number of items to skip before starting to collect the result set
	Skip *int `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Top The numbers of items to return
	Top *int `form:"$top,omitempty" json:"$top,omitempty"`

	// Count The total number of wireless configs
	Count *bool `form:"$count,omitempty" json:"$count,omitempty"`
}

// EditCIRAConfigJSONRequestBody defines body for EditCIRAConfig for application/json ContentType.
type EditCIRAConfigJSONRequestBody = CIRAConfigPATCH

// CreateCIRAConfigJSONRequestBody defines body for CreateCIRAConfig for application/json ContentType.
type CreateCIRAConfigJSONRequestBody = CIRAConfigPOST

// UpdateDomainSuffixJSONRequestBody defines body for UpdateDomainSuffix for application/json ContentType.
type UpdateDomainSuffixJSONRequestBody = DomainPATCH

// CreateDomainJSONRequestBody defines body for CreateDomain for application/json ContentType.
type CreateDomainJSONRequestBody = DomainPOST

// Edit8021xConfigJSONRequestBody defines body for Edit8021xConfig for application/json ContentType.
type Edit8021xConfigJSONRequestBody = IEEE8021xConfigPATCH

// Create8021xConfigJSONRequestBody defines body for Create8021xConfig for application/json ContentType.
type Create8021xConfigJSONRequestBody = IEEE8021xConfigPOST

// UpdateProfileJSONRequestBody defines body for UpdateProfile for application/json ContentType.
type UpdateProfileJSONRequestBody = ProfilePATCH

// CreateProfileJSONRequestBody defines body for CreateProfile for application/json ContentType.
type CreateProfileJSONRequestBody = ProfilePOST

// EditWirelessConfigJSONRequestBody defines body for EditWirelessConfig for application/json ContentType.
type EditWirelessConfigJSONRequestBody = WirelessConfigPATCH

// CreateWirelessConfigJSONRequestBody defines body for CreateWirelessConfig for application/json ContentType.
type CreateWirelessConfigJSONRequestBody = WirelessConfigPOST

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllCIRAConfigs request
	GetAllCIRAConfigs(ctx context.Context, params *GetAllCIRAConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditCIRAConfigWithBody request with any body
	EditCIRAConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditCIRAConfig(ctx context.Context, body EditCIRAConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCIRAConfigWithBody request with any body
	CreateCIRAConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCIRAConfig(ctx context.Context, body CreateCIRAConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveCIRAConfig request
	RemoveCIRAConfig(ctx context.Context, configName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCIRAConfig request
	GetCIRAConfig(ctx context.Context, configName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllDomains request
	GetAllDomains(ctx context.Context, params *GetAllDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDomainSuffixWithBody request with any body
	UpdateDomainSuffixWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDomainSuffix(ctx context.Context, body UpdateDomainSuffixJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDomainWithBody request with any body
	CreateDomainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDomain(ctx context.Context, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveDomain request
	RemoveDomain(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDomain request
	GetDomain(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AdminHealth request
	GetApiV1AdminHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAll8021xConfigs request
	GetAll8021xConfigs(ctx context.Context, params *GetAll8021xConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Edit8021xConfigWithBody request with any body
	Edit8021xConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Edit8021xConfig(ctx context.Context, body Edit8021xConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create8021xConfigWithBody request with any body
	Create8021xConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create8021xConfig(ctx context.Context, body Create8021xConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Remove8021xConfig request
	Remove8021xConfig(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get8021xConfig request
	Get8021xConfig(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllProfiles request
	GetAllProfiles(ctx context.Context, params *GetAllProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProfileWithBody request with any body
	UpdateProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProfile(ctx context.Context, body UpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProfileWithBody request with any body
	CreateProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProfile(ctx context.Context, body CreateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveProfile request
	RemoveProfile(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfile request
	GetProfile(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllWirelessConfigs request
	GetAllWirelessConfigs(ctx context.Context, params *GetAllWirelessConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditWirelessConfigWithBody request with any body
	EditWirelessConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditWirelessConfig(ctx context.Context, body EditWirelessConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWirelessConfigWithBody request with any body
	CreateWirelessConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWirelessConfig(ctx context.Context, body CreateWirelessConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveWirelessConfig request
	RemoveWirelessConfig(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWirelessConfig request
	GetWirelessConfig(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllCIRAConfigs(ctx context.Context, params *GetAllCIRAConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCIRAConfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditCIRAConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditCIRAConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditCIRAConfig(ctx context.Context, body EditCIRAConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditCIRAConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCIRAConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCIRAConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCIRAConfig(ctx context.Context, body CreateCIRAConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCIRAConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveCIRAConfig(ctx context.Context, configName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveCIRAConfigRequest(c.Server, configName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCIRAConfig(ctx context.Context, configName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCIRAConfigRequest(c.Server, configName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllDomains(ctx context.Context, params *GetAllDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllDomainsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDomainSuffixWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDomainSuffixRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDomainSuffix(ctx context.Context, body UpdateDomainSuffixJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDomainSuffixRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDomainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDomainRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDomain(ctx context.Context, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDomainRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveDomain(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveDomainRequest(c.Server, profileName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDomain(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDomainRequest(c.Server, profileName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AdminHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AdminHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAll8021xConfigs(ctx context.Context, params *GetAll8021xConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAll8021xConfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Edit8021xConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEdit8021xConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Edit8021xConfig(ctx context.Context, body Edit8021xConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEdit8021xConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create8021xConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate8021xConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create8021xConfig(ctx context.Context, body Create8021xConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate8021xConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Remove8021xConfig(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemove8021xConfigRequest(c.Server, profileName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get8021xConfig(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet8021xConfigRequest(c.Server, profileName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllProfiles(ctx context.Context, params *GetAllProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllProfilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProfile(ctx context.Context, body UpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProfile(ctx context.Context, body CreateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveProfile(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveProfileRequest(c.Server, profileName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfile(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfileRequest(c.Server, profileName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllWirelessConfigs(ctx context.Context, params *GetAllWirelessConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllWirelessConfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditWirelessConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditWirelessConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditWirelessConfig(ctx context.Context, body EditWirelessConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditWirelessConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWirelessConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWirelessConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWirelessConfig(ctx context.Context, body CreateWirelessConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWirelessConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveWirelessConfig(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveWirelessConfigRequest(c.Server, profileName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWirelessConfig(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWirelessConfigRequest(c.Server, profileName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllCIRAConfigsRequest generates requests for GetAllCIRAConfigs
func NewGetAllCIRAConfigsRequest(server string, params *GetAllCIRAConfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/ciraconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditCIRAConfigRequest calls the generic EditCIRAConfig builder with application/json body
func NewEditCIRAConfigRequest(server string, body EditCIRAConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditCIRAConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewEditCIRAConfigRequestWithBody generates requests for EditCIRAConfig with any type of body
func NewEditCIRAConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/ciraconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateCIRAConfigRequest calls the generic CreateCIRAConfig builder with application/json body
func NewCreateCIRAConfigRequest(server string, body CreateCIRAConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCIRAConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCIRAConfigRequestWithBody generates requests for CreateCIRAConfig with any type of body
func NewCreateCIRAConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/ciraconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveCIRAConfigRequest generates requests for RemoveCIRAConfig
func NewRemoveCIRAConfigRequest(server string, configName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "configName", runtime.ParamLocationPath, configName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/ciraconfigs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCIRAConfigRequest generates requests for GetCIRAConfig
func NewGetCIRAConfigRequest(server string, configName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "configName", runtime.ParamLocationPath, configName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/ciraconfigs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllDomainsRequest generates requests for GetAllDomains
func NewGetAllDomainsRequest(server string, params *GetAllDomainsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/domains")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDomainSuffixRequest calls the generic UpdateDomainSuffix builder with application/json body
func NewUpdateDomainSuffixRequest(server string, body UpdateDomainSuffixJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDomainSuffixRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateDomainSuffixRequestWithBody generates requests for UpdateDomainSuffix with any type of body
func NewUpdateDomainSuffixRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/domains")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateDomainRequest calls the generic CreateDomain builder with application/json body
func NewCreateDomainRequest(server string, body CreateDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDomainRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDomainRequestWithBody generates requests for CreateDomain with any type of body
func NewCreateDomainRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/domains")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveDomainRequest generates requests for RemoveDomain
func NewRemoveDomainRequest(server string, profileName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "profileName", runtime.ParamLocationPath, profileName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/domains/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDomainRequest generates requests for GetDomain
func NewGetDomainRequest(server string, profileName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "profileName", runtime.ParamLocationPath, profileName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/domains/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AdminHealthRequest generates requests for GetApiV1AdminHealth
func NewGetApiV1AdminHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAll8021xConfigsRequest generates requests for GetAll8021xConfigs
func NewGetAll8021xConfigsRequest(server string, params *GetAll8021xConfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/ieee8021xconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEdit8021xConfigRequest calls the generic Edit8021xConfig builder with application/json body
func NewEdit8021xConfigRequest(server string, body Edit8021xConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEdit8021xConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewEdit8021xConfigRequestWithBody generates requests for Edit8021xConfig with any type of body
func NewEdit8021xConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/ieee8021xconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreate8021xConfigRequest calls the generic Create8021xConfig builder with application/json body
func NewCreate8021xConfigRequest(server string, body Create8021xConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate8021xConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewCreate8021xConfigRequestWithBody generates requests for Create8021xConfig with any type of body
func NewCreate8021xConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/ieee8021xconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemove8021xConfigRequest generates requests for Remove8021xConfig
func NewRemove8021xConfigRequest(server string, profileName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "profileName", runtime.ParamLocationPath, profileName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/ieee8021xconfigs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet8021xConfigRequest generates requests for Get8021xConfig
func NewGet8021xConfigRequest(server string, profileName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "profileName", runtime.ParamLocationPath, profileName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/ieee8021xconfigs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllProfilesRequest generates requests for GetAllProfiles
func NewGetAllProfilesRequest(server string, params *GetAllProfilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateProfileRequest calls the generic UpdateProfile builder with application/json body
func NewUpdateProfileRequest(server string, body UpdateProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateProfileRequestWithBody generates requests for UpdateProfile with any type of body
func NewUpdateProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateProfileRequest calls the generic CreateProfile builder with application/json body
func NewCreateProfileRequest(server string, body CreateProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateProfileRequestWithBody generates requests for CreateProfile with any type of body
func NewCreateProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveProfileRequest generates requests for RemoveProfile
func NewRemoveProfileRequest(server string, profileName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "profileName", runtime.ParamLocationPath, profileName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProfileRequest generates requests for GetProfile
func NewGetProfileRequest(server string, profileName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "profileName", runtime.ParamLocationPath, profileName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllWirelessConfigsRequest generates requests for GetAllWirelessConfigs
func NewGetAllWirelessConfigsRequest(server string, params *GetAllWirelessConfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/wirelessconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditWirelessConfigRequest calls the generic EditWirelessConfig builder with application/json body
func NewEditWirelessConfigRequest(server string, body EditWirelessConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditWirelessConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewEditWirelessConfigRequestWithBody generates requests for EditWirelessConfig with any type of body
func NewEditWirelessConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/wirelessconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateWirelessConfigRequest calls the generic CreateWirelessConfig builder with application/json body
func NewCreateWirelessConfigRequest(server string, body CreateWirelessConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWirelessConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateWirelessConfigRequestWithBody generates requests for CreateWirelessConfig with any type of body
func NewCreateWirelessConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/wirelessconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveWirelessConfigRequest generates requests for RemoveWirelessConfig
func NewRemoveWirelessConfigRequest(server string, profileName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "profileName", runtime.ParamLocationPath, profileName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/wirelessconfigs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWirelessConfigRequest generates requests for GetWirelessConfig
func NewGetWirelessConfigRequest(server string, profileName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "profileName", runtime.ParamLocationPath, profileName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/wirelessconfigs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllCIRAConfigsWithResponse request
	GetAllCIRAConfigsWithResponse(ctx context.Context, params *GetAllCIRAConfigsParams, reqEditors ...RequestEditorFn) (*GetAllCIRAConfigsResponse, error)

	// EditCIRAConfigWithBodyWithResponse request with any body
	EditCIRAConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditCIRAConfigResponse, error)

	EditCIRAConfigWithResponse(ctx context.Context, body EditCIRAConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*EditCIRAConfigResponse, error)

	// CreateCIRAConfigWithBodyWithResponse request with any body
	CreateCIRAConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCIRAConfigResponse, error)

	CreateCIRAConfigWithResponse(ctx context.Context, body CreateCIRAConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCIRAConfigResponse, error)

	// RemoveCIRAConfigWithResponse request
	RemoveCIRAConfigWithResponse(ctx context.Context, configName string, reqEditors ...RequestEditorFn) (*RemoveCIRAConfigResponse, error)

	// GetCIRAConfigWithResponse request
	GetCIRAConfigWithResponse(ctx context.Context, configName string, reqEditors ...RequestEditorFn) (*GetCIRAConfigResponse, error)

	// GetAllDomainsWithResponse request
	GetAllDomainsWithResponse(ctx context.Context, params *GetAllDomainsParams, reqEditors ...RequestEditorFn) (*GetAllDomainsResponse, error)

	// UpdateDomainSuffixWithBodyWithResponse request with any body
	UpdateDomainSuffixWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDomainSuffixResponse, error)

	UpdateDomainSuffixWithResponse(ctx context.Context, body UpdateDomainSuffixJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDomainSuffixResponse, error)

	// CreateDomainWithBodyWithResponse request with any body
	CreateDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error)

	CreateDomainWithResponse(ctx context.Context, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error)

	// RemoveDomainWithResponse request
	RemoveDomainWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*RemoveDomainResponse, error)

	// GetDomainWithResponse request
	GetDomainWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*GetDomainResponse, error)

	// GetApiV1AdminHealthWithResponse request
	GetApiV1AdminHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AdminHealthResponse, error)

	// GetAll8021xConfigsWithResponse request
	GetAll8021xConfigsWithResponse(ctx context.Context, params *GetAll8021xConfigsParams, reqEditors ...RequestEditorFn) (*GetAll8021xConfigsResponse, error)

	// Edit8021xConfigWithBodyWithResponse request with any body
	Edit8021xConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Edit8021xConfigResponse, error)

	Edit8021xConfigWithResponse(ctx context.Context, body Edit8021xConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*Edit8021xConfigResponse, error)

	// Create8021xConfigWithBodyWithResponse request with any body
	Create8021xConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create8021xConfigResponse, error)

	Create8021xConfigWithResponse(ctx context.Context, body Create8021xConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*Create8021xConfigResponse, error)

	// Remove8021xConfigWithResponse request
	Remove8021xConfigWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*Remove8021xConfigResponse, error)

	// Get8021xConfigWithResponse request
	Get8021xConfigWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*Get8021xConfigResponse, error)

	// GetAllProfilesWithResponse request
	GetAllProfilesWithResponse(ctx context.Context, params *GetAllProfilesParams, reqEditors ...RequestEditorFn) (*GetAllProfilesResponse, error)

	// UpdateProfileWithBodyWithResponse request with any body
	UpdateProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProfileResponse, error)

	UpdateProfileWithResponse(ctx context.Context, body UpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProfileResponse, error)

	// CreateProfileWithBodyWithResponse request with any body
	CreateProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProfileResponse, error)

	CreateProfileWithResponse(ctx context.Context, body CreateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProfileResponse, error)

	// RemoveProfileWithResponse request
	RemoveProfileWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*RemoveProfileResponse, error)

	// GetProfileWithResponse request
	GetProfileWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*GetProfileResponse, error)

	// GetVersionWithResponse request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)

	// GetAllWirelessConfigsWithResponse request
	GetAllWirelessConfigsWithResponse(ctx context.Context, params *GetAllWirelessConfigsParams, reqEditors ...RequestEditorFn) (*GetAllWirelessConfigsResponse, error)

	// EditWirelessConfigWithBodyWithResponse request with any body
	EditWirelessConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditWirelessConfigResponse, error)

	EditWirelessConfigWithResponse(ctx context.Context, body EditWirelessConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*EditWirelessConfigResponse, error)

	// CreateWirelessConfigWithBodyWithResponse request with any body
	CreateWirelessConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWirelessConfigResponse, error)

	CreateWirelessConfigWithResponse(ctx context.Context, body CreateWirelessConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWirelessConfigResponse, error)

	// RemoveWirelessConfigWithResponse request
	RemoveWirelessConfigWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*RemoveWirelessConfigResponse, error)

	// GetWirelessConfigWithResponse request
	GetWirelessConfigWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*GetWirelessConfigResponse, error)
}

type GetAllCIRAConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON404 *APIResponse
	JSON500 *APIResponse
}
type GetAllCIRAConfigs2000 = []CIRAConfigResponse

// Status returns HTTPResponse.Status
func (r GetAllCIRAConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCIRAConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditCIRAConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CIRAConfigResponse
	JSON400      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r EditCIRAConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditCIRAConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCIRAConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CIRAConfigResponse
	JSON400      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r CreateCIRAConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCIRAConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveCIRAConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r RemoveCIRAConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveCIRAConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCIRAConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CIRAConfigResponse
	JSON404      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r GetCIRAConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCIRAConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON404 *APIResponse
	JSON500 *APIResponse
}
type GetAllDomains2000 = []DomainResponse

// Status returns HTTPResponse.Status
func (r GetAllDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDomainSuffixResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DomainResponse
	JSON400      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r UpdateDomainSuffixResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDomainSuffixResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DomainResponse
	JSON400      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r CreateDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r RemoveDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DomainResponse
	JSON404      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r GetDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AdminHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthcheckResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1AdminHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AdminHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAll8021xConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON404 *APIResponse
	JSON500 *APIResponse
}
type GetAll8021xConfigs2000 = []IEEE8021xConfigResponse

// Status returns HTTPResponse.Status
func (r GetAll8021xConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAll8021xConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Edit8021xConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IEEE8021xConfigResponse
	JSON400      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r Edit8021xConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Edit8021xConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create8021xConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IEEE8021xConfigResponse
	JSON400      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r Create8021xConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create8021xConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Remove8021xConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r Remove8021xConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Remove8021xConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get8021xConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IEEE8021xConfigResponse
	JSON404      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r Get8021xConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get8021xConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON404 *APIResponse
	JSON500 *APIResponse
}
type GetAllProfiles2000 = []ProfileResponse

// Status returns HTTPResponse.Status
func (r GetAllProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileResponse
	JSON400      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r UpdateProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProfileResponse
	JSON400      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r CreateProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r RemoveProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileResponse
	JSON404      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r GetProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionResponse
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllWirelessConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON404 *APIResponse
	JSON500 *APIResponse
}
type GetAllWirelessConfigs2000 = []WirelessConfigResponse

// Status returns HTTPResponse.Status
func (r GetAllWirelessConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllWirelessConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditWirelessConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WirelessConfigResponse
	JSON400      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r EditWirelessConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditWirelessConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWirelessConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WirelessConfigResponse
	JSON400      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r CreateWirelessConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWirelessConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveWirelessConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r RemoveWirelessConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveWirelessConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWirelessConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WirelessConfigResponse
	JSON404      *APIResponse
	JSON500      *APIResponse
}

// Status returns HTTPResponse.Status
func (r GetWirelessConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWirelessConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllCIRAConfigsWithResponse request returning *GetAllCIRAConfigsResponse
func (c *ClientWithResponses) GetAllCIRAConfigsWithResponse(ctx context.Context, params *GetAllCIRAConfigsParams, reqEditors ...RequestEditorFn) (*GetAllCIRAConfigsResponse, error) {
	rsp, err := c.GetAllCIRAConfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCIRAConfigsResponse(rsp)
}

// EditCIRAConfigWithBodyWithResponse request with arbitrary body returning *EditCIRAConfigResponse
func (c *ClientWithResponses) EditCIRAConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditCIRAConfigResponse, error) {
	rsp, err := c.EditCIRAConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditCIRAConfigResponse(rsp)
}

func (c *ClientWithResponses) EditCIRAConfigWithResponse(ctx context.Context, body EditCIRAConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*EditCIRAConfigResponse, error) {
	rsp, err := c.EditCIRAConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditCIRAConfigResponse(rsp)
}

// CreateCIRAConfigWithBodyWithResponse request with arbitrary body returning *CreateCIRAConfigResponse
func (c *ClientWithResponses) CreateCIRAConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCIRAConfigResponse, error) {
	rsp, err := c.CreateCIRAConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCIRAConfigResponse(rsp)
}

func (c *ClientWithResponses) CreateCIRAConfigWithResponse(ctx context.Context, body CreateCIRAConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCIRAConfigResponse, error) {
	rsp, err := c.CreateCIRAConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCIRAConfigResponse(rsp)
}

// RemoveCIRAConfigWithResponse request returning *RemoveCIRAConfigResponse
func (c *ClientWithResponses) RemoveCIRAConfigWithResponse(ctx context.Context, configName string, reqEditors ...RequestEditorFn) (*RemoveCIRAConfigResponse, error) {
	rsp, err := c.RemoveCIRAConfig(ctx, configName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveCIRAConfigResponse(rsp)
}

// GetCIRAConfigWithResponse request returning *GetCIRAConfigResponse
func (c *ClientWithResponses) GetCIRAConfigWithResponse(ctx context.Context, configName string, reqEditors ...RequestEditorFn) (*GetCIRAConfigResponse, error) {
	rsp, err := c.GetCIRAConfig(ctx, configName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCIRAConfigResponse(rsp)
}

// GetAllDomainsWithResponse request returning *GetAllDomainsResponse
func (c *ClientWithResponses) GetAllDomainsWithResponse(ctx context.Context, params *GetAllDomainsParams, reqEditors ...RequestEditorFn) (*GetAllDomainsResponse, error) {
	rsp, err := c.GetAllDomains(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllDomainsResponse(rsp)
}

// UpdateDomainSuffixWithBodyWithResponse request with arbitrary body returning *UpdateDomainSuffixResponse
func (c *ClientWithResponses) UpdateDomainSuffixWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDomainSuffixResponse, error) {
	rsp, err := c.UpdateDomainSuffixWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDomainSuffixResponse(rsp)
}

func (c *ClientWithResponses) UpdateDomainSuffixWithResponse(ctx context.Context, body UpdateDomainSuffixJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDomainSuffixResponse, error) {
	rsp, err := c.UpdateDomainSuffix(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDomainSuffixResponse(rsp)
}

// CreateDomainWithBodyWithResponse request with arbitrary body returning *CreateDomainResponse
func (c *ClientWithResponses) CreateDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error) {
	rsp, err := c.CreateDomainWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDomainResponse(rsp)
}

func (c *ClientWithResponses) CreateDomainWithResponse(ctx context.Context, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error) {
	rsp, err := c.CreateDomain(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDomainResponse(rsp)
}

// RemoveDomainWithResponse request returning *RemoveDomainResponse
func (c *ClientWithResponses) RemoveDomainWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*RemoveDomainResponse, error) {
	rsp, err := c.RemoveDomain(ctx, profileName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveDomainResponse(rsp)
}

// GetDomainWithResponse request returning *GetDomainResponse
func (c *ClientWithResponses) GetDomainWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*GetDomainResponse, error) {
	rsp, err := c.GetDomain(ctx, profileName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDomainResponse(rsp)
}

// GetApiV1AdminHealthWithResponse request returning *GetApiV1AdminHealthResponse
func (c *ClientWithResponses) GetApiV1AdminHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AdminHealthResponse, error) {
	rsp, err := c.GetApiV1AdminHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AdminHealthResponse(rsp)
}

// GetAll8021xConfigsWithResponse request returning *GetAll8021xConfigsResponse
func (c *ClientWithResponses) GetAll8021xConfigsWithResponse(ctx context.Context, params *GetAll8021xConfigsParams, reqEditors ...RequestEditorFn) (*GetAll8021xConfigsResponse, error) {
	rsp, err := c.GetAll8021xConfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAll8021xConfigsResponse(rsp)
}

// Edit8021xConfigWithBodyWithResponse request with arbitrary body returning *Edit8021xConfigResponse
func (c *ClientWithResponses) Edit8021xConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Edit8021xConfigResponse, error) {
	rsp, err := c.Edit8021xConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEdit8021xConfigResponse(rsp)
}

func (c *ClientWithResponses) Edit8021xConfigWithResponse(ctx context.Context, body Edit8021xConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*Edit8021xConfigResponse, error) {
	rsp, err := c.Edit8021xConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEdit8021xConfigResponse(rsp)
}

// Create8021xConfigWithBodyWithResponse request with arbitrary body returning *Create8021xConfigResponse
func (c *ClientWithResponses) Create8021xConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create8021xConfigResponse, error) {
	rsp, err := c.Create8021xConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate8021xConfigResponse(rsp)
}

func (c *ClientWithResponses) Create8021xConfigWithResponse(ctx context.Context, body Create8021xConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*Create8021xConfigResponse, error) {
	rsp, err := c.Create8021xConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate8021xConfigResponse(rsp)
}

// Remove8021xConfigWithResponse request returning *Remove8021xConfigResponse
func (c *ClientWithResponses) Remove8021xConfigWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*Remove8021xConfigResponse, error) {
	rsp, err := c.Remove8021xConfig(ctx, profileName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemove8021xConfigResponse(rsp)
}

// Get8021xConfigWithResponse request returning *Get8021xConfigResponse
func (c *ClientWithResponses) Get8021xConfigWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*Get8021xConfigResponse, error) {
	rsp, err := c.Get8021xConfig(ctx, profileName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet8021xConfigResponse(rsp)
}

// GetAllProfilesWithResponse request returning *GetAllProfilesResponse
func (c *ClientWithResponses) GetAllProfilesWithResponse(ctx context.Context, params *GetAllProfilesParams, reqEditors ...RequestEditorFn) (*GetAllProfilesResponse, error) {
	rsp, err := c.GetAllProfiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllProfilesResponse(rsp)
}

// UpdateProfileWithBodyWithResponse request with arbitrary body returning *UpdateProfileResponse
func (c *ClientWithResponses) UpdateProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProfileResponse, error) {
	rsp, err := c.UpdateProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProfileResponse(rsp)
}

func (c *ClientWithResponses) UpdateProfileWithResponse(ctx context.Context, body UpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProfileResponse, error) {
	rsp, err := c.UpdateProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProfileResponse(rsp)
}

// CreateProfileWithBodyWithResponse request with arbitrary body returning *CreateProfileResponse
func (c *ClientWithResponses) CreateProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProfileResponse, error) {
	rsp, err := c.CreateProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProfileResponse(rsp)
}

func (c *ClientWithResponses) CreateProfileWithResponse(ctx context.Context, body CreateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProfileResponse, error) {
	rsp, err := c.CreateProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProfileResponse(rsp)
}

// RemoveProfileWithResponse request returning *RemoveProfileResponse
func (c *ClientWithResponses) RemoveProfileWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*RemoveProfileResponse, error) {
	rsp, err := c.RemoveProfile(ctx, profileName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveProfileResponse(rsp)
}

// GetProfileWithResponse request returning *GetProfileResponse
func (c *ClientWithResponses) GetProfileWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*GetProfileResponse, error) {
	rsp, err := c.GetProfile(ctx, profileName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfileResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// GetAllWirelessConfigsWithResponse request returning *GetAllWirelessConfigsResponse
func (c *ClientWithResponses) GetAllWirelessConfigsWithResponse(ctx context.Context, params *GetAllWirelessConfigsParams, reqEditors ...RequestEditorFn) (*GetAllWirelessConfigsResponse, error) {
	rsp, err := c.GetAllWirelessConfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllWirelessConfigsResponse(rsp)
}

// EditWirelessConfigWithBodyWithResponse request with arbitrary body returning *EditWirelessConfigResponse
func (c *ClientWithResponses) EditWirelessConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditWirelessConfigResponse, error) {
	rsp, err := c.EditWirelessConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditWirelessConfigResponse(rsp)
}

func (c *ClientWithResponses) EditWirelessConfigWithResponse(ctx context.Context, body EditWirelessConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*EditWirelessConfigResponse, error) {
	rsp, err := c.EditWirelessConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditWirelessConfigResponse(rsp)
}

// CreateWirelessConfigWithBodyWithResponse request with arbitrary body returning *CreateWirelessConfigResponse
func (c *ClientWithResponses) CreateWirelessConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWirelessConfigResponse, error) {
	rsp, err := c.CreateWirelessConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWirelessConfigResponse(rsp)
}

func (c *ClientWithResponses) CreateWirelessConfigWithResponse(ctx context.Context, body CreateWirelessConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWirelessConfigResponse, error) {
	rsp, err := c.CreateWirelessConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWirelessConfigResponse(rsp)
}

// RemoveWirelessConfigWithResponse request returning *RemoveWirelessConfigResponse
func (c *ClientWithResponses) RemoveWirelessConfigWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*RemoveWirelessConfigResponse, error) {
	rsp, err := c.RemoveWirelessConfig(ctx, profileName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveWirelessConfigResponse(rsp)
}

// GetWirelessConfigWithResponse request returning *GetWirelessConfigResponse
func (c *ClientWithResponses) GetWirelessConfigWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*GetWirelessConfigResponse, error) {
	rsp, err := c.GetWirelessConfig(ctx, profileName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWirelessConfigResponse(rsp)
}

// ParseGetAllCIRAConfigsResponse parses an HTTP response from a GetAllCIRAConfigsWithResponse call
func ParseGetAllCIRAConfigsResponse(rsp *http.Response) (*GetAllCIRAConfigsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCIRAConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEditCIRAConfigResponse parses an HTTP response from a EditCIRAConfigWithResponse call
func ParseEditCIRAConfigResponse(rsp *http.Response) (*EditCIRAConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditCIRAConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CIRAConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateCIRAConfigResponse parses an HTTP response from a CreateCIRAConfigWithResponse call
func ParseCreateCIRAConfigResponse(rsp *http.Response) (*CreateCIRAConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCIRAConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CIRAConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveCIRAConfigResponse parses an HTTP response from a RemoveCIRAConfigWithResponse call
func ParseRemoveCIRAConfigResponse(rsp *http.Response) (*RemoveCIRAConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveCIRAConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCIRAConfigResponse parses an HTTP response from a GetCIRAConfigWithResponse call
func ParseGetCIRAConfigResponse(rsp *http.Response) (*GetCIRAConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCIRAConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CIRAConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllDomainsResponse parses an HTTP response from a GetAllDomainsWithResponse call
func ParseGetAllDomainsResponse(rsp *http.Response) (*GetAllDomainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateDomainSuffixResponse parses an HTTP response from a UpdateDomainSuffixWithResponse call
func ParseUpdateDomainSuffixResponse(rsp *http.Response) (*UpdateDomainSuffixResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDomainSuffixResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateDomainResponse parses an HTTP response from a CreateDomainWithResponse call
func ParseCreateDomainResponse(rsp *http.Response) (*CreateDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DomainResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveDomainResponse parses an HTTP response from a RemoveDomainWithResponse call
func ParseRemoveDomainResponse(rsp *http.Response) (*RemoveDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDomainResponse parses an HTTP response from a GetDomainWithResponse call
func ParseGetDomainResponse(rsp *http.Response) (*GetDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1AdminHealthResponse parses an HTTP response from a GetApiV1AdminHealthWithResponse call
func ParseGetApiV1AdminHealthResponse(rsp *http.Response) (*GetApiV1AdminHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AdminHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthcheckResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAll8021xConfigsResponse parses an HTTP response from a GetAll8021xConfigsWithResponse call
func ParseGetAll8021xConfigsResponse(rsp *http.Response) (*GetAll8021xConfigsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAll8021xConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEdit8021xConfigResponse parses an HTTP response from a Edit8021xConfigWithResponse call
func ParseEdit8021xConfigResponse(rsp *http.Response) (*Edit8021xConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Edit8021xConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IEEE8021xConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreate8021xConfigResponse parses an HTTP response from a Create8021xConfigWithResponse call
func ParseCreate8021xConfigResponse(rsp *http.Response) (*Create8021xConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create8021xConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IEEE8021xConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemove8021xConfigResponse parses an HTTP response from a Remove8021xConfigWithResponse call
func ParseRemove8021xConfigResponse(rsp *http.Response) (*Remove8021xConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Remove8021xConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGet8021xConfigResponse parses an HTTP response from a Get8021xConfigWithResponse call
func ParseGet8021xConfigResponse(rsp *http.Response) (*Get8021xConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get8021xConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IEEE8021xConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllProfilesResponse parses an HTTP response from a GetAllProfilesWithResponse call
func ParseGetAllProfilesResponse(rsp *http.Response) (*GetAllProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateProfileResponse parses an HTTP response from a UpdateProfileWithResponse call
func ParseUpdateProfileResponse(rsp *http.Response) (*UpdateProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateProfileResponse parses an HTTP response from a CreateProfileWithResponse call
func ParseCreateProfileResponse(rsp *http.Response) (*CreateProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveProfileResponse parses an HTTP response from a RemoveProfileWithResponse call
func ParseRemoveProfileResponse(rsp *http.Response) (*RemoveProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProfileResponse parses an HTTP response from a GetProfileWithResponse call
func ParseGetProfileResponse(rsp *http.Response) (*GetProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllWirelessConfigsResponse parses an HTTP response from a GetAllWirelessConfigsWithResponse call
func ParseGetAllWirelessConfigsResponse(rsp *http.Response) (*GetAllWirelessConfigsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllWirelessConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEditWirelessConfigResponse parses an HTTP response from a EditWirelessConfigWithResponse call
func ParseEditWirelessConfigResponse(rsp *http.Response) (*EditWirelessConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditWirelessConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WirelessConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateWirelessConfigResponse parses an HTTP response from a CreateWirelessConfigWithResponse call
func ParseCreateWirelessConfigResponse(rsp *http.Response) (*CreateWirelessConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWirelessConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WirelessConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveWirelessConfigResponse parses an HTTP response from a RemoveWirelessConfigWithResponse call
func ParseRemoveWirelessConfigResponse(rsp *http.Response) (*RemoveWirelessConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveWirelessConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWirelessConfigResponse parses an HTTP response from a GetWirelessConfigWithResponse call
func ParseGetWirelessConfigResponse(rsp *http.Response) (*GetWirelessConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWirelessConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WirelessConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
