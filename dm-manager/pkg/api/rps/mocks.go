// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package rps

import (
	"context"
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewMockClientWithResponsesInterface creates a new instance of MockClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type MockClientWithResponsesInterface struct {
	mock.Mock
}

type MockClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterface_Expecter {
	return &MockClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// Create8021xConfigWithBodyWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) Create8021xConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create8021xConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, contentType, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, contentType, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Create8021xConfigWithBodyWithResponse")
	}

	var r0 *Create8021xConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) (*Create8021xConfigResponse, error)); ok {
		return returnFunc(ctx, contentType, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) *Create8021xConfigResponse); ok {
		r0 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Create8021xConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_Create8021xConfigWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create8021xConfigWithBodyWithResponse'
type MockClientWithResponsesInterface_Create8021xConfigWithBodyWithResponse_Call struct {
	*mock.Call
}

// Create8021xConfigWithBodyWithResponse is a helper method to define mock.On call
//   - ctx
//   - contentType
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) Create8021xConfigWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_Create8021xConfigWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_Create8021xConfigWithBodyWithResponse_Call{Call: _e.mock.On("Create8021xConfigWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_Create8021xConfigWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_Create8021xConfigWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_Create8021xConfigWithBodyWithResponse_Call) Return(create8021xConfigResponse *Create8021xConfigResponse, err error) *MockClientWithResponsesInterface_Create8021xConfigWithBodyWithResponse_Call {
	_c.Call.Return(create8021xConfigResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_Create8021xConfigWithBodyWithResponse_Call) RunAndReturn(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create8021xConfigResponse, error)) *MockClientWithResponsesInterface_Create8021xConfigWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// Create8021xConfigWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) Create8021xConfigWithResponse(ctx context.Context, body Create8021xConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*Create8021xConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Create8021xConfigWithResponse")
	}

	var r0 *Create8021xConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, Create8021xConfigJSONRequestBody, ...RequestEditorFn) (*Create8021xConfigResponse, error)); ok {
		return returnFunc(ctx, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, Create8021xConfigJSONRequestBody, ...RequestEditorFn) *Create8021xConfigResponse); ok {
		r0 = returnFunc(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Create8021xConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, Create8021xConfigJSONRequestBody, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_Create8021xConfigWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create8021xConfigWithResponse'
type MockClientWithResponsesInterface_Create8021xConfigWithResponse_Call struct {
	*mock.Call
}

// Create8021xConfigWithResponse is a helper method to define mock.On call
//   - ctx
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) Create8021xConfigWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_Create8021xConfigWithResponse_Call {
	return &MockClientWithResponsesInterface_Create8021xConfigWithResponse_Call{Call: _e.mock.On("Create8021xConfigWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_Create8021xConfigWithResponse_Call) Run(run func(ctx context.Context, body Create8021xConfigJSONRequestBody, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_Create8021xConfigWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(Create8021xConfigJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_Create8021xConfigWithResponse_Call) Return(create8021xConfigResponse *Create8021xConfigResponse, err error) *MockClientWithResponsesInterface_Create8021xConfigWithResponse_Call {
	_c.Call.Return(create8021xConfigResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_Create8021xConfigWithResponse_Call) RunAndReturn(run func(ctx context.Context, body Create8021xConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*Create8021xConfigResponse, error)) *MockClientWithResponsesInterface_Create8021xConfigWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCIRAConfigWithBodyWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) CreateCIRAConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCIRAConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, contentType, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, contentType, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateCIRAConfigWithBodyWithResponse")
	}

	var r0 *CreateCIRAConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) (*CreateCIRAConfigResponse, error)); ok {
		return returnFunc(ctx, contentType, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) *CreateCIRAConfigResponse); ok {
		r0 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateCIRAConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_CreateCIRAConfigWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCIRAConfigWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateCIRAConfigWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateCIRAConfigWithBodyWithResponse is a helper method to define mock.On call
//   - ctx
//   - contentType
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) CreateCIRAConfigWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateCIRAConfigWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateCIRAConfigWithBodyWithResponse_Call{Call: _e.mock.On("CreateCIRAConfigWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateCIRAConfigWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_CreateCIRAConfigWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateCIRAConfigWithBodyWithResponse_Call) Return(createCIRAConfigResponse *CreateCIRAConfigResponse, err error) *MockClientWithResponsesInterface_CreateCIRAConfigWithBodyWithResponse_Call {
	_c.Call.Return(createCIRAConfigResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateCIRAConfigWithBodyWithResponse_Call) RunAndReturn(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCIRAConfigResponse, error)) *MockClientWithResponsesInterface_CreateCIRAConfigWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCIRAConfigWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) CreateCIRAConfigWithResponse(ctx context.Context, body CreateCIRAConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCIRAConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateCIRAConfigWithResponse")
	}

	var r0 *CreateCIRAConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateCIRAConfigJSONRequestBody, ...RequestEditorFn) (*CreateCIRAConfigResponse, error)); ok {
		return returnFunc(ctx, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateCIRAConfigJSONRequestBody, ...RequestEditorFn) *CreateCIRAConfigResponse); ok {
		r0 = returnFunc(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateCIRAConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateCIRAConfigJSONRequestBody, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_CreateCIRAConfigWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCIRAConfigWithResponse'
type MockClientWithResponsesInterface_CreateCIRAConfigWithResponse_Call struct {
	*mock.Call
}

// CreateCIRAConfigWithResponse is a helper method to define mock.On call
//   - ctx
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) CreateCIRAConfigWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateCIRAConfigWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateCIRAConfigWithResponse_Call{Call: _e.mock.On("CreateCIRAConfigWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateCIRAConfigWithResponse_Call) Run(run func(ctx context.Context, body CreateCIRAConfigJSONRequestBody, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_CreateCIRAConfigWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(CreateCIRAConfigJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateCIRAConfigWithResponse_Call) Return(createCIRAConfigResponse *CreateCIRAConfigResponse, err error) *MockClientWithResponsesInterface_CreateCIRAConfigWithResponse_Call {
	_c.Call.Return(createCIRAConfigResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateCIRAConfigWithResponse_Call) RunAndReturn(run func(ctx context.Context, body CreateCIRAConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCIRAConfigResponse, error)) *MockClientWithResponsesInterface_CreateCIRAConfigWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDomainWithBodyWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) CreateDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, contentType, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, contentType, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateDomainWithBodyWithResponse")
	}

	var r0 *CreateDomainResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) (*CreateDomainResponse, error)); ok {
		return returnFunc(ctx, contentType, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) *CreateDomainResponse); ok {
		r0 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateDomainResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_CreateDomainWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDomainWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateDomainWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateDomainWithBodyWithResponse is a helper method to define mock.On call
//   - ctx
//   - contentType
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) CreateDomainWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateDomainWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateDomainWithBodyWithResponse_Call{Call: _e.mock.On("CreateDomainWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateDomainWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_CreateDomainWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateDomainWithBodyWithResponse_Call) Return(createDomainResponse *CreateDomainResponse, err error) *MockClientWithResponsesInterface_CreateDomainWithBodyWithResponse_Call {
	_c.Call.Return(createDomainResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateDomainWithBodyWithResponse_Call) RunAndReturn(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error)) *MockClientWithResponsesInterface_CreateDomainWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDomainWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) CreateDomainWithResponse(ctx context.Context, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateDomainWithResponse")
	}

	var r0 *CreateDomainResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateDomainJSONRequestBody, ...RequestEditorFn) (*CreateDomainResponse, error)); ok {
		return returnFunc(ctx, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateDomainJSONRequestBody, ...RequestEditorFn) *CreateDomainResponse); ok {
		r0 = returnFunc(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateDomainResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateDomainJSONRequestBody, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_CreateDomainWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDomainWithResponse'
type MockClientWithResponsesInterface_CreateDomainWithResponse_Call struct {
	*mock.Call
}

// CreateDomainWithResponse is a helper method to define mock.On call
//   - ctx
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) CreateDomainWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateDomainWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateDomainWithResponse_Call{Call: _e.mock.On("CreateDomainWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateDomainWithResponse_Call) Run(run func(ctx context.Context, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_CreateDomainWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(CreateDomainJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateDomainWithResponse_Call) Return(createDomainResponse *CreateDomainResponse, err error) *MockClientWithResponsesInterface_CreateDomainWithResponse_Call {
	_c.Call.Return(createDomainResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateDomainWithResponse_Call) RunAndReturn(run func(ctx context.Context, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error)) *MockClientWithResponsesInterface_CreateDomainWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProfileWithBodyWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) CreateProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProfileResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, contentType, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, contentType, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateProfileWithBodyWithResponse")
	}

	var r0 *CreateProfileResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) (*CreateProfileResponse, error)); ok {
		return returnFunc(ctx, contentType, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) *CreateProfileResponse); ok {
		r0 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateProfileResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_CreateProfileWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProfileWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateProfileWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateProfileWithBodyWithResponse is a helper method to define mock.On call
//   - ctx
//   - contentType
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) CreateProfileWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateProfileWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateProfileWithBodyWithResponse_Call{Call: _e.mock.On("CreateProfileWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateProfileWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_CreateProfileWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateProfileWithBodyWithResponse_Call) Return(createProfileResponse *CreateProfileResponse, err error) *MockClientWithResponsesInterface_CreateProfileWithBodyWithResponse_Call {
	_c.Call.Return(createProfileResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateProfileWithBodyWithResponse_Call) RunAndReturn(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProfileResponse, error)) *MockClientWithResponsesInterface_CreateProfileWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProfileWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) CreateProfileWithResponse(ctx context.Context, body CreateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProfileResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateProfileWithResponse")
	}

	var r0 *CreateProfileResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateProfileJSONRequestBody, ...RequestEditorFn) (*CreateProfileResponse, error)); ok {
		return returnFunc(ctx, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateProfileJSONRequestBody, ...RequestEditorFn) *CreateProfileResponse); ok {
		r0 = returnFunc(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateProfileResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateProfileJSONRequestBody, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_CreateProfileWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProfileWithResponse'
type MockClientWithResponsesInterface_CreateProfileWithResponse_Call struct {
	*mock.Call
}

// CreateProfileWithResponse is a helper method to define mock.On call
//   - ctx
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) CreateProfileWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateProfileWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateProfileWithResponse_Call{Call: _e.mock.On("CreateProfileWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateProfileWithResponse_Call) Run(run func(ctx context.Context, body CreateProfileJSONRequestBody, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_CreateProfileWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(CreateProfileJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateProfileWithResponse_Call) Return(createProfileResponse *CreateProfileResponse, err error) *MockClientWithResponsesInterface_CreateProfileWithResponse_Call {
	_c.Call.Return(createProfileResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateProfileWithResponse_Call) RunAndReturn(run func(ctx context.Context, body CreateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProfileResponse, error)) *MockClientWithResponsesInterface_CreateProfileWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWirelessConfigWithBodyWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) CreateWirelessConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWirelessConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, contentType, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, contentType, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateWirelessConfigWithBodyWithResponse")
	}

	var r0 *CreateWirelessConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) (*CreateWirelessConfigResponse, error)); ok {
		return returnFunc(ctx, contentType, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) *CreateWirelessConfigResponse); ok {
		r0 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateWirelessConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_CreateWirelessConfigWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWirelessConfigWithBodyWithResponse'
type MockClientWithResponsesInterface_CreateWirelessConfigWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateWirelessConfigWithBodyWithResponse is a helper method to define mock.On call
//   - ctx
//   - contentType
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) CreateWirelessConfigWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateWirelessConfigWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateWirelessConfigWithBodyWithResponse_Call{Call: _e.mock.On("CreateWirelessConfigWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateWirelessConfigWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_CreateWirelessConfigWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateWirelessConfigWithBodyWithResponse_Call) Return(createWirelessConfigResponse *CreateWirelessConfigResponse, err error) *MockClientWithResponsesInterface_CreateWirelessConfigWithBodyWithResponse_Call {
	_c.Call.Return(createWirelessConfigResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateWirelessConfigWithBodyWithResponse_Call) RunAndReturn(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWirelessConfigResponse, error)) *MockClientWithResponsesInterface_CreateWirelessConfigWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWirelessConfigWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) CreateWirelessConfigWithResponse(ctx context.Context, body CreateWirelessConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWirelessConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateWirelessConfigWithResponse")
	}

	var r0 *CreateWirelessConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateWirelessConfigJSONRequestBody, ...RequestEditorFn) (*CreateWirelessConfigResponse, error)); ok {
		return returnFunc(ctx, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateWirelessConfigJSONRequestBody, ...RequestEditorFn) *CreateWirelessConfigResponse); ok {
		r0 = returnFunc(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateWirelessConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateWirelessConfigJSONRequestBody, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_CreateWirelessConfigWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWirelessConfigWithResponse'
type MockClientWithResponsesInterface_CreateWirelessConfigWithResponse_Call struct {
	*mock.Call
}

// CreateWirelessConfigWithResponse is a helper method to define mock.On call
//   - ctx
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) CreateWirelessConfigWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_CreateWirelessConfigWithResponse_Call {
	return &MockClientWithResponsesInterface_CreateWirelessConfigWithResponse_Call{Call: _e.mock.On("CreateWirelessConfigWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_CreateWirelessConfigWithResponse_Call) Run(run func(ctx context.Context, body CreateWirelessConfigJSONRequestBody, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_CreateWirelessConfigWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(CreateWirelessConfigJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateWirelessConfigWithResponse_Call) Return(createWirelessConfigResponse *CreateWirelessConfigResponse, err error) *MockClientWithResponsesInterface_CreateWirelessConfigWithResponse_Call {
	_c.Call.Return(createWirelessConfigResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_CreateWirelessConfigWithResponse_Call) RunAndReturn(run func(ctx context.Context, body CreateWirelessConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWirelessConfigResponse, error)) *MockClientWithResponsesInterface_CreateWirelessConfigWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// Edit8021xConfigWithBodyWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) Edit8021xConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Edit8021xConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, contentType, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, contentType, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Edit8021xConfigWithBodyWithResponse")
	}

	var r0 *Edit8021xConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) (*Edit8021xConfigResponse, error)); ok {
		return returnFunc(ctx, contentType, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) *Edit8021xConfigResponse); ok {
		r0 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Edit8021xConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_Edit8021xConfigWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Edit8021xConfigWithBodyWithResponse'
type MockClientWithResponsesInterface_Edit8021xConfigWithBodyWithResponse_Call struct {
	*mock.Call
}

// Edit8021xConfigWithBodyWithResponse is a helper method to define mock.On call
//   - ctx
//   - contentType
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) Edit8021xConfigWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_Edit8021xConfigWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_Edit8021xConfigWithBodyWithResponse_Call{Call: _e.mock.On("Edit8021xConfigWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_Edit8021xConfigWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_Edit8021xConfigWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_Edit8021xConfigWithBodyWithResponse_Call) Return(edit8021xConfigResponse *Edit8021xConfigResponse, err error) *MockClientWithResponsesInterface_Edit8021xConfigWithBodyWithResponse_Call {
	_c.Call.Return(edit8021xConfigResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_Edit8021xConfigWithBodyWithResponse_Call) RunAndReturn(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Edit8021xConfigResponse, error)) *MockClientWithResponsesInterface_Edit8021xConfigWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// Edit8021xConfigWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) Edit8021xConfigWithResponse(ctx context.Context, body Edit8021xConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*Edit8021xConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Edit8021xConfigWithResponse")
	}

	var r0 *Edit8021xConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, Edit8021xConfigJSONRequestBody, ...RequestEditorFn) (*Edit8021xConfigResponse, error)); ok {
		return returnFunc(ctx, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, Edit8021xConfigJSONRequestBody, ...RequestEditorFn) *Edit8021xConfigResponse); ok {
		r0 = returnFunc(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Edit8021xConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, Edit8021xConfigJSONRequestBody, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_Edit8021xConfigWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Edit8021xConfigWithResponse'
type MockClientWithResponsesInterface_Edit8021xConfigWithResponse_Call struct {
	*mock.Call
}

// Edit8021xConfigWithResponse is a helper method to define mock.On call
//   - ctx
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) Edit8021xConfigWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_Edit8021xConfigWithResponse_Call {
	return &MockClientWithResponsesInterface_Edit8021xConfigWithResponse_Call{Call: _e.mock.On("Edit8021xConfigWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_Edit8021xConfigWithResponse_Call) Run(run func(ctx context.Context, body Edit8021xConfigJSONRequestBody, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_Edit8021xConfigWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(Edit8021xConfigJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_Edit8021xConfigWithResponse_Call) Return(edit8021xConfigResponse *Edit8021xConfigResponse, err error) *MockClientWithResponsesInterface_Edit8021xConfigWithResponse_Call {
	_c.Call.Return(edit8021xConfigResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_Edit8021xConfigWithResponse_Call) RunAndReturn(run func(ctx context.Context, body Edit8021xConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*Edit8021xConfigResponse, error)) *MockClientWithResponsesInterface_Edit8021xConfigWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// EditCIRAConfigWithBodyWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) EditCIRAConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditCIRAConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, contentType, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, contentType, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for EditCIRAConfigWithBodyWithResponse")
	}

	var r0 *EditCIRAConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) (*EditCIRAConfigResponse, error)); ok {
		return returnFunc(ctx, contentType, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) *EditCIRAConfigResponse); ok {
		r0 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EditCIRAConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_EditCIRAConfigWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditCIRAConfigWithBodyWithResponse'
type MockClientWithResponsesInterface_EditCIRAConfigWithBodyWithResponse_Call struct {
	*mock.Call
}

// EditCIRAConfigWithBodyWithResponse is a helper method to define mock.On call
//   - ctx
//   - contentType
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) EditCIRAConfigWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_EditCIRAConfigWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_EditCIRAConfigWithBodyWithResponse_Call{Call: _e.mock.On("EditCIRAConfigWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_EditCIRAConfigWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_EditCIRAConfigWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_EditCIRAConfigWithBodyWithResponse_Call) Return(editCIRAConfigResponse *EditCIRAConfigResponse, err error) *MockClientWithResponsesInterface_EditCIRAConfigWithBodyWithResponse_Call {
	_c.Call.Return(editCIRAConfigResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_EditCIRAConfigWithBodyWithResponse_Call) RunAndReturn(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditCIRAConfigResponse, error)) *MockClientWithResponsesInterface_EditCIRAConfigWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// EditCIRAConfigWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) EditCIRAConfigWithResponse(ctx context.Context, body EditCIRAConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*EditCIRAConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for EditCIRAConfigWithResponse")
	}

	var r0 *EditCIRAConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, EditCIRAConfigJSONRequestBody, ...RequestEditorFn) (*EditCIRAConfigResponse, error)); ok {
		return returnFunc(ctx, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, EditCIRAConfigJSONRequestBody, ...RequestEditorFn) *EditCIRAConfigResponse); ok {
		r0 = returnFunc(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EditCIRAConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, EditCIRAConfigJSONRequestBody, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_EditCIRAConfigWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditCIRAConfigWithResponse'
type MockClientWithResponsesInterface_EditCIRAConfigWithResponse_Call struct {
	*mock.Call
}

// EditCIRAConfigWithResponse is a helper method to define mock.On call
//   - ctx
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) EditCIRAConfigWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_EditCIRAConfigWithResponse_Call {
	return &MockClientWithResponsesInterface_EditCIRAConfigWithResponse_Call{Call: _e.mock.On("EditCIRAConfigWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_EditCIRAConfigWithResponse_Call) Run(run func(ctx context.Context, body EditCIRAConfigJSONRequestBody, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_EditCIRAConfigWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(EditCIRAConfigJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_EditCIRAConfigWithResponse_Call) Return(editCIRAConfigResponse *EditCIRAConfigResponse, err error) *MockClientWithResponsesInterface_EditCIRAConfigWithResponse_Call {
	_c.Call.Return(editCIRAConfigResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_EditCIRAConfigWithResponse_Call) RunAndReturn(run func(ctx context.Context, body EditCIRAConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*EditCIRAConfigResponse, error)) *MockClientWithResponsesInterface_EditCIRAConfigWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// EditWirelessConfigWithBodyWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) EditWirelessConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditWirelessConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, contentType, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, contentType, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for EditWirelessConfigWithBodyWithResponse")
	}

	var r0 *EditWirelessConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) (*EditWirelessConfigResponse, error)); ok {
		return returnFunc(ctx, contentType, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) *EditWirelessConfigResponse); ok {
		r0 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EditWirelessConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_EditWirelessConfigWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditWirelessConfigWithBodyWithResponse'
type MockClientWithResponsesInterface_EditWirelessConfigWithBodyWithResponse_Call struct {
	*mock.Call
}

// EditWirelessConfigWithBodyWithResponse is a helper method to define mock.On call
//   - ctx
//   - contentType
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) EditWirelessConfigWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_EditWirelessConfigWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_EditWirelessConfigWithBodyWithResponse_Call{Call: _e.mock.On("EditWirelessConfigWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_EditWirelessConfigWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_EditWirelessConfigWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_EditWirelessConfigWithBodyWithResponse_Call) Return(editWirelessConfigResponse *EditWirelessConfigResponse, err error) *MockClientWithResponsesInterface_EditWirelessConfigWithBodyWithResponse_Call {
	_c.Call.Return(editWirelessConfigResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_EditWirelessConfigWithBodyWithResponse_Call) RunAndReturn(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditWirelessConfigResponse, error)) *MockClientWithResponsesInterface_EditWirelessConfigWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// EditWirelessConfigWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) EditWirelessConfigWithResponse(ctx context.Context, body EditWirelessConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*EditWirelessConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for EditWirelessConfigWithResponse")
	}

	var r0 *EditWirelessConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, EditWirelessConfigJSONRequestBody, ...RequestEditorFn) (*EditWirelessConfigResponse, error)); ok {
		return returnFunc(ctx, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, EditWirelessConfigJSONRequestBody, ...RequestEditorFn) *EditWirelessConfigResponse); ok {
		r0 = returnFunc(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EditWirelessConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, EditWirelessConfigJSONRequestBody, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_EditWirelessConfigWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditWirelessConfigWithResponse'
type MockClientWithResponsesInterface_EditWirelessConfigWithResponse_Call struct {
	*mock.Call
}

// EditWirelessConfigWithResponse is a helper method to define mock.On call
//   - ctx
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) EditWirelessConfigWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_EditWirelessConfigWithResponse_Call {
	return &MockClientWithResponsesInterface_EditWirelessConfigWithResponse_Call{Call: _e.mock.On("EditWirelessConfigWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_EditWirelessConfigWithResponse_Call) Run(run func(ctx context.Context, body EditWirelessConfigJSONRequestBody, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_EditWirelessConfigWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(EditWirelessConfigJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_EditWirelessConfigWithResponse_Call) Return(editWirelessConfigResponse *EditWirelessConfigResponse, err error) *MockClientWithResponsesInterface_EditWirelessConfigWithResponse_Call {
	_c.Call.Return(editWirelessConfigResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_EditWirelessConfigWithResponse_Call) RunAndReturn(run func(ctx context.Context, body EditWirelessConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*EditWirelessConfigResponse, error)) *MockClientWithResponsesInterface_EditWirelessConfigWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// Get8021xConfigWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) Get8021xConfigWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*Get8021xConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, profileName, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, profileName)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Get8021xConfigWithResponse")
	}

	var r0 *Get8021xConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*Get8021xConfigResponse, error)); ok {
		return returnFunc(ctx, profileName, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *Get8021xConfigResponse); ok {
		r0 = returnFunc(ctx, profileName, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Get8021xConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, profileName, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_Get8021xConfigWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get8021xConfigWithResponse'
type MockClientWithResponsesInterface_Get8021xConfigWithResponse_Call struct {
	*mock.Call
}

// Get8021xConfigWithResponse is a helper method to define mock.On call
//   - ctx
//   - profileName
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) Get8021xConfigWithResponse(ctx interface{}, profileName interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_Get8021xConfigWithResponse_Call {
	return &MockClientWithResponsesInterface_Get8021xConfigWithResponse_Call{Call: _e.mock.On("Get8021xConfigWithResponse",
		append([]interface{}{ctx, profileName}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_Get8021xConfigWithResponse_Call) Run(run func(ctx context.Context, profileName string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_Get8021xConfigWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_Get8021xConfigWithResponse_Call) Return(get8021xConfigResponse *Get8021xConfigResponse, err error) *MockClientWithResponsesInterface_Get8021xConfigWithResponse_Call {
	_c.Call.Return(get8021xConfigResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_Get8021xConfigWithResponse_Call) RunAndReturn(run func(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*Get8021xConfigResponse, error)) *MockClientWithResponsesInterface_Get8021xConfigWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll8021xConfigsWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetAll8021xConfigsWithResponse(ctx context.Context, params *GetAll8021xConfigsParams, reqEditors ...RequestEditorFn) (*GetAll8021xConfigsResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, params, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAll8021xConfigsWithResponse")
	}

	var r0 *GetAll8021xConfigsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetAll8021xConfigsParams, ...RequestEditorFn) (*GetAll8021xConfigsResponse, error)); ok {
		return returnFunc(ctx, params, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetAll8021xConfigsParams, ...RequestEditorFn) *GetAll8021xConfigsResponse); ok {
		r0 = returnFunc(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetAll8021xConfigsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetAll8021xConfigsParams, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetAll8021xConfigsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll8021xConfigsWithResponse'
type MockClientWithResponsesInterface_GetAll8021xConfigsWithResponse_Call struct {
	*mock.Call
}

// GetAll8021xConfigsWithResponse is a helper method to define mock.On call
//   - ctx
//   - params
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetAll8021xConfigsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetAll8021xConfigsWithResponse_Call {
	return &MockClientWithResponsesInterface_GetAll8021xConfigsWithResponse_Call{Call: _e.mock.On("GetAll8021xConfigsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetAll8021xConfigsWithResponse_Call) Run(run func(ctx context.Context, params *GetAll8021xConfigsParams, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetAll8021xConfigsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(*GetAll8021xConfigsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetAll8021xConfigsWithResponse_Call) Return(getAll8021xConfigsResponse *GetAll8021xConfigsResponse, err error) *MockClientWithResponsesInterface_GetAll8021xConfigsWithResponse_Call {
	_c.Call.Return(getAll8021xConfigsResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetAll8021xConfigsWithResponse_Call) RunAndReturn(run func(ctx context.Context, params *GetAll8021xConfigsParams, reqEditors ...RequestEditorFn) (*GetAll8021xConfigsResponse, error)) *MockClientWithResponsesInterface_GetAll8021xConfigsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCIRAConfigsWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetAllCIRAConfigsWithResponse(ctx context.Context, params *GetAllCIRAConfigsParams, reqEditors ...RequestEditorFn) (*GetAllCIRAConfigsResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, params, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllCIRAConfigsWithResponse")
	}

	var r0 *GetAllCIRAConfigsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetAllCIRAConfigsParams, ...RequestEditorFn) (*GetAllCIRAConfigsResponse, error)); ok {
		return returnFunc(ctx, params, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetAllCIRAConfigsParams, ...RequestEditorFn) *GetAllCIRAConfigsResponse); ok {
		r0 = returnFunc(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetAllCIRAConfigsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetAllCIRAConfigsParams, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetAllCIRAConfigsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCIRAConfigsWithResponse'
type MockClientWithResponsesInterface_GetAllCIRAConfigsWithResponse_Call struct {
	*mock.Call
}

// GetAllCIRAConfigsWithResponse is a helper method to define mock.On call
//   - ctx
//   - params
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetAllCIRAConfigsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetAllCIRAConfigsWithResponse_Call {
	return &MockClientWithResponsesInterface_GetAllCIRAConfigsWithResponse_Call{Call: _e.mock.On("GetAllCIRAConfigsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetAllCIRAConfigsWithResponse_Call) Run(run func(ctx context.Context, params *GetAllCIRAConfigsParams, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetAllCIRAConfigsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(*GetAllCIRAConfigsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetAllCIRAConfigsWithResponse_Call) Return(getAllCIRAConfigsResponse *GetAllCIRAConfigsResponse, err error) *MockClientWithResponsesInterface_GetAllCIRAConfigsWithResponse_Call {
	_c.Call.Return(getAllCIRAConfigsResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetAllCIRAConfigsWithResponse_Call) RunAndReturn(run func(ctx context.Context, params *GetAllCIRAConfigsParams, reqEditors ...RequestEditorFn) (*GetAllCIRAConfigsResponse, error)) *MockClientWithResponsesInterface_GetAllCIRAConfigsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllDomainsWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetAllDomainsWithResponse(ctx context.Context, params *GetAllDomainsParams, reqEditors ...RequestEditorFn) (*GetAllDomainsResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, params, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllDomainsWithResponse")
	}

	var r0 *GetAllDomainsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetAllDomainsParams, ...RequestEditorFn) (*GetAllDomainsResponse, error)); ok {
		return returnFunc(ctx, params, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetAllDomainsParams, ...RequestEditorFn) *GetAllDomainsResponse); ok {
		r0 = returnFunc(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetAllDomainsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetAllDomainsParams, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetAllDomainsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDomainsWithResponse'
type MockClientWithResponsesInterface_GetAllDomainsWithResponse_Call struct {
	*mock.Call
}

// GetAllDomainsWithResponse is a helper method to define mock.On call
//   - ctx
//   - params
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetAllDomainsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetAllDomainsWithResponse_Call {
	return &MockClientWithResponsesInterface_GetAllDomainsWithResponse_Call{Call: _e.mock.On("GetAllDomainsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetAllDomainsWithResponse_Call) Run(run func(ctx context.Context, params *GetAllDomainsParams, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetAllDomainsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(*GetAllDomainsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetAllDomainsWithResponse_Call) Return(getAllDomainsResponse *GetAllDomainsResponse, err error) *MockClientWithResponsesInterface_GetAllDomainsWithResponse_Call {
	_c.Call.Return(getAllDomainsResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetAllDomainsWithResponse_Call) RunAndReturn(run func(ctx context.Context, params *GetAllDomainsParams, reqEditors ...RequestEditorFn) (*GetAllDomainsResponse, error)) *MockClientWithResponsesInterface_GetAllDomainsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllProfilesWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetAllProfilesWithResponse(ctx context.Context, params *GetAllProfilesParams, reqEditors ...RequestEditorFn) (*GetAllProfilesResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, params, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllProfilesWithResponse")
	}

	var r0 *GetAllProfilesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetAllProfilesParams, ...RequestEditorFn) (*GetAllProfilesResponse, error)); ok {
		return returnFunc(ctx, params, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetAllProfilesParams, ...RequestEditorFn) *GetAllProfilesResponse); ok {
		r0 = returnFunc(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetAllProfilesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetAllProfilesParams, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetAllProfilesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProfilesWithResponse'
type MockClientWithResponsesInterface_GetAllProfilesWithResponse_Call struct {
	*mock.Call
}

// GetAllProfilesWithResponse is a helper method to define mock.On call
//   - ctx
//   - params
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetAllProfilesWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetAllProfilesWithResponse_Call {
	return &MockClientWithResponsesInterface_GetAllProfilesWithResponse_Call{Call: _e.mock.On("GetAllProfilesWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetAllProfilesWithResponse_Call) Run(run func(ctx context.Context, params *GetAllProfilesParams, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetAllProfilesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(*GetAllProfilesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetAllProfilesWithResponse_Call) Return(getAllProfilesResponse *GetAllProfilesResponse, err error) *MockClientWithResponsesInterface_GetAllProfilesWithResponse_Call {
	_c.Call.Return(getAllProfilesResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetAllProfilesWithResponse_Call) RunAndReturn(run func(ctx context.Context, params *GetAllProfilesParams, reqEditors ...RequestEditorFn) (*GetAllProfilesResponse, error)) *MockClientWithResponsesInterface_GetAllProfilesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllWirelessConfigsWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetAllWirelessConfigsWithResponse(ctx context.Context, params *GetAllWirelessConfigsParams, reqEditors ...RequestEditorFn) (*GetAllWirelessConfigsResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, params, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAllWirelessConfigsWithResponse")
	}

	var r0 *GetAllWirelessConfigsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetAllWirelessConfigsParams, ...RequestEditorFn) (*GetAllWirelessConfigsResponse, error)); ok {
		return returnFunc(ctx, params, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetAllWirelessConfigsParams, ...RequestEditorFn) *GetAllWirelessConfigsResponse); ok {
		r0 = returnFunc(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetAllWirelessConfigsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetAllWirelessConfigsParams, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetAllWirelessConfigsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllWirelessConfigsWithResponse'
type MockClientWithResponsesInterface_GetAllWirelessConfigsWithResponse_Call struct {
	*mock.Call
}

// GetAllWirelessConfigsWithResponse is a helper method to define mock.On call
//   - ctx
//   - params
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetAllWirelessConfigsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetAllWirelessConfigsWithResponse_Call {
	return &MockClientWithResponsesInterface_GetAllWirelessConfigsWithResponse_Call{Call: _e.mock.On("GetAllWirelessConfigsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetAllWirelessConfigsWithResponse_Call) Run(run func(ctx context.Context, params *GetAllWirelessConfigsParams, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetAllWirelessConfigsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(*GetAllWirelessConfigsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetAllWirelessConfigsWithResponse_Call) Return(getAllWirelessConfigsResponse *GetAllWirelessConfigsResponse, err error) *MockClientWithResponsesInterface_GetAllWirelessConfigsWithResponse_Call {
	_c.Call.Return(getAllWirelessConfigsResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetAllWirelessConfigsWithResponse_Call) RunAndReturn(run func(ctx context.Context, params *GetAllWirelessConfigsParams, reqEditors ...RequestEditorFn) (*GetAllWirelessConfigsResponse, error)) *MockClientWithResponsesInterface_GetAllWirelessConfigsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV1AdminHealthWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetApiV1AdminHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AdminHealthResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetApiV1AdminHealthWithResponse")
	}

	var r0 *GetApiV1AdminHealthResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...RequestEditorFn) (*GetApiV1AdminHealthResponse, error)); ok {
		return returnFunc(ctx, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...RequestEditorFn) *GetApiV1AdminHealthResponse); ok {
		r0 = returnFunc(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetApiV1AdminHealthResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetApiV1AdminHealthWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1AdminHealthWithResponse'
type MockClientWithResponsesInterface_GetApiV1AdminHealthWithResponse_Call struct {
	*mock.Call
}

// GetApiV1AdminHealthWithResponse is a helper method to define mock.On call
//   - ctx
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetApiV1AdminHealthWithResponse(ctx interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetApiV1AdminHealthWithResponse_Call {
	return &MockClientWithResponsesInterface_GetApiV1AdminHealthWithResponse_Call{Call: _e.mock.On("GetApiV1AdminHealthWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetApiV1AdminHealthWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetApiV1AdminHealthWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]RequestEditorFn)
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AdminHealthWithResponse_Call) Return(getApiV1AdminHealthResponse *GetApiV1AdminHealthResponse, err error) *MockClientWithResponsesInterface_GetApiV1AdminHealthWithResponse_Call {
	_c.Call.Return(getApiV1AdminHealthResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetApiV1AdminHealthWithResponse_Call) RunAndReturn(run func(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AdminHealthResponse, error)) *MockClientWithResponsesInterface_GetApiV1AdminHealthWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetCIRAConfigWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetCIRAConfigWithResponse(ctx context.Context, configName string, reqEditors ...RequestEditorFn) (*GetCIRAConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, configName, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, configName)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetCIRAConfigWithResponse")
	}

	var r0 *GetCIRAConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetCIRAConfigResponse, error)); ok {
		return returnFunc(ctx, configName, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetCIRAConfigResponse); ok {
		r0 = returnFunc(ctx, configName, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetCIRAConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, configName, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetCIRAConfigWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCIRAConfigWithResponse'
type MockClientWithResponsesInterface_GetCIRAConfigWithResponse_Call struct {
	*mock.Call
}

// GetCIRAConfigWithResponse is a helper method to define mock.On call
//   - ctx
//   - configName
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetCIRAConfigWithResponse(ctx interface{}, configName interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetCIRAConfigWithResponse_Call {
	return &MockClientWithResponsesInterface_GetCIRAConfigWithResponse_Call{Call: _e.mock.On("GetCIRAConfigWithResponse",
		append([]interface{}{ctx, configName}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetCIRAConfigWithResponse_Call) Run(run func(ctx context.Context, configName string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetCIRAConfigWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetCIRAConfigWithResponse_Call) Return(getCIRAConfigResponse *GetCIRAConfigResponse, err error) *MockClientWithResponsesInterface_GetCIRAConfigWithResponse_Call {
	_c.Call.Return(getCIRAConfigResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetCIRAConfigWithResponse_Call) RunAndReturn(run func(ctx context.Context, configName string, reqEditors ...RequestEditorFn) (*GetCIRAConfigResponse, error)) *MockClientWithResponsesInterface_GetCIRAConfigWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetDomainWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetDomainWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*GetDomainResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, profileName, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, profileName)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetDomainWithResponse")
	}

	var r0 *GetDomainResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetDomainResponse, error)); ok {
		return returnFunc(ctx, profileName, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetDomainResponse); ok {
		r0 = returnFunc(ctx, profileName, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetDomainResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, profileName, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetDomainWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDomainWithResponse'
type MockClientWithResponsesInterface_GetDomainWithResponse_Call struct {
	*mock.Call
}

// GetDomainWithResponse is a helper method to define mock.On call
//   - ctx
//   - profileName
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetDomainWithResponse(ctx interface{}, profileName interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetDomainWithResponse_Call {
	return &MockClientWithResponsesInterface_GetDomainWithResponse_Call{Call: _e.mock.On("GetDomainWithResponse",
		append([]interface{}{ctx, profileName}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetDomainWithResponse_Call) Run(run func(ctx context.Context, profileName string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetDomainWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetDomainWithResponse_Call) Return(getDomainResponse *GetDomainResponse, err error) *MockClientWithResponsesInterface_GetDomainWithResponse_Call {
	_c.Call.Return(getDomainResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetDomainWithResponse_Call) RunAndReturn(run func(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*GetDomainResponse, error)) *MockClientWithResponsesInterface_GetDomainWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetProfileWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetProfileWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*GetProfileResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, profileName, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, profileName)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetProfileWithResponse")
	}

	var r0 *GetProfileResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetProfileResponse, error)); ok {
		return returnFunc(ctx, profileName, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetProfileResponse); ok {
		r0 = returnFunc(ctx, profileName, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetProfileResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, profileName, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetProfileWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfileWithResponse'
type MockClientWithResponsesInterface_GetProfileWithResponse_Call struct {
	*mock.Call
}

// GetProfileWithResponse is a helper method to define mock.On call
//   - ctx
//   - profileName
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetProfileWithResponse(ctx interface{}, profileName interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetProfileWithResponse_Call {
	return &MockClientWithResponsesInterface_GetProfileWithResponse_Call{Call: _e.mock.On("GetProfileWithResponse",
		append([]interface{}{ctx, profileName}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetProfileWithResponse_Call) Run(run func(ctx context.Context, profileName string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetProfileWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetProfileWithResponse_Call) Return(getProfileResponse *GetProfileResponse, err error) *MockClientWithResponsesInterface_GetProfileWithResponse_Call {
	_c.Call.Return(getProfileResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetProfileWithResponse_Call) RunAndReturn(run func(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*GetProfileResponse, error)) *MockClientWithResponsesInterface_GetProfileWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersionWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetVersionWithResponse")
	}

	var r0 *GetVersionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...RequestEditorFn) (*GetVersionResponse, error)); ok {
		return returnFunc(ctx, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...RequestEditorFn) *GetVersionResponse); ok {
		r0 = returnFunc(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetVersionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetVersionWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersionWithResponse'
type MockClientWithResponsesInterface_GetVersionWithResponse_Call struct {
	*mock.Call
}

// GetVersionWithResponse is a helper method to define mock.On call
//   - ctx
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetVersionWithResponse(ctx interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetVersionWithResponse_Call {
	return &MockClientWithResponsesInterface_GetVersionWithResponse_Call{Call: _e.mock.On("GetVersionWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetVersionWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetVersionWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]RequestEditorFn)
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetVersionWithResponse_Call) Return(getVersionResponse *GetVersionResponse, err error) *MockClientWithResponsesInterface_GetVersionWithResponse_Call {
	_c.Call.Return(getVersionResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetVersionWithResponse_Call) RunAndReturn(run func(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)) *MockClientWithResponsesInterface_GetVersionWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetWirelessConfigWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) GetWirelessConfigWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*GetWirelessConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, profileName, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, profileName)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetWirelessConfigWithResponse")
	}

	var r0 *GetWirelessConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*GetWirelessConfigResponse, error)); ok {
		return returnFunc(ctx, profileName, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *GetWirelessConfigResponse); ok {
		r0 = returnFunc(ctx, profileName, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetWirelessConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, profileName, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_GetWirelessConfigWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWirelessConfigWithResponse'
type MockClientWithResponsesInterface_GetWirelessConfigWithResponse_Call struct {
	*mock.Call
}

// GetWirelessConfigWithResponse is a helper method to define mock.On call
//   - ctx
//   - profileName
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) GetWirelessConfigWithResponse(ctx interface{}, profileName interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetWirelessConfigWithResponse_Call {
	return &MockClientWithResponsesInterface_GetWirelessConfigWithResponse_Call{Call: _e.mock.On("GetWirelessConfigWithResponse",
		append([]interface{}{ctx, profileName}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetWirelessConfigWithResponse_Call) Run(run func(ctx context.Context, profileName string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_GetWirelessConfigWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetWirelessConfigWithResponse_Call) Return(getWirelessConfigResponse *GetWirelessConfigResponse, err error) *MockClientWithResponsesInterface_GetWirelessConfigWithResponse_Call {
	_c.Call.Return(getWirelessConfigResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetWirelessConfigWithResponse_Call) RunAndReturn(run func(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*GetWirelessConfigResponse, error)) *MockClientWithResponsesInterface_GetWirelessConfigWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// Remove8021xConfigWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) Remove8021xConfigWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*Remove8021xConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, profileName, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, profileName)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Remove8021xConfigWithResponse")
	}

	var r0 *Remove8021xConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*Remove8021xConfigResponse, error)); ok {
		return returnFunc(ctx, profileName, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *Remove8021xConfigResponse); ok {
		r0 = returnFunc(ctx, profileName, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Remove8021xConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, profileName, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_Remove8021xConfigWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove8021xConfigWithResponse'
type MockClientWithResponsesInterface_Remove8021xConfigWithResponse_Call struct {
	*mock.Call
}

// Remove8021xConfigWithResponse is a helper method to define mock.On call
//   - ctx
//   - profileName
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) Remove8021xConfigWithResponse(ctx interface{}, profileName interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_Remove8021xConfigWithResponse_Call {
	return &MockClientWithResponsesInterface_Remove8021xConfigWithResponse_Call{Call: _e.mock.On("Remove8021xConfigWithResponse",
		append([]interface{}{ctx, profileName}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_Remove8021xConfigWithResponse_Call) Run(run func(ctx context.Context, profileName string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_Remove8021xConfigWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_Remove8021xConfigWithResponse_Call) Return(remove8021xConfigResponse *Remove8021xConfigResponse, err error) *MockClientWithResponsesInterface_Remove8021xConfigWithResponse_Call {
	_c.Call.Return(remove8021xConfigResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_Remove8021xConfigWithResponse_Call) RunAndReturn(run func(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*Remove8021xConfigResponse, error)) *MockClientWithResponsesInterface_Remove8021xConfigWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveCIRAConfigWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) RemoveCIRAConfigWithResponse(ctx context.Context, configName string, reqEditors ...RequestEditorFn) (*RemoveCIRAConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, configName, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, configName)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemoveCIRAConfigWithResponse")
	}

	var r0 *RemoveCIRAConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*RemoveCIRAConfigResponse, error)); ok {
		return returnFunc(ctx, configName, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *RemoveCIRAConfigResponse); ok {
		r0 = returnFunc(ctx, configName, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RemoveCIRAConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, configName, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_RemoveCIRAConfigWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveCIRAConfigWithResponse'
type MockClientWithResponsesInterface_RemoveCIRAConfigWithResponse_Call struct {
	*mock.Call
}

// RemoveCIRAConfigWithResponse is a helper method to define mock.On call
//   - ctx
//   - configName
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) RemoveCIRAConfigWithResponse(ctx interface{}, configName interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_RemoveCIRAConfigWithResponse_Call {
	return &MockClientWithResponsesInterface_RemoveCIRAConfigWithResponse_Call{Call: _e.mock.On("RemoveCIRAConfigWithResponse",
		append([]interface{}{ctx, configName}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_RemoveCIRAConfigWithResponse_Call) Run(run func(ctx context.Context, configName string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_RemoveCIRAConfigWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_RemoveCIRAConfigWithResponse_Call) Return(removeCIRAConfigResponse *RemoveCIRAConfigResponse, err error) *MockClientWithResponsesInterface_RemoveCIRAConfigWithResponse_Call {
	_c.Call.Return(removeCIRAConfigResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_RemoveCIRAConfigWithResponse_Call) RunAndReturn(run func(ctx context.Context, configName string, reqEditors ...RequestEditorFn) (*RemoveCIRAConfigResponse, error)) *MockClientWithResponsesInterface_RemoveCIRAConfigWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveDomainWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) RemoveDomainWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*RemoveDomainResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, profileName, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, profileName)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemoveDomainWithResponse")
	}

	var r0 *RemoveDomainResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*RemoveDomainResponse, error)); ok {
		return returnFunc(ctx, profileName, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *RemoveDomainResponse); ok {
		r0 = returnFunc(ctx, profileName, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RemoveDomainResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, profileName, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_RemoveDomainWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveDomainWithResponse'
type MockClientWithResponsesInterface_RemoveDomainWithResponse_Call struct {
	*mock.Call
}

// RemoveDomainWithResponse is a helper method to define mock.On call
//   - ctx
//   - profileName
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) RemoveDomainWithResponse(ctx interface{}, profileName interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_RemoveDomainWithResponse_Call {
	return &MockClientWithResponsesInterface_RemoveDomainWithResponse_Call{Call: _e.mock.On("RemoveDomainWithResponse",
		append([]interface{}{ctx, profileName}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_RemoveDomainWithResponse_Call) Run(run func(ctx context.Context, profileName string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_RemoveDomainWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_RemoveDomainWithResponse_Call) Return(removeDomainResponse *RemoveDomainResponse, err error) *MockClientWithResponsesInterface_RemoveDomainWithResponse_Call {
	_c.Call.Return(removeDomainResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_RemoveDomainWithResponse_Call) RunAndReturn(run func(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*RemoveDomainResponse, error)) *MockClientWithResponsesInterface_RemoveDomainWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProfileWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) RemoveProfileWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*RemoveProfileResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, profileName, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, profileName)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemoveProfileWithResponse")
	}

	var r0 *RemoveProfileResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*RemoveProfileResponse, error)); ok {
		return returnFunc(ctx, profileName, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *RemoveProfileResponse); ok {
		r0 = returnFunc(ctx, profileName, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RemoveProfileResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, profileName, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_RemoveProfileWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProfileWithResponse'
type MockClientWithResponsesInterface_RemoveProfileWithResponse_Call struct {
	*mock.Call
}

// RemoveProfileWithResponse is a helper method to define mock.On call
//   - ctx
//   - profileName
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) RemoveProfileWithResponse(ctx interface{}, profileName interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_RemoveProfileWithResponse_Call {
	return &MockClientWithResponsesInterface_RemoveProfileWithResponse_Call{Call: _e.mock.On("RemoveProfileWithResponse",
		append([]interface{}{ctx, profileName}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_RemoveProfileWithResponse_Call) Run(run func(ctx context.Context, profileName string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_RemoveProfileWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_RemoveProfileWithResponse_Call) Return(removeProfileResponse *RemoveProfileResponse, err error) *MockClientWithResponsesInterface_RemoveProfileWithResponse_Call {
	_c.Call.Return(removeProfileResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_RemoveProfileWithResponse_Call) RunAndReturn(run func(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*RemoveProfileResponse, error)) *MockClientWithResponsesInterface_RemoveProfileWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveWirelessConfigWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) RemoveWirelessConfigWithResponse(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*RemoveWirelessConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, profileName, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, profileName)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemoveWirelessConfigWithResponse")
	}

	var r0 *RemoveWirelessConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) (*RemoveWirelessConfigResponse, error)); ok {
		return returnFunc(ctx, profileName, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...RequestEditorFn) *RemoveWirelessConfigResponse); ok {
		r0 = returnFunc(ctx, profileName, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RemoveWirelessConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, profileName, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_RemoveWirelessConfigWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveWirelessConfigWithResponse'
type MockClientWithResponsesInterface_RemoveWirelessConfigWithResponse_Call struct {
	*mock.Call
}

// RemoveWirelessConfigWithResponse is a helper method to define mock.On call
//   - ctx
//   - profileName
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) RemoveWirelessConfigWithResponse(ctx interface{}, profileName interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_RemoveWirelessConfigWithResponse_Call {
	return &MockClientWithResponsesInterface_RemoveWirelessConfigWithResponse_Call{Call: _e.mock.On("RemoveWirelessConfigWithResponse",
		append([]interface{}{ctx, profileName}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_RemoveWirelessConfigWithResponse_Call) Run(run func(ctx context.Context, profileName string, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_RemoveWirelessConfigWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_RemoveWirelessConfigWithResponse_Call) Return(removeWirelessConfigResponse *RemoveWirelessConfigResponse, err error) *MockClientWithResponsesInterface_RemoveWirelessConfigWithResponse_Call {
	_c.Call.Return(removeWirelessConfigResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_RemoveWirelessConfigWithResponse_Call) RunAndReturn(run func(ctx context.Context, profileName string, reqEditors ...RequestEditorFn) (*RemoveWirelessConfigResponse, error)) *MockClientWithResponsesInterface_RemoveWirelessConfigWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDomainSuffixWithBodyWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) UpdateDomainSuffixWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDomainSuffixResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, contentType, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, contentType, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomainSuffixWithBodyWithResponse")
	}

	var r0 *UpdateDomainSuffixResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) (*UpdateDomainSuffixResponse, error)); ok {
		return returnFunc(ctx, contentType, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) *UpdateDomainSuffixResponse); ok {
		r0 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateDomainSuffixResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_UpdateDomainSuffixWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDomainSuffixWithBodyWithResponse'
type MockClientWithResponsesInterface_UpdateDomainSuffixWithBodyWithResponse_Call struct {
	*mock.Call
}

// UpdateDomainSuffixWithBodyWithResponse is a helper method to define mock.On call
//   - ctx
//   - contentType
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) UpdateDomainSuffixWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_UpdateDomainSuffixWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_UpdateDomainSuffixWithBodyWithResponse_Call{Call: _e.mock.On("UpdateDomainSuffixWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_UpdateDomainSuffixWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_UpdateDomainSuffixWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_UpdateDomainSuffixWithBodyWithResponse_Call) Return(updateDomainSuffixResponse *UpdateDomainSuffixResponse, err error) *MockClientWithResponsesInterface_UpdateDomainSuffixWithBodyWithResponse_Call {
	_c.Call.Return(updateDomainSuffixResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_UpdateDomainSuffixWithBodyWithResponse_Call) RunAndReturn(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDomainSuffixResponse, error)) *MockClientWithResponsesInterface_UpdateDomainSuffixWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDomainSuffixWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) UpdateDomainSuffixWithResponse(ctx context.Context, body UpdateDomainSuffixJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDomainSuffixResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomainSuffixWithResponse")
	}

	var r0 *UpdateDomainSuffixResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateDomainSuffixJSONRequestBody, ...RequestEditorFn) (*UpdateDomainSuffixResponse, error)); ok {
		return returnFunc(ctx, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateDomainSuffixJSONRequestBody, ...RequestEditorFn) *UpdateDomainSuffixResponse); ok {
		r0 = returnFunc(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateDomainSuffixResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, UpdateDomainSuffixJSONRequestBody, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_UpdateDomainSuffixWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDomainSuffixWithResponse'
type MockClientWithResponsesInterface_UpdateDomainSuffixWithResponse_Call struct {
	*mock.Call
}

// UpdateDomainSuffixWithResponse is a helper method to define mock.On call
//   - ctx
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) UpdateDomainSuffixWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_UpdateDomainSuffixWithResponse_Call {
	return &MockClientWithResponsesInterface_UpdateDomainSuffixWithResponse_Call{Call: _e.mock.On("UpdateDomainSuffixWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_UpdateDomainSuffixWithResponse_Call) Run(run func(ctx context.Context, body UpdateDomainSuffixJSONRequestBody, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_UpdateDomainSuffixWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(UpdateDomainSuffixJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_UpdateDomainSuffixWithResponse_Call) Return(updateDomainSuffixResponse *UpdateDomainSuffixResponse, err error) *MockClientWithResponsesInterface_UpdateDomainSuffixWithResponse_Call {
	_c.Call.Return(updateDomainSuffixResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_UpdateDomainSuffixWithResponse_Call) RunAndReturn(run func(ctx context.Context, body UpdateDomainSuffixJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDomainSuffixResponse, error)) *MockClientWithResponsesInterface_UpdateDomainSuffixWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProfileWithBodyWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) UpdateProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProfileResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, contentType, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, contentType, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfileWithBodyWithResponse")
	}

	var r0 *UpdateProfileResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) (*UpdateProfileResponse, error)); ok {
		return returnFunc(ctx, contentType, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...RequestEditorFn) *UpdateProfileResponse); ok {
		r0 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateProfileResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_UpdateProfileWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfileWithBodyWithResponse'
type MockClientWithResponsesInterface_UpdateProfileWithBodyWithResponse_Call struct {
	*mock.Call
}

// UpdateProfileWithBodyWithResponse is a helper method to define mock.On call
//   - ctx
//   - contentType
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) UpdateProfileWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_UpdateProfileWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_UpdateProfileWithBodyWithResponse_Call{Call: _e.mock.On("UpdateProfileWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_UpdateProfileWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_UpdateProfileWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_UpdateProfileWithBodyWithResponse_Call) Return(updateProfileResponse *UpdateProfileResponse, err error) *MockClientWithResponsesInterface_UpdateProfileWithBodyWithResponse_Call {
	_c.Call.Return(updateProfileResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_UpdateProfileWithBodyWithResponse_Call) RunAndReturn(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProfileResponse, error)) *MockClientWithResponsesInterface_UpdateProfileWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProfileWithResponse provides a mock function for the type MockClientWithResponsesInterface
func (_mock *MockClientWithResponsesInterface) UpdateProfileWithResponse(ctx context.Context, body UpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProfileResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfileWithResponse")
	}

	var r0 *UpdateProfileResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateProfileJSONRequestBody, ...RequestEditorFn) (*UpdateProfileResponse, error)); ok {
		return returnFunc(ctx, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateProfileJSONRequestBody, ...RequestEditorFn) *UpdateProfileResponse); ok {
		r0 = returnFunc(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateProfileResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, UpdateProfileJSONRequestBody, ...RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientWithResponsesInterface_UpdateProfileWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfileWithResponse'
type MockClientWithResponsesInterface_UpdateProfileWithResponse_Call struct {
	*mock.Call
}

// UpdateProfileWithResponse is a helper method to define mock.On call
//   - ctx
//   - body
//   - reqEditors
func (_e *MockClientWithResponsesInterface_Expecter) UpdateProfileWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_UpdateProfileWithResponse_Call {
	return &MockClientWithResponsesInterface_UpdateProfileWithResponse_Call{Call: _e.mock.On("UpdateProfileWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_UpdateProfileWithResponse_Call) Run(run func(ctx context.Context, body UpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn)) *MockClientWithResponsesInterface_UpdateProfileWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]RequestEditorFn)
		run(args[0].(context.Context), args[1].(UpdateProfileJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_UpdateProfileWithResponse_Call) Return(updateProfileResponse *UpdateProfileResponse, err error) *MockClientWithResponsesInterface_UpdateProfileWithResponse_Call {
	_c.Call.Return(updateProfileResponse, err)
	return _c
}

func (_c *MockClientWithResponsesInterface_UpdateProfileWithResponse_Call) RunAndReturn(run func(ctx context.Context, body UpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProfileResponse, error)) *MockClientWithResponsesInterface_UpdateProfileWithResponse_Call {
	_c.Call.Return(run)
	return _c
}
