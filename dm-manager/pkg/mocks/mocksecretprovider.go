// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockSecretProvider creates a new instance of MockSecretProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecretProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecretProvider {
	mock := &MockSecretProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSecretProvider is an autogenerated mock type for the SecretProvider type
type MockSecretProvider struct {
	mock.Mock
}

type MockSecretProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecretProvider) EXPECT() *MockSecretProvider_Expecter {
	return &MockSecretProvider_Expecter{mock: &_m.Mock}
}

// GetSecret provides a mock function for the type MockSecretProvider
func (_mock *MockSecretProvider) GetSecret(secretName string, secretKey string) string {
	ret := _mock.Called(secretName, secretKey)

	if len(ret) == 0 {
		panic("no return value specified for GetSecret")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(secretName, secretKey)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSecretProvider_GetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecret'
type MockSecretProvider_GetSecret_Call struct {
	*mock.Call
}

// GetSecret is a helper method to define mock.On call
//   - secretName
//   - secretKey
func (_e *MockSecretProvider_Expecter) GetSecret(secretName interface{}, secretKey interface{}) *MockSecretProvider_GetSecret_Call {
	return &MockSecretProvider_GetSecret_Call{Call: _e.mock.On("GetSecret", secretName, secretKey)}
}

func (_c *MockSecretProvider_GetSecret_Call) Run(run func(secretName string, secretKey string)) *MockSecretProvider_GetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockSecretProvider_GetSecret_Call) Return(s string) *MockSecretProvider_GetSecret_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSecretProvider_GetSecret_Call) RunAndReturn(run func(secretName string, secretKey string) string) *MockSecretProvider_GetSecret_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function for the type MockSecretProvider
func (_mock *MockSecretProvider) Init(ctx context.Context, secretName []string) error {
	ret := _mock.Called(ctx, secretName)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = returnFunc(ctx, secretName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSecretProvider_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockSecretProvider_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - ctx
//   - secretName
func (_e *MockSecretProvider_Expecter) Init(ctx interface{}, secretName interface{}) *MockSecretProvider_Init_Call {
	return &MockSecretProvider_Init_Call{Call: _e.mock.On("Init", ctx, secretName)}
}

func (_c *MockSecretProvider_Init_Call) Run(run func(ctx context.Context, secretName []string)) *MockSecretProvider_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockSecretProvider_Init_Call) Return(err error) *MockSecretProvider_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSecretProvider_Init_Call) RunAndReturn(run func(ctx context.Context, secretName []string) error) *MockSecretProvider_Init_Call {
	_c.Call.Return(run)
	return _c
}
