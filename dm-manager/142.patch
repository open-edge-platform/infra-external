From 29c0b943ac7245b7118d9d07ed414322e3703f85 Mon Sep 17 00:00:00 2001
From: Ramakrishna Srinivasamurthy <ramakrishna.srinivasamurthy@intel.com>
Date: Wed, 23 Jul 2025 17:46:19 +0530
Subject: [PATCH 1/2] Recociler changes for the AMT activation and deactivation

Signed-off-by: Ramakrishna Srinivasamurthy <ramakrishna.srinivasamurthy@intel.com>
---
 dm-manager/cmd/dm-manager.go         |   7 +-
 dm-manager/pkg/device/device.go      | 111 +++++++++++++++++++++++++++
 dm-manager/pkg/device/device_test.go |  71 +++++++++++++++++
 3 files changed, 187 insertions(+), 2 deletions(-)

diff --git a/dm-manager/cmd/dm-manager.go b/dm-manager/cmd/dm-manager.go
index 8402bb31..df411f56 100644
--- a/dm-manager/cmd/dm-manager.go
+++ b/dm-manager/cmd/dm-manager.go
@@ -182,7 +182,7 @@ func getTenantController(
 }
 
 func getDeviceController(mpsClient *mps.ClientWithResponses) device.Controller {
-	rmClient, deviceEventsWatcher := prepareInventoryClients()
+	rmClient, deviceEventsWatcher, internalWatcher := prepareInventoryClients()
 
 	deviceReconciler := device.Controller{
 		MpsClient:               mpsClient,
@@ -194,6 +194,7 @@ func getDeviceController(mpsClient *mps.ClientWithResponses) device.Controller {
 		RequestTimeout:          *requestTimeout,
 		StatusChangeGracePeriod: *statusChangeGracePeriod,
 		EventsWatcher:           deviceEventsWatcher,
+		InternalWatcher:         internalWatcher,
 	}
 	deviceController := rec_v2.NewController[device.ID](
 		deviceReconciler.Reconcile,
@@ -277,8 +278,10 @@ func prepareTenantAwareClient() (
 func prepareInventoryClients() (
 	rmClient invClient.TenantAwareInventoryClient,
 	eventsWatcher chan *invClient.WatchEvents,
+	internalWatcher chan *invClient.ResourceTenantIDCarrier,
 ) {
 	eventsWatcher = make(chan *invClient.WatchEvents, eventsWatcherBufSize)
+	internalWatcher = make(chan *invClient.ResourceTenantIDCarrier, eventsWatcherBufSize)
 	rmClient, err := invClient.NewTenantAwareInventoryClient(context.Background(), invClient.InventoryClientConfig{
 		Name:                      "DM RM manager",
 		Address:                   *inventoryAddress,
@@ -303,7 +306,7 @@ func prepareInventoryClients() (
 		log.Fatal().Err(err).Msgf("cannot create inventory client")
 	}
 
-	return rmClient, eventsWatcher
+	return rmClient, eventsWatcher, internalWatcher
 }
 
 func setupOamServer(enableTracing bool, oamservaddr string) {
diff --git a/dm-manager/pkg/device/device.go b/dm-manager/pkg/device/device.go
index 6aec1804..1be59cfb 100644
--- a/dm-manager/pkg/device/device.go
+++ b/dm-manager/pkg/device/device.go
@@ -23,6 +23,7 @@ import (
 	"github.com/open-edge-platform/infra-core/inventory/v2/pkg/client"
 	"github.com/open-edge-platform/infra-core/inventory/v2/pkg/errors"
 	"github.com/open-edge-platform/infra-core/inventory/v2/pkg/logging"
+	"github.com/open-edge-platform/infra-core/inventory/v2/pkg/util"
 	inv_util "github.com/open-edge-platform/infra-core/inventory/v2/pkg/util"
 	"github.com/open-edge-platform/infra-external/dm-manager/pkg/api/mps"
 	rec_v2 "github.com/open-edge-platform/orch-library/go/pkg/controller/v2"
@@ -138,6 +139,7 @@ type Controller struct {
 	TermChan          chan bool
 	ReadyChan         chan bool
 	EventsWatcher     chan *client.WatchEvents
+	InternalWatcher   chan *client.ResourceTenantIDCarrier
 	WaitGroup         *sync.WaitGroup
 	DeviceController  *rec_v2.Controller[ID]
 
@@ -182,6 +184,16 @@ func (dc *Controller) Start() {
 func (dc *Controller) ReconcileAll() {
 	ctx, cancel := context.WithTimeout(context.Background(), dc.RequestTimeout)
 	defer cancel()
+	select {
+	case ev, ok := <-dc.InternalWatcher:
+		if !ok {
+			log.Debug().Msgf("internal watcher closed")
+		}
+		log.Debug().Msgf("Internal event reconciliation of devices started")
+		dc.handleInternalEvent(ev)
+	default:
+		log.Debug().Msgf("Not internal events to reconcile")
+	}
 	hosts, err := dc.InventoryRmClient.ListAll(ctx, &inventoryv1.ResourceFilter{
 		Resource: &inventoryv1.Resource{Resource: &inventoryv1.Resource_Host{}},
 	})
@@ -199,6 +211,30 @@ func (dc *Controller) ReconcileAll() {
 	log.Debug().Msgf("reconciliation of devices is done")
 }
 
+func (dc *Controller) handleInternalEvent(event *client.ResourceTenantIDCarrier) {
+	log.Debug().Msgf("Internal event [tenantID=%s, resourceID=%s]", event.TenantId, event.ResourceId)
+
+	if err := dc.reconcileResource(event.TenantId, event.ResourceId); err != nil {
+		log.InfraSec().InfraErr(err).Msgf("reconciliation resource failed")
+	}
+}
+
+func (dc *Controller) reconcileResource(tenantID, resourceID string) error {
+	expectedKind, err := util.GetResourceKindFromResourceID(resourceID)
+	if err != nil {
+		return fmt.Errorf("unknown resource kind for resource ID %s: %w", resourceID, err)
+	}
+
+	log.Debug().Msgf("Reconciling resource (%s) of kind=%s",
+		fmt.Sprintf("[tenantID=%s, resourceID=%s]", tenantID, resourceID), expectedKind)
+
+	err = dc.DeviceController.Reconcile(NewID(tenantID, resourceID))
+	if err != nil {
+		log.Err(err).Msgf("Failed to reconcile internal event")
+	}
+	return nil
+}
+
 func (dc *Controller) Stop() {
 	dc.WaitGroup.Done()
 }
@@ -217,6 +253,49 @@ func (dc *Controller) Reconcile(ctx context.Context, request rec_v2.Request[ID])
 		invHost.GetCurrentAmtState().String(), invHost.GetCurrentPowerState().String(), request.ID)
 
 	switch {
+	case invHost.GetCurrentAmtState() == computev1.AmtState_AMT_STATE_UNSPECIFIED &&
+		invHost.GetDesiredAmtState() == computev1.AmtState_AMT_STATE_UNPROVISIONED:
+		log.Debug().Msgf("AMT device is capable and update state to unprovisioned for %v ", request.ID)
+		err = dc.updateHost(ctx, invHost.GetTenantId(), invHost.GetResourceId(),
+			&fieldmaskpb.FieldMask{Paths: []string{
+				computev1.HostResourceFieldCurrentAmtState,
+				computev1.HostResourceFieldAmtStatusIndicator,
+				computev1.HostResourceFieldAmtStatusTimestamp,
+			}}, &computev1.HostResource{
+				CurrentAmtState:    computev1.AmtState_AMT_STATE_UNPROVISIONED,
+				AmtStatus:          "Setting the AMT activation state to unprovisioned",
+				AmtStatusIndicator: statusv1.StatusIndication_STATUS_INDICATION_ERROR,
+			})
+		if err != nil {
+			log.Err(err).Msgf("Failed to update AMT state info")
+			return request.Fail(err)
+		}
+		return request.Ack()
+
+	case invHost.GetCurrentAmtState() == computev1.AmtState_AMT_STATE_UNPROVISIONED &&
+		invHost.GetDesiredAmtState() == computev1.AmtState_AMT_STATE_PROVISIONED:
+		log.Debug().Msgf("Updating AMT activation state to provisioned for %v ", request.ID)
+		err = dc.updateHost(ctx, invHost.GetTenantId(), invHost.GetResourceId(),
+			&fieldmaskpb.FieldMask{Paths: []string{
+				computev1.HostResourceFieldCurrentAmtState,
+				computev1.HostResourceFieldAmtStatusIndicator,
+				computev1.HostResourceFieldAmtStatusTimestamp,
+			}}, &computev1.HostResource{
+				CurrentAmtState:    computev1.AmtState_AMT_STATE_PROVISIONED,
+				AmtStatus:          "Setting the AMT activation state to provisioned",
+				AmtStatusIndicator: statusv1.StatusIndication_STATUS_INDICATION_IN_PROGRESS,
+			})
+		if err != nil {
+			log.Err(err).Msgf("Failed to update AMT state info")
+			return request.Fail(err)
+		}
+		return request.Ack()
+
+	case invHost.GetCurrentAmtState() == computev1.AmtState_AMT_STATE_PROVISIONED &&
+		invHost.GetDesiredAmtState() == computev1.AmtState_AMT_STATE_UNPROVISIONED:
+		log.Debug().Msgf("Setting AMT activation state to unprovisioned for %v", request.ID)
+		return dc.deactivateAMT(ctx, request, invHost)
+
 	case invHost.GetCurrentAmtState() == computev1.AmtState_AMT_STATE_PROVISIONED &&
 		invHost.GetDesiredPowerState() == invHost.GetCurrentPowerState():
 		return dc.syncPowerStatus(ctx, request, invHost)
@@ -243,7 +322,39 @@ func (dc *Controller) Reconcile(ctx context.Context, request rec_v2.Request[ID])
 	default:
 		log.Debug().Msgf("device %v is in %v [%v]", request.ID, invHost.GetCurrentAmtState(), invHost.GetCurrentPowerState())
 	}
+	return request.Ack()
+}
 
+func (dc *Controller) deactivateAMT(ctx context.Context, request rec_v2.Request[ID], invHost *computev1.HostResource) rec_v2.Directive[ID] {
+	log.Debug().Msgf("Deactivating AMT for device %s", invHost.GetUuid())
+	deactivateStatus, err := dc.MpsClient.DeleteApiV1AmtDeactivateGuidWithResponse(ctx, invHost.GetUuid())
+	if err != nil {
+		log.Err(err).Msgf("Failed to deactivate AMT for device %s", invHost.GetUuid())
+		return request.Fail(err)
+	}
+	if deactivateStatus.StatusCode() != http.StatusOK {
+		err = errors.Errorf("%v", string(deactivateStatus.Body))
+		log.Err(err).
+			Msgf("expected to get 2XX, but got %v", deactivateStatus.StatusCode())
+		if deactivateStatus.StatusCode() == http.StatusNotFound {
+			return request.Retry(err).With(rec_v2.ExponentialBackoff(minDelay, maxDelay))
+		}
+		return request.Fail(err)
+	}
+	err = dc.updateHost(ctx, invHost.GetTenantId(), invHost.GetResourceId(),
+		&fieldmaskpb.FieldMask{Paths: []string{
+			computev1.HostResourceFieldCurrentAmtState,
+			computev1.HostResourceFieldAmtStatusIndicator,
+			computev1.HostResourceFieldAmtStatusTimestamp,
+		}}, &computev1.HostResource{
+			CurrentAmtState:    computev1.AmtState_AMT_STATE_UNPROVISIONED,
+			AmtStatus:          "Setting the AMT activation state to unprovisioned",
+			AmtStatusIndicator: statusv1.StatusIndication_STATUS_INDICATION_ERROR,
+		})
+	if err != nil {
+		log.Err(err).Msgf("Failed to update AMT state info")
+		return request.Fail(err)
+	}
 	return request.Ack()
 }
 
diff --git a/dm-manager/pkg/device/device_test.go b/dm-manager/pkg/device/device_test.go
index e7544ad6..22ee5668 100644
--- a/dm-manager/pkg/device/device_test.go
+++ b/dm-manager/pkg/device/device_test.go
@@ -130,6 +130,47 @@ func prepareEnv(
 	return dao, hostUUID, mpsMock, deviceReconciller
 }
 
+func prepareAMTEnv(
+	t *testing.T, currentAMTState computev1.AmtState,
+) (*inv_testing.InvResourceDAO, string, *mps.MockClientWithResponsesInterface, Controller) {
+	t.Helper()
+	dao := inv_testing.NewInvResourceDAOOrFail(t)
+	hostUUID := uuid.NewString()
+	host := dao.CreateHostWithOpts(t, client.FakeTenantID, true, func(c *computev1.HostResource) {
+		c.CurrentAmtState = computev1.AmtState_AMT_STATE_UNSPECIFIED
+		//nolint: gosec // overflow is not going to happen
+		c.AmtStatusTimestamp = uint64(time.Unix(1750058683, 0).Unix()) // Ensuring that status in tests will always be updated
+		c.Uuid = hostUUID
+	})
+
+	_, err := dao.GetRMClient().Update(context.Background(), host.GetTenantId(), host.GetResourceId(), &fieldmaskpb.FieldMask{
+		Paths: []string{
+			computev1.HostResourceFieldCurrentAmtState, computev1.HostResourceFieldCurrentPowerState,
+		},
+	}, &inventoryv1.Resource{
+		Resource: &inventoryv1.Resource_Host{
+			Host: &computev1.HostResource{
+				CurrentAmtState: currentAMTState,
+			},
+		},
+	})
+	assert.NoError(t, err)
+
+	mpsMock := new(mps.MockClientWithResponsesInterface)
+
+	deviceReconciller := Controller{
+		MpsClient:         mpsMock,
+		InventoryRmClient: dao.GetRMClient(),
+		RequestTimeout:    time.Second,
+		ReconcilePeriod:   time.Minute,
+		ReadyChan:         make(chan bool, 1),
+	}
+	deviceController := rec_v2.NewController[ID](
+		deviceReconciller.Reconcile)
+	deviceReconciller.DeviceController = deviceController
+	return dao, hostUUID, mpsMock, deviceReconciller
+}
+
 func TestDeviceController_Start(t *testing.T) {
 	termChan := make(chan bool, 1)
 	readyChan := make(chan bool, 1)
@@ -369,3 +410,33 @@ func TestDeviceController_Reconcile_ifResponseHasNotReadyThenShouldFailRequest(t
 
 	powerHook.AssertWithTimeout(t, time.Second)
 }
+
+func TestDeviceController_Reconcile_AmtCapable(t *testing.T) {
+	dao, hostUUID, _, deviceReconciller := prepareAMTEnv(t, computev1.AmtState_AMT_STATE_UNPROVISIONED)
+
+	deviceReconciller.Reconcile(context.Background(), rec_v2.Request[ID]{ID: NewID(client.FakeTenantID, hostUUID)})
+
+	host, err := dao.GetRMClient().GetHostByUUID(context.Background(), client.FakeTenantID, hostUUID)
+	assert.NoError(t, err)
+	assert.Equal(t, computev1.AmtState_AMT_STATE_UNPROVISIONED, host.CurrentAmtState)
+}
+
+func TestDeviceController_Reconcile_AmtActivation(t *testing.T) {
+	dao, hostUUID, _, deviceReconciller := prepareAMTEnv(t, computev1.AmtState_AMT_STATE_PROVISIONED)
+
+	deviceReconciller.Reconcile(context.Background(), rec_v2.Request[ID]{ID: NewID(client.FakeTenantID, hostUUID)})
+
+	host, err := dao.GetRMClient().GetHostByUUID(context.Background(), client.FakeTenantID, hostUUID)
+	assert.NoError(t, err)
+	assert.Equal(t, computev1.AmtState_AMT_STATE_PROVISIONED, host.CurrentAmtState)
+}
+
+func TestDeviceController_Reconcile_AmtDeactivation(t *testing.T) {
+	dao, hostUUID, _, deviceReconciller := prepareAMTEnv(t, computev1.AmtState(computev1.AmtState_AMT_STATE_UNPROVISIONED))
+
+	deviceReconciller.Reconcile(context.Background(), rec_v2.Request[ID]{ID: NewID(client.FakeTenantID, hostUUID)})
+
+	host, err := dao.GetRMClient().GetHostByUUID(context.Background(), client.FakeTenantID, hostUUID)
+	assert.NoError(t, err)
+	assert.Equal(t, computev1.AmtState_AMT_STATE_UNPROVISIONED, host.CurrentAmtState)
+}

From 836bc1039e2becfa84bf4b198c43b9fd7cbff863 Mon Sep 17 00:00:00 2001
From: Ramakrishna Srinivasamurthy <ramakrishna.srinivasamurthy@intel.com>
Date: Thu, 24 Jul 2025 19:45:30 +0530
Subject: [PATCH 2/2] Remove activation status update from the device
 controller

Signed-off-by: Ramakrishna Srinivasamurthy <ramakrishna.srinivasamurthy@intel.com>
---
 dm-manager/cmd/dm-manager.go         |  7 +--
 dm-manager/pkg/device/device.go      | 74 ----------------------------
 dm-manager/pkg/device/device_test.go | 10 ----
 3 files changed, 2 insertions(+), 89 deletions(-)

diff --git a/dm-manager/cmd/dm-manager.go b/dm-manager/cmd/dm-manager.go
index df411f56..8402bb31 100644
--- a/dm-manager/cmd/dm-manager.go
+++ b/dm-manager/cmd/dm-manager.go
@@ -182,7 +182,7 @@ func getTenantController(
 }
 
 func getDeviceController(mpsClient *mps.ClientWithResponses) device.Controller {
-	rmClient, deviceEventsWatcher, internalWatcher := prepareInventoryClients()
+	rmClient, deviceEventsWatcher := prepareInventoryClients()
 
 	deviceReconciler := device.Controller{
 		MpsClient:               mpsClient,
@@ -194,7 +194,6 @@ func getDeviceController(mpsClient *mps.ClientWithResponses) device.Controller {
 		RequestTimeout:          *requestTimeout,
 		StatusChangeGracePeriod: *statusChangeGracePeriod,
 		EventsWatcher:           deviceEventsWatcher,
-		InternalWatcher:         internalWatcher,
 	}
 	deviceController := rec_v2.NewController[device.ID](
 		deviceReconciler.Reconcile,
@@ -278,10 +277,8 @@ func prepareTenantAwareClient() (
 func prepareInventoryClients() (
 	rmClient invClient.TenantAwareInventoryClient,
 	eventsWatcher chan *invClient.WatchEvents,
-	internalWatcher chan *invClient.ResourceTenantIDCarrier,
 ) {
 	eventsWatcher = make(chan *invClient.WatchEvents, eventsWatcherBufSize)
-	internalWatcher = make(chan *invClient.ResourceTenantIDCarrier, eventsWatcherBufSize)
 	rmClient, err := invClient.NewTenantAwareInventoryClient(context.Background(), invClient.InventoryClientConfig{
 		Name:                      "DM RM manager",
 		Address:                   *inventoryAddress,
@@ -306,7 +303,7 @@ func prepareInventoryClients() (
 		log.Fatal().Err(err).Msgf("cannot create inventory client")
 	}
 
-	return rmClient, eventsWatcher, internalWatcher
+	return rmClient, eventsWatcher
 }
 
 func setupOamServer(enableTracing bool, oamservaddr string) {
diff --git a/dm-manager/pkg/device/device.go b/dm-manager/pkg/device/device.go
index 1be59cfb..fcc5fb40 100644
--- a/dm-manager/pkg/device/device.go
+++ b/dm-manager/pkg/device/device.go
@@ -23,7 +23,6 @@ import (
 	"github.com/open-edge-platform/infra-core/inventory/v2/pkg/client"
 	"github.com/open-edge-platform/infra-core/inventory/v2/pkg/errors"
 	"github.com/open-edge-platform/infra-core/inventory/v2/pkg/logging"
-	"github.com/open-edge-platform/infra-core/inventory/v2/pkg/util"
 	inv_util "github.com/open-edge-platform/infra-core/inventory/v2/pkg/util"
 	"github.com/open-edge-platform/infra-external/dm-manager/pkg/api/mps"
 	rec_v2 "github.com/open-edge-platform/orch-library/go/pkg/controller/v2"
@@ -139,7 +138,6 @@ type Controller struct {
 	TermChan          chan bool
 	ReadyChan         chan bool
 	EventsWatcher     chan *client.WatchEvents
-	InternalWatcher   chan *client.ResourceTenantIDCarrier
 	WaitGroup         *sync.WaitGroup
 	DeviceController  *rec_v2.Controller[ID]
 
@@ -184,16 +182,6 @@ func (dc *Controller) Start() {
 func (dc *Controller) ReconcileAll() {
 	ctx, cancel := context.WithTimeout(context.Background(), dc.RequestTimeout)
 	defer cancel()
-	select {
-	case ev, ok := <-dc.InternalWatcher:
-		if !ok {
-			log.Debug().Msgf("internal watcher closed")
-		}
-		log.Debug().Msgf("Internal event reconciliation of devices started")
-		dc.handleInternalEvent(ev)
-	default:
-		log.Debug().Msgf("Not internal events to reconcile")
-	}
 	hosts, err := dc.InventoryRmClient.ListAll(ctx, &inventoryv1.ResourceFilter{
 		Resource: &inventoryv1.Resource{Resource: &inventoryv1.Resource_Host{}},
 	})
@@ -211,30 +199,6 @@ func (dc *Controller) ReconcileAll() {
 	log.Debug().Msgf("reconciliation of devices is done")
 }
 
-func (dc *Controller) handleInternalEvent(event *client.ResourceTenantIDCarrier) {
-	log.Debug().Msgf("Internal event [tenantID=%s, resourceID=%s]", event.TenantId, event.ResourceId)
-
-	if err := dc.reconcileResource(event.TenantId, event.ResourceId); err != nil {
-		log.InfraSec().InfraErr(err).Msgf("reconciliation resource failed")
-	}
-}
-
-func (dc *Controller) reconcileResource(tenantID, resourceID string) error {
-	expectedKind, err := util.GetResourceKindFromResourceID(resourceID)
-	if err != nil {
-		return fmt.Errorf("unknown resource kind for resource ID %s: %w", resourceID, err)
-	}
-
-	log.Debug().Msgf("Reconciling resource (%s) of kind=%s",
-		fmt.Sprintf("[tenantID=%s, resourceID=%s]", tenantID, resourceID), expectedKind)
-
-	err = dc.DeviceController.Reconcile(NewID(tenantID, resourceID))
-	if err != nil {
-		log.Err(err).Msgf("Failed to reconcile internal event")
-	}
-	return nil
-}
-
 func (dc *Controller) Stop() {
 	dc.WaitGroup.Done()
 }
@@ -253,44 +217,6 @@ func (dc *Controller) Reconcile(ctx context.Context, request rec_v2.Request[ID])
 		invHost.GetCurrentAmtState().String(), invHost.GetCurrentPowerState().String(), request.ID)
 
 	switch {
-	case invHost.GetCurrentAmtState() == computev1.AmtState_AMT_STATE_UNSPECIFIED &&
-		invHost.GetDesiredAmtState() == computev1.AmtState_AMT_STATE_UNPROVISIONED:
-		log.Debug().Msgf("AMT device is capable and update state to unprovisioned for %v ", request.ID)
-		err = dc.updateHost(ctx, invHost.GetTenantId(), invHost.GetResourceId(),
-			&fieldmaskpb.FieldMask{Paths: []string{
-				computev1.HostResourceFieldCurrentAmtState,
-				computev1.HostResourceFieldAmtStatusIndicator,
-				computev1.HostResourceFieldAmtStatusTimestamp,
-			}}, &computev1.HostResource{
-				CurrentAmtState:    computev1.AmtState_AMT_STATE_UNPROVISIONED,
-				AmtStatus:          "Setting the AMT activation state to unprovisioned",
-				AmtStatusIndicator: statusv1.StatusIndication_STATUS_INDICATION_ERROR,
-			})
-		if err != nil {
-			log.Err(err).Msgf("Failed to update AMT state info")
-			return request.Fail(err)
-		}
-		return request.Ack()
-
-	case invHost.GetCurrentAmtState() == computev1.AmtState_AMT_STATE_UNPROVISIONED &&
-		invHost.GetDesiredAmtState() == computev1.AmtState_AMT_STATE_PROVISIONED:
-		log.Debug().Msgf("Updating AMT activation state to provisioned for %v ", request.ID)
-		err = dc.updateHost(ctx, invHost.GetTenantId(), invHost.GetResourceId(),
-			&fieldmaskpb.FieldMask{Paths: []string{
-				computev1.HostResourceFieldCurrentAmtState,
-				computev1.HostResourceFieldAmtStatusIndicator,
-				computev1.HostResourceFieldAmtStatusTimestamp,
-			}}, &computev1.HostResource{
-				CurrentAmtState:    computev1.AmtState_AMT_STATE_PROVISIONED,
-				AmtStatus:          "Setting the AMT activation state to provisioned",
-				AmtStatusIndicator: statusv1.StatusIndication_STATUS_INDICATION_IN_PROGRESS,
-			})
-		if err != nil {
-			log.Err(err).Msgf("Failed to update AMT state info")
-			return request.Fail(err)
-		}
-		return request.Ack()
-
 	case invHost.GetCurrentAmtState() == computev1.AmtState_AMT_STATE_PROVISIONED &&
 		invHost.GetDesiredAmtState() == computev1.AmtState_AMT_STATE_UNPROVISIONED:
 		log.Debug().Msgf("Setting AMT activation state to unprovisioned for %v", request.ID)
diff --git a/dm-manager/pkg/device/device_test.go b/dm-manager/pkg/device/device_test.go
index 22ee5668..d0e22f66 100644
--- a/dm-manager/pkg/device/device_test.go
+++ b/dm-manager/pkg/device/device_test.go
@@ -411,16 +411,6 @@ func TestDeviceController_Reconcile_ifResponseHasNotReadyThenShouldFailRequest(t
 	powerHook.AssertWithTimeout(t, time.Second)
 }
 
-func TestDeviceController_Reconcile_AmtCapable(t *testing.T) {
-	dao, hostUUID, _, deviceReconciller := prepareAMTEnv(t, computev1.AmtState_AMT_STATE_UNPROVISIONED)
-
-	deviceReconciller.Reconcile(context.Background(), rec_v2.Request[ID]{ID: NewID(client.FakeTenantID, hostUUID)})
-
-	host, err := dao.GetRMClient().GetHostByUUID(context.Background(), client.FakeTenantID, hostUUID)
-	assert.NoError(t, err)
-	assert.Equal(t, computev1.AmtState_AMT_STATE_UNPROVISIONED, host.CurrentAmtState)
-}
-
 func TestDeviceController_Reconcile_AmtActivation(t *testing.T) {
 	dao, hostUUID, _, deviceReconciller := prepareAMTEnv(t, computev1.AmtState_AMT_STATE_PROVISIONED)
 
